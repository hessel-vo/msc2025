The target code below is part of the automotive software engineering domain.
Use the target summary below to generate the related Cpp function.
Do not provide any other output.

---

**[Examples]**
**[Example 1]**
**Summary:**
"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails.”

**Code:**
```cpp
bool DBusConnection::sendDBusMessage(const DBusMessage &_message) const {
    if (!_message) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "message == NULL");
        return false;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "not connected");
        return false;
    }

    dbus_uint32_t dbusSerial;
    const bool result = (0 != dbus_connection_send(connection_, _message.message_, &dbusSerial));
    return result;
}
```

**[Example 2]**
**Summary:**
"Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID.”

**Code:**
```cpp
DBusMessage DBusClientId::createMessage(const std::string objectPath, const std::string interfaceName, const std::string signalName) const
{
    DBusMessage returnMessage = DBusMessage::createSignal(objectPath, interfaceName, signalName);
    returnMessage.setDestination(dbusId_.c_str());

    return (returnMessage);
}
```

**[Example 3]**
**Summary:**
"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active.”

**Code:**
```cpp
void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}
```

---

**[Target]**
**Generate a Cpp function based on the summary and function signature below (do not provide any other output)**

**Summary:**
"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails."

**Code:**
```cpp
bool DBusConnection::sendDBusMessage(const DBusMessage &_message) const {
```
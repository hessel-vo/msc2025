The target code below is part of the automotive software engineering domain.
Use the target summary below to generate the related Python function.
Do not provide any other output.

---

**[Examples]**
**[Example 1]**
**Summary:**
"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes.”

**Code:**
```python
def is_subtype_of(cls, check: str, base: str) -> bool:
    check_type = cls.get_type(check)
    if not check_type:
        raise DatatypesException(f"Not a valid type: '{check}'")
    base_type = cls.get_type(base)
    if not base_type:
        raise DatatypesException(f"Not a valid type: '{base}'")
    return check in base_type[2] or check == base
```

**[Example 2]**
**Summary:**
"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'.”

**Code:**
```python
def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f"Unsupported datatype: {datatype}")
    return t[1](value)
```

**[Example 3]**
**Summary:**
"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness.”

**Code:**
```python
def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True
```

---

**[Target]**
**Generate a Python function based on the summary and function signature below (do not provide any other output)**

**Summary:**
"Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype."

**Code:**
```python
def is_VSS_leaf(node: VSSNode) -> bool:
```
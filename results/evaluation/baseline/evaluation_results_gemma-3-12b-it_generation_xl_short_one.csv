id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        return False","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    try:
        if datatype == ""int"":
            return isinstance(value, int)
        elif datatype == ""float"":
            return isinstance(value, float)
        elif datatype == ""str"":
            return isinstance(value, str)
        elif datatype == ""bool"":
            return isinstance(value, bool)
        elif datatype == ""list"":
            return isinstance(value, list)
        elif datatype == ""tuple"":
            return isinstance(value, tuple)
        elif datatype == ""dict"":
            return isinstance(value, dict)
        elif datatype == ""set"":
            return isinstance(value, set)
        else:
            return False
    except Exception:
        return False",37.16,9.74,35.83,23.08,80.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(v, signed, bits) for v in value)

    if not isinstance(value, int):
        return False

    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1

    return lower_bound <= value <= upper_bound","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(v, signed, bits) for v in value)

    if not isinstance(value, int):
        return False

    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1

    return lower_bound <= value <= upper_bound",38.66,22.46,23.23,60.32,48.65
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.__dict__.get('types', []):
        if type_def[0] == datatype:
            return type_def
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    if hasattr(cls, 'types'):
        for type_def in cls.types:
            if type_def[0] == datatype:
                return type_def
    return None",65.18,50.17,54.67,74.07,81.82
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    datatypes = {}
    if fqn:
        parts = fqn.split(""."")
        namespace = ""."".join(parts[:-1])
        type_name = parts[-1]
        if namespace:
            for name, dtype in get_datatypes_in_namespace(namespace).items():
                if name == type_name:
                    datatypes[fqn] = dtype
        else:
            for name, dtype in get_datatypes_in_namespace("""").items():
                if name == type_name:
                    datatypes[fqn] = dtype
    return datatypes

def get_datatypes_in_namespace(namespace: str) -> dict[str, str]:
    datatypes = {}
    if namespace == """":
        datatypes[""int""] = ""int""
        datatypes[""str""] = ""str""
        datatypes[""bool""] = ""bool""
    elif namespace == ""java.util"":
        datatypes[""List""] = ""java.util.List""
        datatypes[""Map""] = ""java.util.Map""
    return datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    datatypes = {}
    if fqn:
        parts = fqn.split(""."")
        namespace = ""."".join(parts[:-1])
        type_name = parts[-1]
        if namespace:
            for name, dtype in get_datatypes_in_namespace(namespace).items():
                if name == type_name:
                    datatypes[fqn] = dtype
        else:
            for name, dtype in get_datatypes_in_namespace("""").items():
                if name == type_name:
                    datatypes[fqn] = dtype
    return datatypes

def get_datatypes_in_namespace(namespace: str) -> dict[str, str]:
    datatypes = {}
    if namespace == """":
        datatypes[""int""] = ""int""
        datatypes[""str""] = ""str""
        datatypes[""bool""] = ""bool""
    elif namespace == ""java.util"":
        datatypes[""List""] = ""java.util.List""
        datatypes[""Map""] = ""java.util.Map""
    return datatypes",33.07,12.46,30.63,48.44,40.74
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""number"":
        return ApiGearType.NUMBER
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    else:
        return None","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""number"":
        return ApiGearType.NUMBER
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    else:
        return None",19.0,9.76,13.2,30.09,22.95
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node or not datatype:
        return None

    property = ApiGearProperty()
    property.name = node.name
    property.datatype = datatype

    if node.units:
        property.units = node.units

    if node.description:
        property.description = node.description

    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node or not datatype:
        return None

    property = ApiGearProperty()
    property.name = node.name
    property.datatype = datatype

    if hasattr(node, 'units') and node.units:
        property.units = node.units

    if hasattr(node, 'description') and node.description:
        property.description = node.description

    return property",35.81,29.67,31.34,42.22,40.0
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

class VSpec:
    def __init__(self):
        self.data = {}

    def merge(self, other):
        for key, value in other.data.items():
            if key in self.data:
                if isinstance(self.data[key], list) and isinstance(value, list):
                    self.data[key].extend(value)
                else:
                    raise ValueError(f""Conflicting types for key: {key}"")
            else:
                self.data[key] = value

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec()
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                spec_data = {}
                for line in f:
                    line = line.strip()
                    if not line or line.startswith('#'):
                        continue
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    try:
                        spec_data[key] = int(value)
                    except ValueError:
                        spec_data[key] = value
                vspec.merge(VSpec(data=spec_data))
        except FileNotFoundError:
            print(f""Warning: File not found: {spec_path}"")
        except Exception as e:
            print(f""Error loading {spec_path}: {e}"")
    return vspec","from pathlib import Path

class VSpec:
    def __init__(self, data=None):
        self.data = data if data is not None else {}

    def merge(self, other):
        for key, value in other.data.items():
            if key in self.data:
                if isinstance(self.data[key], list) and isinstance(value, list):
                    self.data[key].extend(value)
                elif isinstance(self.data[key], (int, float)) and isinstance(value, (int, float)):
                    self.data[key] += value
                else:
                    raise ValueError(f""Conflicting types for key: {key}"")
            else:
                self.data[key] = value

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec()
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                spec_data = {}
                for line in f:
                    line = line.strip()
                    if not line or line.startswith('#'):
                        continue
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    try:
                        spec_data[key] = int(value)
                    except ValueError:
                        try:
                            spec_data[key] = float(value)
                        except ValueError:
                            spec_data[key] = value
                vspec.merge(VSpec(data=spec_data))
        except FileNotFoundError:
            print(f""Warning: File not found: {spec_path}"")
        except Exception as e:
            print(f""Error loading {spec_path}: {e}"")
    return vspec",31.78,12.66,22.41,45.56,46.51
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict) and key in base and isinstance(base[key], dict):
            deep_update(base[key], value)
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict) and key in base and isinstance(base[key], dict):
            deep_update(base[key], value)
        else:
            base[key] = value",81.35,76.52,77.01,81.25,90.62
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 32:
        return None
    try:
        int(v, 16)
        return v
    except ValueError:
        return None","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 32:
        return None
    if not all(c in '0123456789abcdefABCDEF' for c in v):
        return None
    return v",50.56,40.37,51.85,40.0,70.0
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw()
    model.from_dict(data)
    if not model.resolve(fqn):
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw()
    try:
        model.from_dict(data)
        if not model.resolve(fqn):
            return model
        return model
    except Exception as e:
        return model",50.42,42.85,45.51,40.0,73.33
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_values = []
    for value in values:
        try:
            cls(value)
            valid_values.append(value)
        except ValueError:
            pass
    return valid_values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_values = []
    for value in values:
        try:
            cls(value)
            valid_values.append(value)
        except ValueError:
            pass
    return valid_values",47.39,33.93,34.79,45.83,75.0
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, level: int) -> str:
        attributes_str = "", "".join(
            [f""{attr}={getattr(node, attr, None)}"" for attr in attributes]
        )
        node_str = f""{'  ' * level}- {node.name} ({attributes_str})""
        children_str = """"
        for child in node.children:
            children_str += render_node(child, level + 1)
        return node_str + ""\n"" + children_str

    return render_node(tree, 0)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, level: int) -> str:
        attributes_str = "", "".join(
            [f""{attr}={getattr(node, attr, None)}"" for attr in attributes]
        )
        node_str = f""{'  ' * level}- {node.name} ({attributes_str})""
        children_str = """"
        for child in node.children:
            children_str += render_node(child, level + 1)
        return node_str + ""\n"" + children_str

    return render_node(tree, 0)",22.46,11.75,14.63,29.23,34.21
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if self.parent is None:
        return self, depth
    else:
        return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if self.parent is None:
        return self, depth
    return self.parent.get_instance_root(depth + 1)",50.91,45.06,45.68,55.0,57.89
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    count = 0
    current = self
    while current.parent:
        count += 1
        current = current.parent
    return count","def count_instance_children_depth(self) -> int:
    count = 0
    current = self
    while current.parent:
        count += 1
        current = current.parent
    return count",25.98,13.79,14.06,26.09,50.0
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + '_'):
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + '_'):
            children_ids.append(node_id)
    return children_ids",64.23,40.64,42.92,73.33,100.0
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    value = getattr(o, name, default)
    return value",54.28,44.05,43.08,50.0,80.0
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.name.startswith(""Signal""):
        fd.write(f"".signal {tree.name} {{\n"")
        if add_optional:
            fd.write(""  optional = true;\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        fd.write(f""  type = {tree.type};\n"")
        if tree.group_name:
            fd.write(f""  group_name = \""{tree.group_name}\"";\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.factor};\n"")
        if tree.offset:
            fd.write(f""  offset = {tree.offset};\n"")
        if tree.unit:
            fd.write(f""  unit = \""{tree.unit}\"";\n"")
        if tree.value_range_max is not None:
            fd.write(f""  value_range_max = {tree.value_range_max};\n"")
        if tree.value_range_min is not None:
            fd.write(f""  value_range_min = {tree.value_range_min};\n"")
        fd.write(""}\n"")
    elif tree.name.startswith(""DiagnosticSignal""):
        fd.write(f"".signal {tree.name} {{\n"")
        if add_optional:
            fd.write(""  optional = true;\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        fd.write(f""  type = {tree.type};\n"")
        if tree.group_name:
            fd.write(f""  group_name = \""{tree.group_name}\"";\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.factor};\n"")
        if tree.offset:
            fd.write(f""  offset = {tree.offset};\n"")
        if tree.unit:
            fd.write(f""  unit = \""{tree.unit}\"";\n"")
        if tree.value_range_max is not None:
            fd.write(f""  value_range_max = {tree.value_range_max};\n"")
        if tree.value_range_min is not None:
            fd.write(f""  value_range_min = {tree.value_range_min};\n"")
        fd.write(""}\n"")
    elif tree.name.startswith(""DiagnosticEvent""):
        fd.write(f"".event {tree.name} {{\n"")
        if add_optional:
            fd.write(""  optional = true;\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        fd.write(f""  type = {tree.type};\n"")
        if tree.group_name:
            fd.write(f""  group_name = \""{tree.group_name}\"";\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.name.startswith(""Signal""):
        fd.write(f"".signal {tree.name} {{\n"")
        if add_optional:
            fd.write(""  optional = true;\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        fd.write(f""  type = {tree.type};\n"")
        if tree.group_name:
            fd.write(f""  group_name = \""{tree.group_name}\"";\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.factor};\n"")
        if tree.offset:
            fd.write(f""  offset = {tree.offset};\n"")
        if tree.unit:
            fd.write(f""  unit = \""{tree.unit}\"";\n"")
        if tree.value_range_max is not None:
            fd.write(f""  value_range_max = {tree.value_range_max};\n"")
        if tree.value_range_min is not None:
            fd.write(f""  value_range_min = {tree.value_range_min};\n"")
        fd.write(""}\n"")
    elif tree.name.startswith(""DiagnosticSignal""):
        fd.write(f"".signal {tree.name} {{\n"")
        if add_optional:
            fd.write(""  optional = true;\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        fd.write(f""  type = {tree.type};\n"")
        if tree.group_name:
            fd.write(f""  group_name = \""{tree.group_name}\"";\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.factor};\n"")
        if tree.offset:
            fd.write(f""  offset = {tree.offset};\n"")
        if tree.unit:
            fd.write(f""  unit = \""{tree.unit}\"";\n"")
        if tree.value_range_max is not None:
            fd.write(f""  value_range_max = {tree.value_range_max};\n"")
        if tree.value_range_min is not None:
            fd.write(f""  value_range_min = {tree.value_range_min};\n"")
        fd.write(""}\n"")
    elif tree.name.startswith(""DiagnosticEvent""):
        fd.write(f"".event {tree.name} {{\n"")
        if add_optional:
            fd.write(""  optional = true;\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        fd.write(f""  type = {tree.type};\n"")
        if tree.group_name:
            fd.write(f""  group_name = \""{tree.group_name}\"";\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.",26.06,4.8,13.57,34.02,51.85
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for node in root.get_leaf_vss_nodes():
        branch_name = node.branch_definition.fully_qualified_name
        if branch_name not in instances_meta:
            instances_meta[branch_name] = []
        instances_meta[branch_name].append(node.name)
    return instances_meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for node in root.get_leaf_vss_nodes():
        branch_name = node.branch_definition.fully_qualified_name
        if branch_name not in instances_meta:
            instances_meta[branch_name] = []
        instances_meta[branch_name].append(node.name)
    return instances_meta",27.8,12.17,17.22,47.13,34.69
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    if node.data_type == ""leaf"":
        return True
    else:
        return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type == ""leaf",63.4,43.24,53.21,57.14,100.0
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance",35.83,25.92,25.82,31.58,60.0
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.is_branch_instance","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.is_branch_instance",30.78,23.67,26.13,33.33,40.0
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_offset_basis = 0x811c9dc5
    FNV_prime = 0x01000193
    hash_val = FNV_offset_basis
    for byte in identifier:
        hash_val ^= byte
        hash_val *= FNV_prime
        hash_val &= 0xFFFFFFFF
    return hash_val","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_offset_basis = 0x811c9dc5
    FNV_prime = 0x01000193
    hash_val = FNV_offset_basis
    for byte in identifier:
        hash_val ^= byte
        hash_val *= FNV_prime
        hash_val &= 0xFFFFFFFF
    return hash_val",32.92,23.71,30.59,47.37,30.0
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_card, container, false);
        return view;
    }","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_card, container, false);
        return view;
    }",43.32,39.25,41.28,51.85,40.91
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent != null && buttonContent.getIcon() != null) {
            buttonView.setIcon(buttonContent.getIcon());
            buttonView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    buttonContent.executeAction();
                }
            });
            buttonView.setVisibility(View.VISIBLE);
        } else {
            buttonView.setVisibility(View.GONE);
        }
    }","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent != null && buttonContent.getIcon() != null) {
            buttonView.setIcon(buttonContent.getIcon());
            buttonView.setOnClickListener(v -> buttonContent.executeAction());
            buttonView.setVisibility(View.VISIBLE);
        } else {
            buttonView.setVisibility(View.GONE);
        }
    }",75.38,43.31,77.57,80.65,100.0
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
        View view = mDescriptiveTextOnlyLayoutView;
        if (view == null) {
            mDescriptiveTextOnlyLayoutView = createDescriptiveTextOnlyLayoutView();
            view = mDescriptiveTextOnlyLayoutView;
        }
        return view;
    }","protected final View getDescriptiveTextOnlyLayoutView() {
        View view = mDescriptiveTextOnlyLayoutView;
        if (view == null) {
            mDescriptiveTextOnlyLayoutView = createDescriptiveTextOnlyLayoutView();
            view = mDescriptiveTextOnlyLayoutView;
        }
        return view;
    }",15.41,15.31,17.99,13.64,14.71
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(newTitle);
    header.setIcon(newIcon);
    header.update();
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(title);
    header.setIcon(icon);
    header.update();
}",47.93,29.95,33.18,28.57,100.0
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    return LayoutInflater.from(this).inflate(R.layout.text_block_layout, null);
}","private View getTextBlockLayoutView() {
    return LayoutInflater.from(this).inflate(R.layout.text_block_layout, null);
}",35.07,4.03,11.25,25.0,0.0
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        try {
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setPackage(packageName);
            ResolveInfo resolveInfo = packageManager.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);
            if (resolveInfo != null) {
                return resolveInfo.activityInfo.componentName;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        try {
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setPackage(packageName);
            ResolveInfo resolveInfo = packageManager.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);
            if (resolveInfo != null) {
                return resolveInfo.activityInfo.componentName;
            }
        } catch (Exception e) {
            return null;
        }
        return null;
    }",35.05,26.4,27.33,47.17,39.29
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    if ((appTypesToShow & componentAppType) == 0) {
        return false;
    }
    if (customMediaComponents.contains(componentName.getClassName())) {
        return false;
    }
    return true;
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    if ((appTypesToShow & componentAppType) == 0) {
        return false;
    }
    if (customMediaComponents.contains(componentName.getClassName())) {
        return false;
    }
    return true;
}",64.75,50.96,54.08,68.25,85.71
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(componentName);
        ((Activity) context).finish();
    }","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(componentName);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    }",35.35,18.75,30.4,32.26,60.0
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        try {
            CarPackage carPackage = carPackageManager.getCarPackage(packageName);
            if (carPackage != null) {
                Activity activity = carPackage.getActivity(activityName);
                if (activity != null) {
                    return activity.isDistractionOptimized();
                }
            }
            return false;
        } catch (Exception e) {
            return false;
        }
    }","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        try {
            CarPackage carPackage = carPackageManager.getCarPackage(packageName);
            if (carPackage != null) {
                Activity activity = carPackage.getActivity(activityName);
                if (activity != null) {
                    return activity.isDistractionOptimized();
                }
            }
            return false;
        } catch (Exception e) {
            return false;
        }
    }",33.89,19.67,20.58,31.03,64.29
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=current location""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        return null;
    }","private Intent getMapsIntent() {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=current location""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        return null;
    }",14.74,7.26,10.77,24.24,16.67
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    try {
        ResourceBundle config = ResourceBundle.getBundle(""homecards"");
        List<String> cardClasses = new ArrayList<>();
        Enumeration<String> keys = config.getKeys();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            if (key.startsWith(""card."")) {
                cardClasses.add(config.getString(key));
            }
        }

        for (String cardClass : cardClasses) {
            try {
                Class<?> cardClassObj = Class.forName(cardClass);
                HomeCard card = (HomeCard) cardClassObj.getDeclaredConstructor().newInstance();
                card.display();
            } catch (ClassNotFoundException e) {
                System.err.println(""Card class not found: "" + cardClass);
            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                System.err.println(""Error instantiating card: "" + cardClass + "" - "" + e.getMessage());
            }
        }
    } catch (Exception e) {
        System.err.println(""Error initializing cards: "" + e.getMessage());
    }
}","private void initializeCards() {
    try {
        ResourceBundle config = ResourceBundle.getBundle(""homecards"");
        List<String> cardClasses = new ArrayList<>();
        Enumeration<String> keys = config.getKeys();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            if (key.startsWith(""card."")) {
                cardClasses.add(config.getString(key));
            }
        }

        for (String cardClass : cardClasses) {
            try {
                Class<?> cardClassObj = Class.forName(cardClass);
                HomeCard card = (HomeCard) cardClassObj.getConstructor().newInstance();
                card.display();
            } catch (ClassNotFoundException e) {
                System.err.println(""Card class not found: "" + cardClass);
            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                System.err.println(""Error instantiating card: "" + cardClass + "" - "" + e.getMessage());
            }
        }
    } catch (Exception e) {
        System.err.println(""Error initializing cards: "" + e.getMessage());
    }
}",25.24,7.67,7.93,37.36,48.0
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }

        List<TaskAppearedInfo> tasksToRemove = new ArrayList<>();
        for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
            if (taskAppearedInfo.isMultiWindow() && taskAppearedInfo.isRemoved()) {
                tasksToRemove.add(taskAppearedInfo);
            }
        }

        taskAppearedInfos.removeAll(tasksToRemove);
    }","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }

        taskAppearedInfos.removeIf(taskAppearedInfo -> taskAppearedInfo.isMultiWindow() && taskAppearedInfo.isRemoved());
    }",29.6,26.89,29.15,30.56,31.82
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    String mode = intent.getStringExtra(""mode"");
    if (mode != null && !mode.isEmpty()) {
        setTitle(""Mode: "" + mode);
    } else {
        setTitle(""Mode: Default"");
    }
}","private void updateMode() {
    String mode = intent.getStringExtra(""mode"");
    if (mode != null && !mode.isEmpty()) {
        setTitle(""Mode: "" + mode);
    } else {
        setTitle(""Mode: Default"");
    }
}",22.16,10.01,31.02,14.29,33.33
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    return chronometer;
}","private Chronometer getChronometer() {
    if (chronometer == null) {
        chronometer = new Chronometer();
    }
    return chronometer;
}",32.9,6.16,13.89,11.54,0.0
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
        int blurRadius = 10;
        float scaleFactor = 0.5f;

        Bitmap blurredBitmap = Bitmap.createBitmap(imageWidth, imageHeight, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(blurredBitmap);
        Paint paint = new Paint();
        paint.setARGB(255, 0, 0, 0);

        RenderScript rs = RenderScript.create(context);
        ScriptCBlur blurScript = ScriptCBlur.create(rs);
        blurScript.setRadius(blurRadius);
        blurScript.setInput(rs, originalBitmap);
        blurScript.forEach(rs, new ScriptCBlur.ExecutionScript(blurScript), canvas);
        rs.finish();
        rs.destroy();

        Bitmap scaledBitmap = Bitmap.createScaledBitmap(blurredBitmap, (int)(imageWidth * scaleFactor), (int)(imageHeight * scaleFactor), true);
        blurredBitmap.recycle();

        ImageView imageView = new ImageView(context);
        imageView.setImageBitmap(scaledBitmap);
        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
        return imageView;
    }","private View getMediaLayoutView() {
        int blurRadius = 10;
        float scaleFactor = 0.5f;

        Bitmap blurredBitmap = Bitmap.createBitmap(imageWidth, imageHeight, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(blurredBitmap);
        Paint paint = new Paint();

        RenderScript rs = RenderScript.create(context);
        try {
            ScriptCBlur blurScript = ScriptCBlur.create(rs);
            blurScript.setRadius(blurRadius);
            blurScript.setInput(rs, originalBitmap);
            blurScript.forEach(rs, new ScriptCBlur.ExecutionScript(blurScript), canvas);
            rs.finish();
        } finally {
            if (rs != null) {
                rs.destroy();
            }
        }


        Bitmap scaledBitmap = Bitmap.createScaledBitmap(blurredBitmap, (int)(imageWidth * scaleFactor), (int)(imageHeight * scaleFactor), true);
        blurredBitmap.recycle();

        ImageView imageView = new ImageView(context);
        imageView.setImageBitmap(scaledBitmap);
        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
        return imageView;
    }",25.21,4.1,9.9,55.81,31.03
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    if (image == null) {
        return;
    }

    int width = getWidth();
    int height = getHeight();

    image.setBounds(0, 0, width, height);

    Blur.blur(image, null, 8, true);

    image.draw(new Canvas(new Bitmap(width, height, Bitmap.Config.ARGB_8888)));
}","private void updateBackgroundImage(Drawable image) {
    if (image == null) {
        return;
    }

    int width = getWidth();
    int height = getHeight();

    image.setBounds(0, 0, width, height);

    image.setAlpha(128);
    image.draw(new Canvas(new Bitmap(width, height, Bitmap.Config.ARGB_8888)));
    image.setAlpha(255);
}",22.27,15.08,17.03,38.46,18.52
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaView.setVisibility(View.VISIBLE);
    mediaView.setTitle(title);
    mediaView.setSubtitle(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaView.setVisibility(View.VISIBLE);
    mediaView.setTitle(title);
    mediaView.setSubtitle(subtitle);
}",70.84,59.0,61.21,63.16,100.0
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        content.startChronometer();
    } else {
        content.hideChronometer();
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        content.startChronometer();
    } else {
        content.hideChronometer();
    }
}",38.51,52.76,55.16,31.11,15.0
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
}","public void onCallAdded(Call call) {
}",44.9,24.76,31.77,23.08,0.0
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
        resetState();
        unregisterCallback();
    }

    private void resetState() {
    }

    private void unregisterCallback() {
    }","public void onCallRemoved(Call call) {
        resetState();
        unregisterCallback();
    }

    private void resetState() {
    }

    private void unregisterCallback() {
    }",24.85,20.23,21.31,15.0,42.86
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = formatPhoneNumber(number);
    viewModel.setPhoneNumber(formattedNumber);
    viewModel.setShowDialpad(true);
    viewModel.setShowAddContact(true);
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = formatPhoneNumber(number);
    viewModel.setPhoneNumber(formattedNumber);
    viewModel.setShowDialpad(true);
    viewModel.setShowAddContact(true);
}",22.62,25.19,29.19,11.11,25.0
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
        muteButton = findViewById(R.id.mute_button);
        endCallButton = findViewById(R.id.end_call_button);
        dialpadButton = findViewById(R.id.dialpad_button);

        muteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                toggleMute();
            }
        });

        endCallButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                endCall();
            }
        });

        dialpadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showDialpad();
            }
        });
    }","private void initializeAudioControls() {
        muteButton = findViewById(R.id.mute_button);
        endCallButton = findViewById(R.id.end_call_button);
        dialpadButton = findViewById(R.id.dialpad_button);

        muteButton.setOnClickListener(v -> toggleMute());

        endCallButton.setOnClickListener(v -> endCall());

        dialpadButton.setOnClickListener(v -> showDialpad());
    }",24.8,5.74,9.37,34.09,50.0
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (m_connectionStatus == ConnectionStatus::Connected) {
        _listener.listenerCallback(true);
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (m_connectionStatus == ConnectionStatus::Connected) {
        _listener.listenerCallback(true);
    }
}",50.37,46.83,61.17,43.48,50.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(connectionMutexes[conn]);
    if (connectionsToJoin.find(conn) == connectionsToJoin.end()) {
        connectionsToJoin[conn] = std::vector<std::thread*>();
    }
    bool found = false;
    for (auto &threadPtr : connectionsToJoin[conn]) {
        if (threadPtr == &t) {
            found = true;
            break;
        }
    }
    if (!found) {
        connectionsToJoin[conn].push_back(&t);
    }
}","void joinOnExit(std::uintptr_t conn, std::thread &t) {
    std::lock_guard<std::mutex> lock(connectionMutexes[conn]);
    if (connectionsToJoin.find(conn) == connectionsToJoin.end()) {
        connectionsToJoin[conn] = std::vector<std::thread*>();
    }
    for (auto &threadPtr : connectionsToJoin[conn]) {
        if (threadPtr == &t) {
            return;
        }
    }
    connectionsToJoin[conn].push_back(&t);
}",41.68,26.41,30.77,50.72,58.82
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        libdbusWatch->unwatch();
        delete libdbusWatch;
    }
    if (data) {
        delete data;
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        libdbusWatch->unwatch();
        delete libdbusWatch;
    }
    if (data) {
        delete data;
    }
}",27.96,16.71,21.34,28.33,45.45
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}",16.83,2.37,11.19,38.38,15.38
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    std::shared_ptr<DBusObjectManager> manager;
    if (!objectManager_) {
        std::lock_guard<std::mutex> lock(objectManagerMutex_);
        if (!objectManager_) {
            objectManager_ = std::make_shared<DBusObjectManager>(connection_);
        }
    }
    return objectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    std::shared_ptr<DBusObjectManager> manager;
    if (!objectManager_) {
        std::lock_guard<std::mutex> lock(objectManagerMutex_);
        if (!objectManager_) {
            objectManager_ = std::make_shared<DBusObjectManager>(connection_);
        }
    }
    return objectManager_;
}",52.17,19.46,22.54,66.67,100.0
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (!connection) {
        return false;
    }

    try {
        return connection->release_name(serviceName);
    } catch (const DBusError& err) {
        std::cerr << ""Error releasing service name "" << serviceName << "": "" << err.getName() << std::endl;
        return false;
    }
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (!connection) {
        return false;
    }

    try {
        return connection->release_name(serviceName);
    } catch (const DBusError& err) {
        return false;
    }
}",23.11,10.46,11.25,35.71,35.0
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage reply = _libdbusPendingCall->GetReply();
    return reply;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage reply = _libdbusPendingCall->GetReply();
    return reply;
}",18.7,4.53,8.73,28.21,33.33
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(async_mutex_);
    while (!async_handlers_.empty()) {
        AsyncHandler* handler = async_handlers_.back();
        async_handlers_.pop_back();
        delete handler;
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(async_mutex_);
    for (auto it = async_handlers_.begin(); it != async_handlers_.end(); ) {
        AsyncHandler* handler = *it;
        it = async_handlers_.erase(it);
        delete handler;
    }
}",20.55,4.67,5.58,46.94,25.0
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    QHash<QObject*, QList<DBusSignalState>> signalStates = this->signalStates;
    for (auto it = signalStates.begin(); it != signalStates.end(); ++it) {
        QObject *object = it.key();
        QList<DBusSignalState> states = it.value();
        for (const DBusSignalState &state : states) {
            if (state.success) {
                QDBusMessage message = QDBusMessage::createMethodCall(
                    state.service,
                    state.path,
                    state.interface,
                    state.member
                );
                QDBusError error;
                QDBusConnection::sessionBus().call(message, 5000, &error);
            }
        }
    }
}","void DBusConnection::handleSignalStates() {
    QHash<QObject*, QList<DBusSignalState>> signalStates = this->signalStates;
    for (auto it = signalStates.begin(); it != signalStates.end(); ++it) {
        QObject *object = it.key();
        QList<DBusSignalState> states = it.value();
        for (const DBusSignalState &state : states) {
            if (state.success) {
                QDBusMessage message = QDBusMessage::createMethodCall(
                    state.service,
                    state.path,
                    state.interface,
                    state.member
                );
                QDBusError error;
                if (QDBusConnection::sessionBus().call(message, 5000, &error)) {
                    if (error.isValid()) {
                        qDebug() << ""Error calling DBus method:"" << error.message();
                    }
                } else {
                    qDebug() << ""Timeout calling DBus method."";
                }
            }
        }
    }
}",25.33,3.75,7.36,15.22,75.0
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    connections_.erase(_connectionId);
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = connections_.find(_connectionId);
    if (it != connections_.end()) {
        connections_.erase(it);
    }
}",32.3,16.9,21.59,65.71,25.0
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::Signal) {
        const std::string& signalName = dbusMessage.member();
        if (signalName == ""InstanceAdded"") {
            handleInstanceAdded(dbusMessage);
        } else if (signalName == ""InstanceRemoved"") {
            handleInstanceRemoved(dbusMessage);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::Signal) {
        const std::string& signalName = dbusMessage.member();
        if (signalName == ""InstanceAdded"") {
            handleInstanceAdded(dbusMessage);
        } else if (signalName == ""InstanceRemoved"") {
            handleInstanceRemoved(dbusMessage);
        }
    }
}",52.04,20.62,42.09,45.45,100.0
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::OK;
    _availableServiceInstances = m_availableServiceInstances;
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::OK;
    _availableServiceInstances = m_availableServiceInstances;
}",24.97,15.58,17.09,38.64,28.57
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::NotCalled;
    _availabilityStatus = AvailabilityStatus::Unavailable;

    if (_instance.empty()) {
        return;
    }

    DBusError error;
    DBusConnection *connection = dbus_bus_get(DBUS_BUS_SESSION, &error);

    if (!connection) {
        _callStatus = CallStatus::Failed;
        return;
    }

    DBusMessage *msg = dbus_message_new_method_call(connection,
                                                    ""org.freedesktop.DBus"",
                                                    ""/org/freedesktop/DBus"",
                                                    ""org.freedesktop.DBus"",
                                                    ""NameOwner"");

    dbus_message_set_arguments(msg, DBUS_TYPE_STRING, &_instance, DBUS_TYPE_STRING, &owner, DBUS_TYPE_INVALID);

    DBusMessage *reply = dbus_connection_send_with_reply_and_block(connection, msg, -1, &error);

    if (dbus_error_is_set(&error)) {
        dbus_error_free(&error);
        _callStatus = CallStatus::Failed;
        return;
    }

    if (!reply) {
        _callStatus = CallStatus::Failed;
        return;
    }

    if (dbus_message_get_reply_error(reply) != NULL) {
        _callStatus = CallStatus::Failed;
        dbus_message_unref(reply);
        dbus_connection_unref(connection);
        return;
    }

    if (dbus_message_get_args(reply, DBUS_TYPE_STRING, &owner, DBUS_TYPE_INVALID) == TRUE) {
        if (!owner.empty()) {
            _availabilityStatus = AvailabilityStatus::Available;
        }
    }

    dbus_message_unref(reply);
    dbus_connection_unref(connection);
    _callStatus = CallStatus::Success;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::NotCalled;
    _availabilityStatus = AvailabilityStatus::Unavailable;

    if (_instance.empty()) {
        return;
    }

    DBusError error;
    DBusConnection *connection = dbus_bus_get(DBUS_BUS_SESSION, &error);

    if (!connection) {
        _callStatus = CallStatus::Failed;
        return;
    }

    DBusMessage *msg = dbus_message_new_method_call(connection,
                                                    ""org.freedesktop.DBus"",
                                                    ""/org/freedesktop/DBus"",
                                                    ""org.freedesktop.DBus"",
                                                    ""NameOwner"");

    dbus_message_set_arguments(msg, DBUS_TYPE_STRING, &_instance, DBUS_TYPE_STRING, &owner, DBUS_TYPE_INVALID);

    DBusMessage *reply = dbus_connection_send_with_reply_and_block(connection, msg, -1, &error);

    if (dbus_error_is_set(&error)) {
        dbus_error_free(&error);
        _callStatus = CallStatus::Failed;
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        return;
    }

    if (!reply) {
        _callStatus = CallStatus::Failed;
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        return;
    }

    if (dbus_message_get_reply_error(reply) != NULL) {
        _callStatus = CallStatus::Failed;
        dbus_message_unref(reply);
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        return;
    }

    if (dbus_message_get_args(reply, DBUS_TYPE_STRING, &owner, DBUS_TYPE_INVALID) == TRUE) {
        if (!owner.empty()) {
            _availabilityStatus = AvailabilityStatus::Available;
        }
    }

    dbus_message_unref(reply);
    dbus_message_unref(msg);
    dbus_connection_unref(connection);
    _callStatus = CallStatus::Success;
}",36.84,7.68,24.66,70.59,44.44
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    emit serviceUnavailable();
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    emit serviceUnavailable();
}",29.96,0.03,5.7,14.1,0.0
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    for (auto& listener : listeners) {
        listener->onInterfaceStatusChanged(_objectPath, _interfaceName, _availability);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    for (auto& listener : listeners) {
        listener->onInterfaceStatusChanged(_objectPath, _interfaceName, _availability);
    }
}",48.69,38.31,39.83,43.9,72.73
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    auto callback = [listener = _listener, subscription = _subscription](const Status &status) {
        listener.onStatusChanged(status, subscription);
    };
    proxyStatusListeners_.emplace_back(callback);
    proxy_->subscribe(callback);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    auto callback = [listener = _listener, subscription = _subscription](const Status &status) {
        listener.onStatusChanged(status, subscription);
    };
    proxyStatusListeners_.emplace_back(callback);
    proxy_->subscribe(callback);
}",45.72,28.33,39.57,27.5,87.5
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                     [&](const Listener& listener) {
                                         return listener.subscription == _subscription && listener.id == _listener.id;
                                     }),
                     listeners_.end());
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                     [&](const Listener& listener) {
                                         return listener.subscription == _subscription && listener.id == _listener.id;
                                     }));
}",45.98,25.27,25.92,54.17,78.57
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    m_connection->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    m_connection->addSignalStateHandler(_handler, _subscription);
}",71.39,42.27,43.28,100.0,100.0
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::Success) {
        std::vector<std::string> addresses;
        for (const auto& address : _availableServiceInstances) {
            addresses.push_back(address.ToString());
        }
        _call(addresses);
    } else {
        _call({});
    }
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::Success) {
        std::vector<std::string> addresses;
        for (const auto& address : _availableServiceInstances) {
            addresses.push_back(address.ToString());
        }
        _call(addresses);
    } else {
        _call({});
    }
}",56.77,31.56,43.29,68.89,83.33
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::MethodCall) {
        const std::string& interface = dbusMessage.interface();
        const std::string& member = dbusMessage.member();

        if (interface == ""org.freedesktop.DBus.Introspectable"") {
            if (member == ""Introspect"") {
                return handleIntrospect(dbusMessage);
            }
        }

        auto it = handlers_.find(interface);
        if (it != handlers_.end()) {
            auto& handlers = it->second;
            auto handler_it = handlers.find(member);
            if (handler_it != handlers.end()) {
                return handler_it->second(dbusMessage);
            }
        }
    }

    return false;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::MethodCall) {
        const std::string& interface = dbusMessage.interface();
        const std::string& member = dbusMessage.member();

        if (interface == ""org.freedesktop.DBus.Introspectable"") {
            if (member == ""Introspect"") {
                return handleIntrospect(dbusMessage);
            }
        }

        auto it = handlers_.find(interface);
        if (it != handlers_.end()) {
            auto& handlers = it->second;
            auto handler_it = handlers.find(member);
            if (handler_it != handlers.end()) {
                return handler_it->second(dbusMessage);
            }
        }
    }

    return false;
}",27.06,7.09,7.81,39.29,54.05
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerMap_.count(dbusInterfaceHandlerPath)) {
        if (dbusInterfaceHandlerMap_[dbusInterfaceHandlerPath] == dbusInterfaceHandler) {
            return true;
        } else {
            return false;
        }
    }

    dbusInterfaceHandlerMap_[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerMap_.count(dbusInterfaceHandlerPath)) {
        if (dbusInterfaceHandlerMap_[dbusInterfaceHandlerPath] == dbusInterfaceHandler) {
            return true;
        } else {
            return false;
        }
    }

    dbusInterfaceHandlerMap_[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}",27.79,16.09,20.85,36.11,38.1
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }

    registeredObjectsTable_[ifpath] = handler;
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }

    registeredObjectsTable_[ifpath] = handler;
    return true;
}",20.16,7.82,17.07,39.76,16.0
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t response[2];
    response[0] = 0x10;
    response[1] = reset_type;
    uds_send(response, 2);
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t response[2];
    response[0] = 0x10;
    response[1] = reset_type;
    send_uds_response(response, 2);
}",10.45,2.83,6.34,9.09,23.53
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 1 && data[0] == 0x01) {
        volatile int dummy = 1;
        while (dummy);
    }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 1 && data[0] == 0x01) {
        asm volatile (""reset"");
    }
}",27.18,20.17,22.29,16.28,50.0
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
    
}","void send_request_download_response() {

}",27.03,0.0,1.87,6.25,0.0
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[2];
    response[0] = 0x53;
    response[1] = block_sequence_counter;
    uds_send(response, 2);
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[2];
    response[0] = 0x53;
    response[1] = block_sequence_counter;
    uds_send(response, 2);
}",12.26,4.33,9.43,11.76,23.53
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uds_message_t msg;
    memset(&msg, 0, sizeof(uds_message_t));

    msg.service_id = UDS_SERVICE_ROUTINE_CONTROL;
    msg.session = 0;
    msg.message_id = 0x31;
    msg.length = 1;
    msg.data[0] = result;

    iso_tp_send_message(routine_id, &msg);
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uds_message_t msg;
    memset(&msg, 0, sizeof(uds_message_t));

    msg.service_id = UDS_SERVICE_ROUTINE_CONTROL;
    msg.session = 0;
    msg.message_id = 0x31;
    msg.length = 1;
    msg.data[0] = result;

    iso_tp_send_message(routine_id, &msg);
}",24.71,8.9,11.75,28.21,50.0
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
    iso_tp_send_response(ISO_TP_EXIT_POSITIVE);
}","static void send_transer_exit_positive_response() {
    iso_tp_send_response(ISO_TP_EXIT_POSITIVE);
}",28.93,0.11,6.51,9.09,0.0
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    uint8_t i;
    can_id_map_t *map = can_id_map;

    for (i = 0; i < CAN_ID_MAP_SIZE; i++) {
        if (map[i].can_id == can_id) {
            return map[i].index;
        }
    }

    return CAN_ID_NOT_FOUND;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    uint8_t i;
    can_id_map_t *map = can_id_map;

    for (i = 0; i < CAN_ID_MAP_SIZE; i++) {
        if (map[i].can_id == can_id) {
            return map[i].index;
        }
    }

    return CAN_ID_NOT_FOUND;
}",48.73,36.4,44.23,42.86,71.43
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;
	int i;

	if (filter_id < 0) {
		for (i = 0; i < ARRAY_SIZE(data->rx_filters); i++) {
			data->rx_filters[i].callback = NULL;
		}
	} else {
		if (filter_id < ARRAY_SIZE(data->rx_filters)) {
			data->rx_filters[filter_id].callback = NULL;
		}
	}
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;
	int i;

	if (filter_id < 0) {
		for (i = 0; i < ARRAY_SIZE(data->rx_filters); i++) {
			data->rx_filters[i].callback = NULL;
		}
	} else {
		if (filter_id >= 0 && filter_id < ARRAY_SIZE(data->rx_filters)) {
			data->rx_filters[filter_id].callback = NULL;
		}
	}
}",44.32,39.25,42.58,47.62,47.83
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct lin_context *ctx = (struct lin_context *)user_data;
    struct list_head *list = &ctx->tx_queue;
    struct lin_frame *tx_frame = container_of(frame, struct lin_frame, list);

    list_del(&tx_frame->list);

    tx_frame->completion_callback(tx_frame->completion_data);

    return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct lin_context *ctx = (struct lin_context *)user_data;
    struct list_head *list = &ctx->tx_queue;
    struct lin_frame *tx_frame = container_of(frame, struct lin_frame, list);

    list_del(&tx_frame->list);

    tx_frame->completion_callback(tx_frame->completion_data);

    return true;
}",33.15,16.63,19.59,41.38,55.0
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    struct can_frame can_frame;
    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    memcpy(can_frame.data, frame->data, frame->dlc);

    if (user_data != NULL) {
        ((void (*)(struct can_frame *))user_data)(&can_frame);
    }
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    struct can_frame can_frame;
    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    memcpy(can_frame.data, frame->data, frame->dlc);

    if (user_data != NULL) {
        ((void (*)(struct can_frame *))user_data)(&can_frame);
    }
}",23.19,6.86,12.97,37.93,35.0
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
    struct hv_shield_data *data = dev->data;

    data->reg = regulator_get(dev, ""hv_shield_reg"");
    if (!data->reg) {
        return -ENODEV;
    }

    regulator_enable(data->reg);

    data->output_enable = regulator_get(dev, ""hv_shield_output"");
    if (!data->output_enable) {
        regulator_put(data->reg);
        return -ENODEV;
    }

    regulator_enable(data->output_enable);

    return 0;
}","static int hv_shield_init(const struct device* dev) {
    struct hv_shield_data *data = dev->data;

    data->reg = regulator_get(dev, ""hv_shield_reg"");
    if (!data->reg) {
        return -ENODEV;
    }

    regulator_enable(data->reg);

    data->output_enable = regulator_get(dev, ""hv_shield_output"");
    if (!data->output_enable) {
        regulator_put(data->reg);
        return -ENODEV;
    }

    regulator_enable(data->output_enable);

    return 0;
}",26.72,8.57,11.91,34.78,51.61
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
    return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
    return 0;
}",41.04,10.91,25.98,27.27,0.0
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t reg_value = 0;
    uint8_t nibble = (enable) ? 0x0F : 0x00;
    uint8_t remapped_index = ((index & 0x0F) << 4) | ((index & 0xF0) >> 4);

    reg_value = (uint8_t)(nibble & (0xFF << (remapped_index * 4)));

    return 0;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t reg_value = 0;
    uint8_t nibble = (enable) ? 0x0F : 0x00;
    uint8_t remapped_index = ((index & 0x0F) << 4) | ((index & 0xF0) >> 4);

    reg_value = (uint8_t)(nibble & (0xFF << (remapped_index * 4)));
    return 0;
}",27.85,18.32,18.93,28.3,45.83
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_frame forwarded_frame = *frame;
    struct can_bus *target_bus = (struct can_bus *)user_data;

    if (target_bus) {
        can_bus_send_frame(target_bus, &forwarded_frame);
    }
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_frame forwarded_frame = *frame;
    struct can_bus *target_bus = (struct can_bus *)user_data;

    if (target_bus) {
        can_bus_send_frame(target_bus, &forwarded_frame);
    }
}",42.56,24.49,28.23,42.5,75.0
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    if (entries == NULL || entry_count <= 0) {
        return -1;
    }

    for (int i = 0; i < entry_count; i++) {
        if (entries[i].interface_id < 0 || entries[i].can_id < 0) {
            return -1;
        }
    }

    return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    if (entries == NULL || entry_count <= 0) {
        return -1;
    }

    for (int i = 0; i < entry_count; i++) {
        if (entries[i].interface_id < 0 || entries[i].can_id < 0) {
            return -1;
        }
    }

    return 0;
}",41.01,36.84,38.53,41.3,47.37
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
    return 0;
}","static int can_router_sysinit() {
    return 0;
}",31.9,1.93,11.87,13.79,0.0
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret = 0;
	gpio_port_value_t current_value = 0;
	int i;

	for (i = 0; i < 32; i++) {
		if ((mask >> i) & 1) {
			if ((value >> i) & 1) {
				current_value |= (1 << i);
			}
		}
	}

	ret = gpio_port_set_drive_state(port, GPIO_DRIVE_STATE_HIGH);
	if (ret < 0) {
		return ret;
	}

	ret = gpio_port_write(port, current_value);
	if (ret < 0) {
		return ret;
	}

	return ret;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret = 0;

	ret = gpio_port_set_drive_state(port, GPIO_DRIVE_STATE_HIGH);
	if (ret < 0) {
		return ret;
	}

	ret = gpio_port_write_masked(port, mask, value);
	if (ret < 0) {
		return ret;
	}

	return ret;
}",34.75,26.32,36.01,30.51,46.15
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (!dev || !free_slots)
        return -EINVAL;

    if (dev->id == AL_DEVICE_ID_SOUND) {
        *free_slots = al_sound_cb_slots;
        return 0;
    } else if (dev->id == AL_DEVICE_ID_VIDEO) {
        *free_slots = al_video_cb_slots;
        return 0;
    } else {
        *free_slots = 0;
        return -ENODEV;
    }
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (!dev || !free_slots)
        return -EINVAL;

    if (dev->id == AL_DEVICE_ID_SOUND) {
        *free_slots = al_sound_cb_slots;
        return 0;
    } else if (dev->id == AL_DEVICE_ID_VIDEO) {
        *free_slots = al_video_cb_slots;
        return 0;
    } else {
        *free_slots = 0;
        return -ENODEV;
    }
}",46.88,23.06,37.79,56.67,70.0
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;
    if (!lin_data) {
        return -EINVAL;
    }

    if (frame_id >= AL_MAX_FRAME_ID) {
        return -EINVAL;
    }

    if (callback == NULL) {
        return -EINVAL;
    }

    lin_data->incoming_callbacks[frame_id] = callback;
    lin_data->incoming_frame_sizes[frame_id] = frame_size;
    lin_data->incoming_user_data[frame_id] = user_data;

    return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;
    if (!lin_data) {
        return -EINVAL;
    }

    if (frame_id >= AL_MAX_FRAME_ID) {
        return -EINVAL;
    }

    if (callback == NULL) {
        return -EINVAL;
    }

    lin_data->incoming_callbacks[frame_id] = callback;
    lin_data->incoming_frame_sizes[frame_id] = frame_size;
    lin_data->incoming_user_data[frame_id] = user_data;

    return 0;
}",42.03,34.3,37.66,48.53,47.62
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;
    if (!lin_data) {
        return -EINVAL;
    }

    lin_data->outgoing_callbacks[frame_id] = callback;
    lin_data->outgoing_frame_sizes[frame_id] = frame_size;
    lin_data->outgoing_user_data[frame_id] = user_data;

    return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;
    if (!lin_data) {
        return -EINVAL;
    }

    if (frame_id >= ARRAY_SIZE(lin_data->outgoing_callbacks)) {
        return -EINVAL;
    }

    lin_data->outgoing_callbacks[frame_id] = callback;
    lin_data->outgoing_frame_sizes[frame_id] = frame_size;
    lin_data->outgoing_user_data[frame_id] = user_data;

    return 0;
}",35.47,26.13,34.46,45.59,35.71
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(void) {
    lin_scheduler->active_table = 0;
    lin_scheduler->position = 0;
    return 0;
}","int abstract_lin_scheduler_set_active_table(void) {
    lin_scheduler->active_table = 0;
    lin_scheduler->position = 0;
    return 0;
}",8.62,0.9,3.24,23.68,6.67
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->running = 0;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->running = 0;
}",19.76,8.54,13.86,40.0,16.67

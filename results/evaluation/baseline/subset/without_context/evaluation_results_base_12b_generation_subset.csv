id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype not in cls.datatypes:
        raise ValueError(f""Unsupported datatype: '{datatype}'"")
    validation_function = cls.datatypes[datatype]
    return validation_function(value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype not in cls.datatypes:
        raise ValueError(f""Unsupported datatype: '{datatype}'"")
    validation_function = cls.datatypes[datatype]
    return validation_function(value)",46.595948956881614,29.534359244592505,38.387898121395494,38.46153846153847,80.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any, Union, List

def is_xintx(value: Any, signed: bool, bits: int) -> bool:
    if isinstance(value, list):
        return all(is_xintx(item, signed, bits) for item in value)
    if not isinstance(value, int):
        return False
    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1
    return lower_bound <= value <= upper_bound","from typing import Any, Union, List

def is_xintx(value: Any, signed: bool, bits: int) -> bool:
    if isinstance(value, list):
        return all(is_xintx(item, signed, bits) for item in value)
    if not isinstance(value, int):
        return False
    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1
    return lower_bound <= value <= upper_bound",36.722581822236194,20.055074222989592,20.571846802548933,60.317460317460316,45.94594594594595
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    datatypes = {}
    if fqn:
        for datatype in Datatypes:
            if datatype.namespace == fqn.split('.')[0]:
                datatypes[datatype.short_name] = datatype.fqn
    else:
        for datatype in Datatypes:
            datatypes[datatype.short_name] = datatype.fqn
    return datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    datatypes = {}
    if fqn:
        for datatype in Datatypes:
            if datatype.namespace == fqn.split('.')[0]:
                datatypes[datatype.short_name] = datatype.fqn
    else:
        for datatype in Datatypes:
            datatypes[datatype.short_name] = datatype.fqn
    return datatypes",39.052770553867376,27.862307775531836,28.464515180678408,40.625,59.25925925925925
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    mTitleView = root.findViewById(R.id.card_title);
    mIconView = root.findViewById(R.id.card_icon);
    return root;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    mTitleView = root.findViewById(R.id.card_title);
    mIconView = root.findViewById(R.id.card_icon);
    return root;
}",68.22214014568489,46.36073105606444,49.591802590648214,81.48148148148148,95.45454545454545
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.icon);
        buttonView.setOnClickListener(buttonContent.listener);
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.icon);
        buttonView.setOnClickListener(buttonContent.listener);
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}",78.818330173457,81.37489370974956,82.28552375827198,51.61290322580645,100.0
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    Runnable runnable = () -> {
        mHeaderView.getRootView().setVisibility(View.VISIBLE);
        mHeaderView.setTitle(header.getTitle());
        mHeaderView.setIcon(header.getIcon());
    };
    UiThreadUtil.runOnMainThread(runnable);
}","public void updateHeaderView(CardHeader header) {
    runOnUiThread(() -> {
        mHeaderView.getRootView().setVisibility(View.VISIBLE);
        mHeaderView.setTitle(header.getTitle());
        mHeaderView.setIcon(header.getIcon());
    });
}",55.61237843236996,25.45984531673679,36.27538269845734,60.71428571428571,100.0
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (isActive()) {
        _listener.callback(AVAILABLE, _subscription);
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (isActive()) {
        _listener.callback(AVAILABLE, _subscription);
    }
}",64.82816292811209,50.31747626530137,61.16908849062524,47.82608695652174,100.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(join_mutex);
    if (conn_active(conn) && join_threads.find(t.id()) == join_threads.end()) {
        join_threads[t.id()] = conn;
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(join_mutex);
    if (conn_active(conn) && join_threads.find(t.id()) == join_threads.end()) {
        join_threads[t.id()] = conn;
    }
}",28.415452068375107,16.099918345222285,20.238786773972944,42.028985507246375,35.294117647058826
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        static std::mutex mutex;
        std::lock_guard<std::mutex> lock(mutex);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>();
        }
    }
    return instance;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        static std::mutex mutex;
        std::lock_guard<std::mutex> lock(mutex);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>();
        }
    }
    return instance;
}",48.45449104474903,15.553986407412197,21.53320854081468,69.23076923076923,87.5
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",74.25924108023764,77.4983858032256,78.89686728777843,81.81818181818183,58.82352941176471
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(data[0], UDS_NRC_INCORRECT_LENGTH);
    return;
  }

  enum UDS_ResetSubFunction reset_type = data[1];

  if (reset_type != UDS_RESET_HARD) {
    send_negative_response(data[0], UDS_NRC_UNSUPPORTED_REQUEST);
    return;
  }

  send_positive_response(data[0]);
  system_reboot();
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(data[0], UDS_NRC_INCORRECT_LENGTH);
    return;
  }

  enum UDS_ResetSubFunction reset_type = data[1];

  if (reset_type != UDS_RESET_HARD) {
    send_negative_response(data[0], UDS_NRC_UNSUPPORTED_REQUEST);
    return;
  }

  send_positive_response(data[0]);
  system_reboot();
}",44.06090409290486,40.37182746174576,41.29814549902099,27.906976744186046,66.66666666666666
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD_RESPONSE, 0x00, 0xD2, 0x00};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD_RESPONSE, 0x00, 0xD2, 0x00};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",61.13832575651259,52.074360452844424,57.895609239872606,81.25,53.333333333333336

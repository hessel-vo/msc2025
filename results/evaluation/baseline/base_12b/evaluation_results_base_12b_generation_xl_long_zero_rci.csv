id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    else:
        raise ValueError(f""Unsupported datatype: {datatype}"")","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    else:
        raise ValueError(f""Unsupported datatype: {datatype}"")",44.35845612489796,11.588952814536926,39.69102553120874,46.15384615384615,80.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int) -> bool:
    if isinstance(value, int):
        if signed:
            min_val = -(2**(bits - 1))
            max_val = 2**(bits - 1) - 1
            return min_val <= value <= max_val
        else:
            max_val = 2**bits - 1
            return 0 <= value <= max_val
    elif isinstance(value, list):
        for item in value:
            if not is_xintx(item, signed, bits):
                return False
        return True
    else:
        return False","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int) -> bool:
    if isinstance(value, int):
        if signed:
            min_val = -(2**(bits - 1))
            max_val = 2**(bits - 1) - 1
            return min_val <= value <= max_val
        else:
            max_val = 2**bits - 1
            return 0 <= value <= max_val
    elif isinstance(value, list):
        for item in value:
            if not is_xintx(item, signed, bits):
                return False
        return True
    else:
        return False",39.007143331768376,20.09967999427054,20.913878317787955,55.55555555555556,59.45945945945946
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.type_definitions:
        if type_def[0] == datatype:
            return type_def
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.type_definitions:
        if type_def[0] == datatype:
            return type_def
    return None",70.34186997887033,52.624397026344624,54.669008815062604,74.07407407407408,100.0
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn is None:
        return {}
    
    namespaced_datatypes = {}
    
    if fqn == ""java.lang.String"":
        namespaced_datatypes[""string""] = ""java.lang.String""
    elif fqn == ""java.lang.Integer"":
        namespaced_datatypes[""integer""] = ""java.lang.Integer""
    elif fqn == ""java.lang.Boolean"":
        namespaced_datatypes[""boolean""] = ""java.lang.Boolean""
    elif fqn == ""java.lang.Double"":
        namespaced_datatypes[""double""] = ""java.lang.Double""
    elif fqn == ""java.lang.Float"":
        namespaced_datatypes[""float""] = ""java.lang.Float""
    elif fqn == ""java.lang.Long"":
        namespaced_datatypes[""long""] = ""java.lang.Long""
    elif fqn == ""java.lang.Short"":
        namespaced_datatypes[""short""] = ""java.lang.Short""
    elif fqn == ""java.lang.Byte"":
        namespaced_datatypes[""byte""] = ""java.lang.Byte""
    elif fqn == ""java.lang.Character"":
        namespaced_datatypes[""character""] = ""java.lang.Character""
    
    return namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn is None:
        return {}
    
    namespaced_datatypes = {}
    
    if fqn == ""java.lang.String"":
        namespaced_datatypes[""string""] = ""java.lang.String""
    elif fqn == ""java.lang.Integer"":
        namespaced_datatypes[""integer""] = ""java.lang.Integer""
    elif fqn == ""java.lang.Boolean"":
        namespaced_datatypes[""boolean""] = ""java.lang.Boolean""
    elif fqn == ""java.lang.Double"":
        namespaced_datatypes[""double""] = ""java.lang.Double""
    elif fqn == ""java.lang.Float"":
        namespaced_datatypes[""float""] = ""java.lang.Float""
    elif fqn == ""java.lang.Long"":
        namespaced_datatypes[""long""] = ""java.lang.Long""
    elif fqn == ""java.lang.Short"":
        namespaced_datatypes[""short""] = ""java.lang.Short""
    elif fqn == ""java.lang.Byte"":
        namespaced_datatypes[""byte""] = ""java.lang.Byte""
    elif fqn == ""java.lang.Character"":
        namespaced_datatypes[""character""] = ""java.lang.Character""
    
    return namespaced_datatypes",27.77650505776966,13.537313903864282,30.844169290177348,29.6875,37.03703703703704
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","import typing

class ApiGearType:
    def __init__(self, name: str, is_array: bool = False):
        self.name = name
        self.is_array = is_array

def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    t = t.strip()
    if t == ""string"":
        return ApiGearType(""string"")
    elif t == ""integer"":
        return ApiGearType(""integer"")
    elif t == ""number"":
        return ApiGearType(""number"")
    elif t == ""boolean"":
        return ApiGearType(""boolean"")
    elif t == ""date"":
        return ApiGearType(""date"")
    elif t == ""datetime"":
        return ApiGearType(""datetime"")
    elif t.endswith(""[]""):
        base_type = t[:-2]
        array_type = get_apigear_datatype(base_type)
        if array_type:
            return ApiGearType(array_type.name, is_array=True)
        else:
            return None
    else:
        if ""."" in t:
            t = t.replace(""."", ""_"")
        return ApiGearType(t)","import typing

class ApiGearType:
    def __init__(self, name: str, is_array: bool = False):
        self.name = name
        self.is_array = is_array

def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    t = t.strip()
    if t == ""string"":
        return ApiGearType(""string"")
    elif t == ""integer"":
        return ApiGearType(""integer"")
    elif t == ""number"":
        return ApiGearType(""number"")
    elif t == ""boolean"":
        return ApiGearType(""boolean"")
    elif t == ""date"":
        return ApiGearType(""date"")
    elif t == ""datetime"":
        return ApiGearType(""datetime"")
    elif t.endswith(""[]""):
        base_type = t[:-2]
        array_type = get_apigear_datatype(base_type)
        if array_type:
            return ApiGearType(array_type.name, is_array=True)
        else:
            return None
    else:
        if ""."" in t:
            t = t.replace(""."", ""_"")
        return ApiGearType(t)",24.186681434885003,13.220464900479772,14.586756994580336,34.51327433628318,34.42622950819672
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    api_gear_type = convert_datatype(datatype)
    if api_gear_type:
        property = ApiGearProperty(
            name=node.name,
            datatype=api_gear_type,
            description=node.description,
        )
        return property
    else:
        log.warning(f""Unsupported datatype: {datatype}"")
        return None","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    api_gear_type = convert_datatype(datatype)
    if api_gear_type:
        property = ApiGearProperty(
            name=node.name,
            datatype=api_gear_type,
            description=node.description,
        )
        return property
    else:
        log.warning(f""Unsupported datatype: {datatype}"")
        return None",41.513618529177876,22.6512084855791,25.069932297799063,53.333333333333336,65.0
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

class VSpec:
    def __init__(self, data=None):
        self.data = data or {}

    def merge(self, other):
        self.data.update(other.data)
        return self

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspecs = []
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                spec_data = {}
                for line in f:
                    if '=' in line:
                        key, value = line.strip().split('=', 1)
                        spec_data[key.strip()] = value.strip()
                vspecs.append(VSpec(spec_data))
        except FileNotFoundError:
            pass

    if not vspecs:
        raise Exception(""No VSpec files loaded successfully."")

    merged_vspec = vspecs[0]
    for vspec in vspecs[1:]:
        merged_vspec.merge(vspec)

    return merged_vspec","from pathlib import Path

class VSpec:
    def __init__(self, data=None):
        self.data = data or {}

    def merge(self, other):
        self.data.update(other.data)
        return self

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspecs = []
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                spec_data = {}
                for line in f:
                    if '=' in line:
                        key, value = line.strip().split('=', 1)
                        spec_data[key.strip()] = value.strip()
                vspecs.append(VSpec(spec_data))
        except FileNotFoundError:
            pass

    if not vspecs:
        raise Exception(""No VSpec files loaded successfully."")

    merged_vspec = vspecs[0]
    for vspec in vspecs[1:]:
        merged_vspec.merge(vspec)

    return merged_vspec",33.22196222523745,19.125448727378334,24.12415727951461,47.77777777777778,41.86046511627907
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","from typing import Any

def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if key in base and isinstance(base[key], dict) and isinstance(value, dict):
            deep_update(base[key], value)
        else:
            base[key] = value","from typing import Any

def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if key in base and isinstance(base[key], dict) and isinstance(value, dict):
            deep_update(base[key], value)
        else:
            base[key] = value",77.38377209757205,72.3104031756316,72.64135188132323,83.33333333333334,81.25
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if isinstance(v, str) and len(v) == 10 and v.startswith(""0x"") and all(c in '0123456789abcdefABCDEF' for c in v[2:]):
            return v
    return None","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if isinstance(v, str) and len(v) == 10 and v.startswith(""0x"") and all(c in '0123456789abcdefABCDEF' for c in v[2:]):
            return v
    return None",51.53136287460034,37.420316460821255,46.705135037580135,52.0,70.0
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","from typing import Any

class VSSRaw:
    def __init__(self, data: dict[str, Any]):
        self.data = data

    def resolve(self) -> 'VSSRaw':
        try:
            return self
        except Exception:
            return self

def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    resolved_vss_raw = vss_raw.resolve()
    return resolved_vss_raw","from typing import Any

class VSSRaw:
    def __init__(self, data: dict[str, Any]):
        self.data = data

    def resolve(self) -> 'VSSRaw':
        try:
            return self
        except Exception:
            return self

def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    resolved_vss_raw = vss_raw.resolve()
    return resolved_vss_raw",44.625888225724175,22.842689227515756,34.82753034204759,47.5,73.33333333333333
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [""int"", ""float"", ""str"", ""bool""]
    for value in values:
        assert value in valid_datatypes
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [""int"", ""float"", ""str"", ""bool""]
    for value in values:
        assert value in valid_datatypes, f""Invalid datatype: {value}""
    return values",55.77583023215041,46.94222382938492,55.32776376588341,54.166666666666664,66.66666666666666
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    rendered = """"
    rendered += tree.name
    if attributes:
        rendered += "":""
        for attribute in attributes:
            if hasattr(tree, attribute):
                try:
                    rendered += "" "" + str(getattr(tree, attribute))
                except Exception:
                    rendered += "" <error>""
    if tree.children:
        rendered += ""\n""
        for child in tree.children:
            rendered += ""  "" + get_rendered_tree(child, attributes) + ""\n""
    return rendered","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    rendered = """"
    rendered += tree.name
    if attributes:
        rendered += "":""
        for attribute in attributes:
            if hasattr(tree, attribute):
                try:
                    rendered += "" "" + str(getattr(tree, attribute))
                except Exception:
                    rendered += "" <error>""
    if tree.children:
        rendered += ""\n""
        for child in tree.children:
            rendered += ""  "" + get_rendered_tree(child, attributes) + ""\n""
    return rendered",26.626960220451345,14.880041649894737,19.84642271369203,32.30769230769231,39.473684210526315
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch:
        raise ValueError(""Starting node is not a branch"")
    if not self.parent:
        if depth == 0:
            return self, depth
        else:
            raise ValueError(""No root found"")
    else:
        result = self.parent.get_instance_root(depth + 1)
        return result","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch:
        raise ValueError(""Starting node is not a branch"")
    if not self.parent:
        return self, depth
    else:
        return self.parent.get_instance_root(depth + 1)",52.86962334206719,47.42472923044906,48.395869400977595,52.5,63.1578947368421
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    if not self.children:
        return 0
    for child in self.children:
        if isinstance(child, VSSDataBranch) and child.is_instance:
            return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    if not self.children:
        return 0
    for child in self.children:
        if isinstance(child, VSSDataBranch) and child.is_instance:
            return 1 + child.count_instance_children_depth()
    return 0",60.53030384282806,44.90332324149126,59.329693372057015,52.17391304347826,85.71428571428571
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(f""{name}_""):
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + ""_""):
            children_ids.append(node_id)
    return children_ids",64.22545578221317,40.64458257395656,42.92390722156277,73.33333333333333,100.0
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default",54.28198999477352,44.05262339943716,43.07533657965687,50.0,80.0
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""complex"":
        fd.write(f""import {tree.name}pb3\n"")
    if tree.type == ""branch"":
        fd.write(f""{tree.name} = {tree.name}pb3.{tree.name}()"")
        if add_optional:
            fd.write(f""(optional=True)"")
        fd.write(""\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""complex"":
        fd.write(f""import {tree.name}pb3\n"")
    if tree.type == ""branch"":
        fd.write(f""{tree.name} = {tree.name}pb3.{tree.name}()"")
        if add_optional:
            fd.write(f""(optional=True)"")
        fd.write(""\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)",22.89992621152882,11.245180350804274,15.482435911882215,27.835051546391753,37.03703703703704
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    for branch in root.branches:
        if branch.is_terminal:
            if branch.name not in instances:
                instances[branch.name] = []
            instances[branch.name].append(branch.relative_name)
        else:
            for sub_branch in branch.branches:
                if sub_branch.is_terminal:
                    if branch.name not in instances:
                        instances[branch.name] = []
                    instances[branch.name].append(sub_branch.relative_name)
    return instances","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    def traverse(node, current_path):
        for branch in node.branches:
            new_path = f""{current_path}/{branch.name}"" if current_path else branch.name
            if branch.is_terminal:
                if new_path not in instances:
                    instances[new_path] = []
                instances[new_path].append(branch.relative_name)
            else:
                traverse(branch, new_path)

    traverse(root, """")
    return instances",26.621014937617126,11.06687766089236,12.588188423144056,37.93103448275862,44.89795918367347
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)",53.95251422009305,34.1077254951379,31.7023313852343,50.0,100.0
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and not node.is_instance",38.92121923202306,27.429553970075617,26.150059800121895,42.10526315789473,60.0
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and node.data.is_instance","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and getattr(node.data, 'is_instance', False)",50.05493266192946,29.190450436614647,26.584835766658777,44.44444444444444,100.0
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    hash = 0x811C9DC5
    for byte in identifier:
        hash = (hash * FNV_PRIME) ^ byte
    return hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    hash = 0x811C9DC5
    for byte in identifier:
        hash ^= byte
        hash *= FNV_PRIME
    return hash",34.063594795369966,28.549269471221645,30.33668865762665,47.368421052631575,30.0
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.card_fragment, container, false);
        TextView cardTitle = root.findViewById(R.id.card_title);
        ImageView cardIcon = root.findViewById(R.id.card_icon);

        cardTitle.setText(""Card Title"");
        cardIcon.setImageResource(R.drawable.icon);

        return root;
    }","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View root = inflater.inflate(R.layout.card_fragment, container, false);
        TextView cardTitle = root.findViewById(R.id.card_title);
        ImageView cardIcon = root.findViewById(R.id.card_icon);

        return root;
    }",61.29750642185646,42.56792006647458,49.591802590648214,66.66666666666666,86.36363636363636
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent == null) {
            buttonView.setVisibility(View.GONE);
            return;
        }

        buttonView.setImageResource(buttonContent.getIcon());
        buttonView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                buttonContent.getActionListener().onClick(v);
            }
        });
        buttonView.setVisibility(View.VISIBLE);
    }","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent == null) {
            buttonView.setVisibility(View.GONE);
            return;
        }

        buttonView.setImageResource(buttonContent.getIcon());
        buttonView.setOnClickListener(v -> buttonContent.getActionListener().onClick(v));
        buttonView.setVisibility(View.VISIBLE);
    }",68.65747115092363,46.86670913916292,47.118014174209016,80.64516129032258,100.0
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
        ViewStub viewStub = findViewById(R.layout.descriptive_text_only);
        View inflatedView = viewStub.inflate();
        TextView title = inflatedView.findViewById(R.id.title);
        TextView subtitle = inflatedView.findViewById(R.id.subtitle);
        ImageView image = inflatedView.findViewById(R.id.image);
        viewStub.setVisibility(View.GONE);
        return inflatedView;
    }","protected final View getDescriptiveTextOnlyLayoutView() {
        ViewStub viewStub = findViewById(R.layout.descriptive_text_only);
        View inflatedView = viewStub.inflate();
        TextView title = inflatedView.findViewById(R.id.title);
        TextView subtitle = inflatedView.findViewById(R.id.subtitle);
        ImageView image = inflatedView.findViewById(R.id.image);
        viewStub.setVisibility(View.GONE);
        return inflatedView;
    }",31.33858447084475,12.274038807868367,13.481368594227208,61.36363636363637,38.23529411764706
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    runOnUiThread(() -> {
        headerView.getRootView().setVisibility(View.VISIBLE);
        cardTitleTextView.setText(header.getTitle());
        cardIconImageView.setImageResource(header.getIcon());
    });
}","public void updateHeaderView(CardHeader header) {
        runOnUiThread(() -> {
            headerView.getRootView().setVisibility(View.VISIBLE);
            cardTitleTextView.setText(header.getTitle());
            cardIconImageView.setImageResource(header.getIcon());
        });
    }",59.08246442178471,37.06866381788037,38.54690815497274,60.71428571428571,100.0
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
        if (mTextBlockLayoutView == null) {
            mTextBlockLayoutView = mViewStub.inflate();
            mTextViews = new TextView[mTextViewIds.length];
            for (int i = 0; i < mTextViewIds.length; i++) {
                mTextViews[i] = findViewById(mTextViewIds[i]);
            }
        }
        return mTextBlockLayoutView;
    }","private View getTextBlockLayoutView() {
        if (mTextBlockLayoutView == null) {
            mTextBlockLayoutView = mViewStub.inflate();
            mTextViews = new TextView[mTextViewIds.length];
            for (int i = 0; i < mTextViewIds.length; i++) {
                mTextViews[i] = findViewById(mTextViewIds[i]);
            }
        }
        return mTextBlockLayoutView;
    }",37.043428916916874,33.25235764368613,45.60317620579953,37.5,31.818181818181817
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","import android.content.ComponentName;
import android.content.pm.PackageManager;

import org.jetbrains.annotations.NotNull;

static ComponentName getMediaSource(@NotNull PackageManager packageManager, @NotNull String packageName) {
        PackageManager pm = packageManager;
        String pkgName = packageName;
        ComponentName componentName = null;
        try {
            int flags = PackageManager.GET_SERVICES;
            java.util.List<android.content.pm.ServiceInfo> services = pm.getServices(flags);
            if (services != null) {
                for (android.content.pm.ServiceInfo service : services) {
                    if (service.packageName.equals(pkgName) && android.media.MediaBrowserService.class.getName().equals(service.serviceName)) {
                        componentName = new ComponentName(pkgName, service.serviceName);
                        break;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return componentName;
    }","import android.content.ComponentName;
import android.content.pm.PackageManager;

import org.jetbrains.annotations.NotNull;

static ComponentName getMediaSource(@NotNull PackageManager packageManager, @NotNull String packageName) {
        PackageManager pm = packageManager;
        String pkgName = packageName;
        ComponentName componentName = null;
        try {
            int flags = PackageManager.GET_SERVICES;
            java.util.List<android.content.pm.ServiceInfo> services = pm.getServices(flags);
            if (services != null) {
                for (android.content.pm.ServiceInfo service : services) {
                    if (service.packageName.equals(pkgName) && android.media.MediaBrowserService.class.getName().equals(service.serviceName)) {
                        componentName = new ComponentName(pkgName, service.serviceName);
                        break;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return componentName;
    }",28.163208108122028,2.6727487942959662,4.387091724445521,37.735849056603776,67.85714285714286
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
                (componentAppType & AppTypes.MEDIA) != 0 &&
                customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        return (componentAppType & AppTypes.LAUNCHABLE) != 0 || (componentAppType & AppTypes.MEDIA) != 0;
    }","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
                (componentAppType & AppTypes.MEDIA) != 0 &&
                customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        return (componentAppType & AppTypes.LAUNCHABLE) != 0 || (componentAppType & AppTypes.MEDIA) != 0;
    }",64.18585583392684,47.78334465252582,48.64261836572118,60.317460317460316,100.0
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(context, componentName, true);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    }","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        try {
            carMediaManager.selectMediaSource(context, componentName, true);
            if (context instanceof Activity) {
                ((Activity) context).finish();
            }
        } catch (CarNotConnectedException e) {
            Log.e(""CarMedia"", ""Car service unavailable"", e);
        }
    }",74.62960449967306,70.07705660453347,73.60265171673943,54.83870967741935,100.0
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        if (carPackageManager == null) {
            Log.e(""DistractionOptimizedActivityChecker"", ""CarPackageManager is null"");
            return false;
        }
        try {
            return carPackageManager.isDistractionOptimizedActivity(packageName, activityName);
        } catch (CarNotConnectedException e) {
            Log.e(""DistractionOptimizedActivityChecker"", ""CarNotConnectedException: "" + e.getMessage());
            return false;
        }
    }","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        if (carPackageManager == null) {
            Log.e(""DistractionOptimizedActivityChecker"", ""CarPackageManager is null"");
            return false;
        }
        try {
            return carPackageManager.isDistractionOptimizedActivity(packageName, activityName);
        } catch (CarNotConnectedException e) {
            Log.e(""DistractionOptimizedActivityChecker"", ""CarNotConnectedException: "" + e.getMessage());
            return false;
        }
    }",39.950690863992364,26.443751524582247,27.693987300845325,41.37931034482759,64.28571428571429
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent mapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=dummy""));
        ResolveInfo resolveInfo = packageManager.resolveActivity(mapsIntent, PackageManager.MATCH_DEFAULT_ONLY);
        if (resolveInfo != null) {
            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=dummy""));
            intent.setPackage(resolveInfo.activityInfo.packageName);
            return intent;
        } else {
            return Intent.createChooser(mapsIntent, ""Select map application"");
        }
    }","private Intent getMapsIntent() {
        Intent mapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=dummy""));
        ResolveInfo resolveInfo = packageManager.resolveActivity(mapsIntent, PackageManager.MATCH_DEFAULT_ONLY);
        if (resolveInfo != null) {
            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=dummy""));
            intent.setPackage(resolveInfo.activityInfo.packageName);
            return intent;
        } else {
            Intent genericMapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=dummy""));
            return Intent.createChooser(genericMapsIntent, ""Select map application"");
        }
    }",15.4224907443697,7.641478472830049,9.026839483003728,21.21212121212121,23.809523809523807
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    Set<HomeCardModule> cardModules = new HashSet<>();
    for (String className : cardModuleConfigurations) {
        try {
            Class<?> clazz = Class.forName(className);
            HomeCardModule module = (HomeCardModule) clazz.getDeclaredConstructor().newInstance();
            cardModules.add(module);
        } catch (Exception e) {
            Log.e(TAG, ""Failed to instantiate card module: "" + className, e);
        }
    }

    FragmentTransaction transaction = fragmentManager.beginTransaction();
    for (HomeCardModule module : cardModules) {
        transaction.add(R.layout.home_card_container, module);
    }
    transaction.commit();
}","private void initializeCards() {
    Set<HomeCardModule> cardModules = new HashSet<>();
    for (String className : cardModuleConfigurations) {
        try {
            Class<?> clazz = Class.forName(className);
            HomeCardModule module = (HomeCardModule) clazz.newInstance();
            cardModules.add(module);
        } catch (Exception e) {
            Log.e(TAG, ""Failed to instantiate card module: "" + className, e);
        }
    }

    FragmentTransaction transaction = fragmentManager.beginTransaction();
    for (HomeCardModule module : cardModules) {
        transaction.add(R.layout.home_card_container, module);
    }
    transaction.commit();
}",24.68093267370347,8.873166604336468,10.99342123333456,42.857142857142854,36.0
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
            if (taskAppearedInfo.isMultiWindow()) {
                ActivityTaskManager.removeTask(taskAppearedInfo.taskId());
                Slog.w(""ActivityTaskManager"", ""Removing dangling task: "" + taskAppearedInfo.taskId());
            }
        }
    }","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
            if (taskAppearedInfo.isMultiWindow()) {
                ActivityTaskManager.removeTask(taskAppearedInfo.taskId());
                Slog.w(""ActivityTaskManager"", ""Removing dangling task: "" + taskAppearedInfo.taskId());
            }
        }
    }",30.515725512770324,26.443806118509777,30.46758078105638,33.33333333333333,31.818181818181817
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
        Intent intent = getIntent();
        if (intent != null) {
            String mode = intent.getStringExtra(""mode"");
            if (mode != null) {
                int titleResource = getResources().getIdentifier(mode + ""_title"", ""string"", getPackageName());
                if (titleResource != 0) {
                    setTitle(getResources().getString(titleResource));
                    if (carUiToolbar != null) {
                        carUiToolbar.setTitle(getResources().getString(titleResource));
                    }
                }
            }
        }
    }","private void updateMode() {
        Intent intent = getIntent();
        if (intent != null) {
            String mode = intent.getStringExtra(""mode"");
            if (mode != null) {
                int titleResource = getResources().getIdentifier(mode + ""_title"", ""string"", getPackageName());
                if (titleResource != 0) {
                    setTitle(getResources().getString(titleResource));
                    if (carUiToolbar != null) {
                        carUiToolbar.setTitle(getResources().getString(titleResource));
                    }
                }
            }
        }
    }",22.196558649209987,5.385120245817583,31.02016197006999,19.047619047619047,33.33333333333333
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    Chronometer chronometer = findViewById(R.id.chronometer);
    View separator = findViewById(R.id.separator);
    chronometer.setChronometer(chronometer);
    return chronometer;
}","private Chronometer getChronometer() {
    Chronometer chronometer = findViewById(R.id.chronometer);
    View separator = findViewById(R.id.separator);
    return chronometer;
}",30.907295241491845,13.114645124763522,14.360689687357706,34.61538461538461,61.53846153846154
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    ViewStub stub = (ViewStub) findViewById(R.layout.media_stub);
    View inflatedView = stub.inflate();
    TextView titleView = inflatedView.findViewById(R.id.media_title);
    TextView subtitleView = inflatedView.findViewById(R.id.media_subtitle);
    MediaPlaybackControlsBarPresenter presenter = new MediaPlaybackControlsBarPresenter(this);
    MediaPlaybackControlsBar controlsBar = inflatedView.findViewById(R.id.media_controls);
    presenter.bind(controlsBar);
    return inflatedView;
}","private View getMediaLayoutView() {
    ViewStub stub = (ViewStub) findViewById(R.layout.media_stub);
    View inflatedView = stub.inflate();
    TextView titleView = inflatedView.findViewById(R.id.media_title);
    TextView subtitleView = inflatedView.findViewById(R.id.media_subtitle);
    MediaPlaybackControlsBarPresenter presenter = new MediaPlaybackControlsBarPresenter(this);
    MediaPlaybackControlsBar controlsBar = inflatedView.findViewById(R.id.media_controls);
    presenter.bind(controlsBar);
    return inflatedView;
}",37.59073634899557,16.574624158406063,18.150791165402993,60.46511627906976,55.172413793103445
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
        if (image == null || cardWidth == 0 || cardHeight == 0) {
            return;
        }

        int size = Math.max(cardWidth, cardHeight);
        Bitmap scaledBitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(scaledBitmap);
        Paint paint = new Paint();
        image.setBounds(0, 0, size, size);
        image.draw(canvas);

        Bitmap blurredBitmap = Bitmap.createBitmap(scaledBitmap.getWidth(), scaledBitmap.getHeight(), Bitmap.Config.ARGB_8888);
        Paint blurPaint = new Paint();
        blurPaint.setXfermode(new GaussianBlur(8));
        blurredBitmap = scaledBitmap.copy(Bitmap.Config.ARGB_8888, true);
        blurredBitmap.setFilterBitmap(true);
        canvas = new Canvas(blurredBitmap);
        blurPaint.setFilterBitmap(true);
        canvas.drawBitmap(scaledBitmap, 0, 0, blurPaint);

        cardBackground.setImageBitmap(blurredBitmap);
    }","private void updateBackgroundImage(Drawable image) {
        if (image == null || cardWidth == 0 || cardHeight == 0) {
            return;
        }

        int size = Math.max(cardWidth, cardHeight);
        Bitmap scaledBitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(scaledBitmap);
        Paint paint = new Paint();
        image.setBounds(0, 0, size, size);
        image.draw(canvas);

        Bitmap blurredBitmap = scaledBitmap.copy(Bitmap.Config.ARGB_8888, true);
        blurredBitmap.setFilterBitmap(true);
        Paint blurPaint = new Paint();
        blurPaint.setXfermode(new GaussianBlur(8));
        blurredBitmap = scaledBitmap.copy(Bitmap.Config.ARGB_8888, true);
        blurredBitmap.setFilterBitmap(true);
        canvas = new Canvas(blurredBitmap);
        blurPaint.setFilterBitmap(true);
        canvas.drawBitmap(scaledBitmap, 0, 0, blurPaint);

        cardBackground.setImageBitmap(blurredBitmap);
    }",29.55371277581526,9.898113350298074,18.14579758202279,34.61538461538461,55.55555555555556
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaLayoutView.setVisibility(View.VISIBLE);
    mediaLayoutView.setTitle(title);
    mediaLayoutView.setSubtitle(subtitle);
}",70.842490254843,59.004687263928076,61.207379018601806,63.1578947368421,100.0
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
        if (content.getStartTime() > 0) {
            Chronometer chronometer = findViewById(R.id.chronometer);
            View separator = findViewById(R.id.separator);
            chronometer.setBase(content.getStartTime());
            chronometer.start();
            chronometer.setVisibility(View.VISIBLE);
            separator.setVisibility(View.VISIBLE);
        } else {
            Chronometer chronometer = findViewById(R.id.chronometer);
            View separator = findViewById(R.id.separator);
            chronometer.setVisibility(View.GONE);
            separator.setVisibility(View.GONE);
        }
    }","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
        if (content.getStartTime() > 0) {
            Chronometer chronometer = findViewById(R.id.chronometer);
            View separator = findViewById(R.id.separator);
            chronometer.setBase(content.getStartTime());
            chronometer.start();
            chronometer.setVisibility(View.VISIBLE);
            separator.setVisibility(View.VISIBLE);
        } else {
            Chronometer chronometer = findViewById(R.id.chronometer);
            View separator = findViewById(R.id.separator);
            chronometer.setVisibility(View.GONE);
            separator.setVisibility(View.GONE);
        }
    }",61.06179230938616,29.083084630965494,55.164084606579166,60.0,100.0
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(this);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(this);
    }
}",74.36357747171822,79.10665071754359,79.88612070779082,38.46153846153847,100.0
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
        currentCall = null;
        cardContent = null;
        presenter.onModelUpdated();
        call.unregisterCallback(this);
    }","public void onCallRemoved(Call call) {
        currentCall = null;
        cardContent = null;
        presenter.onModelUpdated();
        call.unregisterCallback(this);
    }",45.69998439052887,22.79229665503114,24.29335519279861,50.0,85.71428571428571
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(number);
    presenter.onModelUpdated(view);
}","void updateModelWithPhoneNumber(String number) {
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(number);
    presenter.onModelUpdated(view);
}",14.306789336892923,11.682950752097785,15.6830954843628,11.11111111111111,18.75
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
        muteButton.setIcon(muteIcon);
        muteButton.addActionListener(e -> toggleMute());

        endCallButton.setIcon(endCallIcon);
        endCallButton.addActionListener(e -> endCall());

        dialpadButton.setIcon(dialpadIcon);
        dialpadButton.addActionListener(dialpadClickListener);
    }","private void initializeAudioControls() {
        muteButton.setIcon(muteIcon);
        muteButton.addActionListener(e -> toggleMute());

        endCallButton.setIcon(endCallIcon);
        endCallButton.addActionListener(e -> endCall());

        dialpadButton.setIcon(dialpadIcon);
        dialpadButton.addActionListener(dialpadClickListener);
    }",14.522673453479108,6.09222502863008,8.950340443040359,13.636363636363635,29.411764705882355
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
  if (connectionStatus == Available) {
    _listener.callback(Available);
  }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
  if (connectionStatus == Available) {
    _listener.callback(Available);
  }
}",62.86825931760862,46.82568791024402,61.16908849062524,43.47826086956522,100.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
  std::lock_guard<std::mutex> lock(exit_mutex);
  if (conn_active(conn) && std::find(exit_threads.begin(), exit_threads.end(), &t) == exit_threads.end()) {
    exit_threads.push_back(&t);
  }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
  std::lock_guard<std::mutex> lock(exit_mutex);
  if (conn_active(conn) && std::find(exit_threads.begin(), exit_threads.end(), &t) == exit_threads.end()) {
    exit_threads.push_back(&t);
  }
}",31.935208079264342,15.824604607032375,20.015119440630293,50.72463768115942,41.17647058823529
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
  if (libdbusWatch) {
    libdbusWatch->unwatch();
    delete libdbusWatch;
  }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
  if (libdbusWatch) {
    libdbusWatch->unwatch();
    delete libdbusWatch;
  }
}",21.55676940452096,10.962988442600283,19.658028569422953,28.333333333333332,27.27272727272727
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
  DBusWatchWrapper* wrapper = reinterpret_cast<DBusWatchWrapper*>(data);
  if (!wrapper->watch) {
    wrapper->watch = libdbusWatch;
    wrapper->ready = true;
  }

  if (wrapper->ready) {
    dbus_watch_acquire(wrapper->watch);
  } else {
    dbus_watch_release(wrapper->watch);
  }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
  DBusWatchWrapper* wrapper = reinterpret_cast<DBusWatchWrapper*>(data);
  if (!wrapper->watch) {
    wrapper->watch = libdbusWatch;
    wrapper->ready = true;
  }

  if (wrapper->ready) {
    dbus_watch_acquire(wrapper->watch);
  } else {
    dbus_watch_release(wrapper->watch);
  }
}",24.64069013721395,8.076989524606365,11.814442352920768,36.36363636363637,42.30769230769231
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
  static std::shared_ptr<DBusObjectManager> instance;
  if (!instance) {
    std::shared_ptr<DBusObjectManager> local_instance = std::make_shared<DBusObjectManager>();
    while (instance.get() == nullptr) {
      instance = local_instance;
    }
  }
  return instance;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
  static std::shared_ptr<DBusObjectManager> instance;
  if (!instance) {
    static std::mutex mutex;
    std::lock_guard<std::mutex> lock(mutex);
    if (!instance) {
      instance = std::make_shared<DBusObjectManager>();
    }
  }
  return instance;
}",48.45449104474903,15.553986407412197,21.53320854081468,69.23076923076923,87.5
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
  auto it = serviceNameCounts_.find(serviceName);
  if (it == serviceNameCounts_.end()) {
    return false;
  }

  it->second--;
  if (it->second == 0) {
    serviceNameCounts_.erase(it);
    bus_->releaseName(serviceName);
  }

  return true;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
  auto it = serviceNameCounts_.find(serviceName);
  if (it == serviceNameCounts_.end()) {
    return false;
  }

  it->second--;
  if (it->second == 0) {
    serviceNameCounts_.erase(it);
    bus_->releaseName(serviceName);
  }

  return true;
}",27.829815005249113,9.140122674835117,12.179137346161331,50.0,40.0
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
  if (_libdbusPendingCall == nullptr) {
    return DBusMessage();
  }
  DBusMessage reply = DBusMessage::createReply(_libdbusPendingCall->reply);
  return reply;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
  if (_libdbusPendingCall == nullptr) {
    return DBusMessage();
  }
  return DBusMessage(DBusMessage( _libdbusPendingCall->reply));
}",28.513490860120815,13.270396118241926,17.450233988908003,33.33333333333333,50.0
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
  std::vector<AsyncHandler*> handlersToDelete = std::move(asyncHandlers_);
  asyncHandlers_.clear();
  for (AsyncHandler* handler : handlersToDelete) {
    delete handler;
  }
}","void DBusConnection::deleteAsyncHandlers() {
  std::vector<AsyncHandler*> handlersToDelete = std::move(asyncHandlers_);
  for (AsyncHandler* handler : handlersToDelete) {
    delete handler;
  }
}",13.348007718110932,4.529772265237511,5.494911668430703,18.367346938775512,25.0
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
  std::lock_guard<std::mutex> lock(signalMutex);
  for (auto& [tag, handlers] : signalHandlers) {
    for (auto& handler : handlers) {
      handler.onSpecificError(SUCCESS);
    }
  }
}","void DBusConnection::handleSignalStates() {
  std::lock_guard<std::mutex> lock(signalMutex);
  for (auto& [tag, handlers] : signalHandlers) {
    for (auto& handler : handlers) {
      handler.onSpecificError(SUCCESS);
    }
  }
}",21.239098114610677,6.7491563707678575,7.555062174631373,45.65217391304348,25.0
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    connections_.erase(_connectionId);
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = connections_.find(_connectionId);
    if (it != connections_.end()) {
        connections_.erase(it);
    }
}",64.2130571570321,34.11488281065382,35.237345817474555,100.0,87.5
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
  if (dbusMessage.member() == ""InterfacesAdded"") {
    interfacesAddedHandler(dbusMessage);
  } else if (dbusMessage.member() == ""InterfacesRemoved"") {
    interfacesRemovedHandler(dbusMessage);
  }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
  if (dbusMessage.member() == ""InterfacesAdded"") {
    interfacesAddedHandler(dbusMessage);
  } else if (dbusMessage.member() == ""InterfacesRemoved"") {
    interfacesRemovedHandler(dbusMessage);
  }
}",47.81387645409231,32.28213880040185,42.09025013285051,45.45454545454545,71.42857142857143
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
  _availableServiceInstances.clear();
  try {
    std::vector<DBusObjectPath> availableServiceInstancePaths = m_registry->getAvailableServiceInstances();
    for (const DBusObjectPath& path : availableServiceInstancesPaths) {
      DBusAddress address = m_registry->getAddress(path);
      _availableServiceInstances.push_back(address);
    }
    _status = CommonAPI::CallStatus::SUCCESS;
  } catch (const std::exception& e) {
    _status = CommonAPI::CallStatus::ERROR;
  }
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
  _availableServiceInstances.clear();
  try {
    std::vector<DBusObjectPath> availableServiceInstancePaths = m_registry->getAvailableServiceInstances();
    for (const DBusObjectPath& path : availableServiceInstancePaths) {
      DBusAddress address = m_registry->getAddress(path);
      _availableServiceInstances.push_back(address);
    }
    _status = CommonAPI::CallStatus::SUCCESS;
  } catch (const std::exception& e) {
    _status = CommonAPI::CallStatus::ERROR;
  }
}",48.46320408318244,12.162779391619734,27.793933045006163,68.18181818181817,85.71428571428571
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
  std::string dbusAddress = _instance;
  _callStatus = CallStatus::SUCCESS;
  _availabilityStatus = AvailabilityStatus::UNKNOWN;

  try {
    auto it = serviceInstances.find(dbusAddress);
    if (it != serviceInstances.end()) {
      _availabilityStatus = it->second;
    } else {
      _callStatus = CallStatus::FAILED;
    }
  } catch (const std::exception& e) {
    _callStatus = CallStatus::FAILED;
  }
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
  std::string dbusAddress = _instance;
  _callStatus = CallStatus::SUCCESS;
  _availabilityStatus = AvailabilityStatus::UNKNOWN;

  try {
    auto it = serviceInstances.find(dbusAddress);
    if (it != serviceInstances.end()) {
      _availabilityStatus = it->second;
    } else {
      _callStatus = CallStatus::FAILED;
      _availabilityStatus = AvailabilityStatus::UNAVAILABLE;
    }
  } catch (const std::exception& e) {
    _callStatus = CallStatus::FAILED;
  }
}",38.56746280531789,16.663464172843774,26.495275937316677,66.66666666666666,44.44444444444444
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
  DBusMessageIterator args(_message.body());
  std::string object_path;
  while (args.hasNext()) {
    if (args.next() == DBUS_TYPE_STRING) {
      object_path = args.string();
    } else if (args.next() == DBUS_TYPE_STRING) {
      std::string interface_name = args.string();
      if (observed_interfaces_.count(interface_name)) {
        observed_interfaces_[interface_name] = NOT_AVAILABLE;
        notifyListeners();
      }
    }
  }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
  DBusMessageIterator args(_message.body());
  std::string object_path;
  if (args.hasNext() && args.next() == DBUS_TYPE_STRING) {
    object_path = args.string();
  }
  while (args.hasNext()) {
    if (args.next() == DBUS_TYPE_STRING) {
      std::string interface_name = args.string();
      if (observed_interfaces_.count(interface_name)) {
        observed_interfaces_[interface_name] = NOT_AVAILABLE;
        notifyListeners();
      }
    }
  }
}",26.30024036470564,7.678572507937448,9.060850489346649,34.61538461538461,53.84615384615385
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
  std::string address = ""dbus://"" + _objectPath + ""/"" + _interfaceName;
  emit interfaceStatusChanged(address, _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
  std::string address = ""dbus://"" + _objectPath + ""/"" + _interfaceName;
  emit interfaceStatusChanged(address, _availability);
}",46.6365642211225,34.961722361745295,39.832871551569504,39.02439024390244,72.72727272727273
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
  std::lock_guard<std::mutex> lock(mutex_);
  eventLoop->post(std::bind(&DBusProxyStatusEvent::notifyListenerAdded, this, _listener, _subscription));
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
  std::lock_guard<std::mutex> lock(mutex_);
  eventLoop->post(std::bind(&DBusProxyStatusEvent::notifyListenerAdded, this, _listener, _subscription));
}",43.772497779991,36.054047213141935,39.03594390682206,50.0,50.0
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                     [&](const Listener& listener) {
                                         return listener.subscription == _subscription;
                                     }),
                     listeners_.end());
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                     [&](const Listener& listener) {
                                         return listener.subscription == _subscription;
                                     }));
}",36.894520392485376,24.638371203706452,25.915900842425525,54.166666666666664,42.857142857142854
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
  m_connection->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
  m_connection->addSignalStateHandler(_handler, _subscription);
}",71.38713623153023,42.268392163412415,43.28015276270854,100.0,100.0
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
  if (_status == CommonAPI::CallStatus::Success) {
    std::vector<std::string> serviceInstances;
    for (const auto& address : _availableServiceInstances) {
      serviceInstances.push_back(address.ToString());
    }
    _call(CommonAPI::CallStatus::Success, serviceInstances);
  } else {
    _call(_status, {});
  }
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
  if (_status == CommonAPI::CallStatus::Success) {
    std::vector<std::string> serviceInstances;
    for (const auto& address : _availableServiceInstances) {
      serviceInstances.push_back(address.ToString());
    }
    _call(CommonAPI::CallStatus::Success, serviceInstances);
  } else {
    _call(_status, std::vector<std::string>());
  }
}",58.58796162262071,30.189707990356624,43.606582944570675,68.88888888888889,91.66666666666666
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
  if (dbusMessage.isMethodCall()) {
    const std::string& objectPath = dbusMessage.getObjectPath();
    const std::string& interface = dbusMessage.getInterface();
    const std::string& member = dbusMessage.getMember();

    auto it = handlers_.find(objectPath);
    if (it != handlers_.end()) {
      auto& objectHandlers = it->second;
      auto objIt = objectHandlers.find(interface);
      if (objIt != objectHandlers.end()) {
        auto& interfaceHandlers = objIt->second;
        auto memIt = interfaceHandlers.find(member);
        if (memIt != interfaceHandlers.end()) {
          return memIt->second(dbusMessage);
        }
      }
    }
  } else if (dbusMessage.isMethodReturn()) {
    return false;
  } else if (dbusMessage.isError()) {
    return false;
  } else if (dbusMessage.isSignal()) {
    return false;
  }

  if (dbusMessage.isMethodCall() && dbusMessage.getInterface() == INTROSPECTION_INTERFACE) {
    return handleIntrospectionRequest(dbusMessage);
  }

  return false;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
  if (dbusMessage.isMethodCall()) {
    const std::string& objectPath = dbusMessage.getObjectPath();
    const std::string& interface = dbusMessage.getInterface();
    const std::string& member = dbusMessage.getMember();

    auto it = handlers_.find(objectPath);
    if (it != handlers_.end()) {
      auto& objectHandlers = it->second;
      auto objIt = objectHandlers.find(interface);
      if (objIt != objectHandlers.end()) {
        auto& interfaceHandlers = objIt->second;
        auto memIt = interfaceHandlers.find(member);
        if (memIt != interfaceHandlers.end()) {
          return memIt->second(dbusMessage);
        }
      }
    }
  } else if (dbusMessage.isMethodReturn()) {
    return false;
  } else if (dbusMessage.isError()) {
    return false;
  } else if (dbusMessage.isSignal()) {
    return false;
  }

  if (dbusMessage.isMethodCall() && dbusMessage.getInterface() == INTROSPECTION_INTERFACE) {
    return handleIntrospectionRequest(dbusMessage);
  }

  return false;
}",31.833226974373098,10.129125545627609,13.029071927154353,36.607142857142854,67.56756756756756
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
  auto it = _dbusInterfaceHandlerPaths.find(dbusInterfaceHandlerPath);
  if (it != _dbusInterfaceHandlerPaths.end()) {
    if (dbusInterfaceHandlerPath == ObjectManagerPath || dbusInterfaceHandlerPath == PropertiesPath) {
      return true;
    }
    return false;
  }

  _dbusInterfaceHandlerPaths.insert(dbusInterfaceHandlerPath, dbusInterfaceHandler);
  return true;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
  auto it = _dbusInterfaceHandlerPaths.find(dbusInterfaceHandlerPath);
  if (it != _dbusInterfaceHandlerPaths.end()) {
    return false;
  }

  if (dbusInterfaceHandlerPath == ObjectManagerPath || dbusInterfaceHandlerPath == PropertiesPath) {
    _dbusInterfaceHandlerPaths.insert(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return true;
  }

  _dbusInterfaceHandlerPaths.insert(dbusInterfaceHandlerPath, dbusInterfaceHandler);
  return true;
}",35.17693037098673,16.55312823727132,18.400624992707364,48.61111111111111,57.14285714285714
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
  if (registeredObjectsTable_.count(ifpath)) {
    return false;
  }
  registeredObjectsTable_[ifpath] = std::move(handler);
  return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
  if (registeredObjectsTable_.count(ifpath)) {
    return false;
  }
  registeredObjectsTable_[ifpath] = std::move(handler);
  return true;
}",22.161042832259586,7.818484965802054,17.066650218657976,39.75903614457831,24.0
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  uint8_t sid = 0x31;
  uint8_t data[2];
  data[0] = reset_type;
  data[1] = 0;

  if (iso_tp_send(sid, data, 2) != SUCCESS) {
    log_error(""Failed to send positive reset response"");
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  uint8_t sid = 0x31;
  uint8_t data[2];
  data[0] = reset_type;
  data[1] = 0;

  if (iso_tp_send(sid, data, 2) != SUCCESS) {
    log_error(""Failed to send positive reset response"");
  }
}",13.476657244192602,7.381796604997572,8.022158574981395,9.090909090909092,29.411764705882355
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response();
    return;
  }

  uint8_t sub_function = data[1];

  if (sub_function == 0x01) {
    send_positive_response();
    reboot_system();
  } else {
    send_negative_response();
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response();
    return;
  }

  uint8_t sub_function = data[1];

  if (sub_function == 0x01) {
    send_positive_response();
    reboot_system();
  } else {
    send_negative_response();
  }
}",43.786582690981376,40.61398531981548,42.28428342860616,25.581395348837212,66.66666666666666
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  uint8_t request_id = 0x10;
  uint8_t response_data[4] = {0x00, 0x00, 0x0D, 0x02};
  uint8_t response_length = 4;

  if (iso_tp_send(request_id, response_data, response_length) != SUCCESS) {
    log_error(""Failed to send Request Download response"");
  }
}","void send_request_download_response() {
  uint8_t request_id = 0x10;
  uint8_t response_data[4] = {0x00, 0x00, 0x0D, 0x02};
  uint8_t response_length = 4;

  if (iso_tp_send(request_id, response_data, response_length) != SUCCESS) {
    log_error(""Failed to send Request Download response"");
  }
}",11.112975915936385,2.1689794665175204,2.6995908638946866,6.25,33.33333333333333
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  uint8_t sid = 0x78;
  uint8_t response[2];
  response[0] = sid;
  response[1] = block_sequence_counter;

  if (can_transmit(response, 2) != 0) {
    error_log(""Failed to transmit transfer data response"");
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  uint8_t sid = 0x78;
  uint8_t response[2];
  response[0] = sid;
  response[1] = block_sequence_counter;

  if (can_transmit(response, 2) != 0) {
    error_log(""Failed to transmit transfer data response"");
  }
}",15.707781096425155,10.262420546350407,11.39223325111492,11.76470588235294,29.411764705882355
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  uint8_t buffer[5];
  buffer[0] = 0x31;
  buffer[1] = (uint8_t)(routine_id >> 8);
  buffer[2] = (uint8_t)(routine_id & 0xFF);
  buffer[3] = 0x01;
  buffer[4] = result;

  if (iso_tp_send(0x180, buffer, 5) != 5) {
    error_log(""Failed to send Routine Control Result"");
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  uint8_t buffer[5];
  buffer[0] = 0x31;
  buffer[1] = (uint8_t)(routine_id >> 8);
  buffer[2] = (uint8_t)(routine_id & 0xFF);
  buffer[3] = 0x01;
  buffer[4] = result;

  if (iso_tp_send(0x180, buffer, 5) != 5) {
    error_log(""Failed to send Routine Control Result"");
  }
}",24.918170511661668,12.7947462997511,13.801012669972486,23.076923076923077,50.0
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  uint8_t data[1];
  uint8_t sid = get_request_sid();
  data[0] = sid | 0x40;
  if (iso_tp_send(data, 1) != SUCCESS) {
    log_error(""Failed to send Transfer Exit positive response"");
  }
}","static void send_transer_exit_positive_response() {
  uint8_t data[1];
  uint8_t sid = get_request_sid();
  data[0] = sid | 0x40;
  if (iso_tp_send(data, 1) != SUCCESS) {
    log_error(""Failed to send Transfer Exit positive response"");
  }
}",12.013968283227891,7.535130426815588,8.399530584883854,12.121212121212121,20.0
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    for (uint8_t i = 0; i < ARRAY_SIZE(id_mapping); ++i) {
        if (id_mapping[i].can_id == can_id) {
            return i;
        }
    }
    return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    for (uint8_t i = 0; i < ARRAY_SIZE(id_mapping); ++i) {
        if (id_mapping[i].can_id == can_id) {
            return i;
        }
    }
    return 0xff;
}",73.13873539564125,67.13783850074478,68.274245938963,57.14285714285714,100.0
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	if (!dev) {
		return;
	}

	if (filter_id == -1) {
		for (int i = 0; i < ARRAY_SIZE(dev->lin2can->rx_filters); i++) {
			dev->lin2can->rx_filters[i].callback = NULL;
		}
	} else if (filter_id >= 0 && filter_id < ARRAY_SIZE(dev->lin2can->rx_filters)) {
		dev->lin2can->rx_filters[filter_id].callback = NULL;
	}
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	if (!dev) {
		return;
	}

	if (filter_id == -1) {
		for (int i = 0; i < ARRAY_SIZE(dev->lin2can->rx_filters); i++) {
			dev->lin2can->rx_filters[i].callback = NULL;
		}
	} else if (filter_id >= 0 && filter_id < ARRAY_SIZE(dev->lin2can->rx_filters)) {
		dev->lin2can->rx_filters[filter_id].callback = NULL;
	}
}",44.32737412593834,42.374113937547634,46.21902645854527,45.23809523809524,43.47826086956522
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
	struct message *msg = queue_remove_head(&tx_queue);
	if (!msg) {
		return false;
	}

	memcpy(frame->data, msg->data, msg->len);
	frame->len = msg->len;

	completion_cb(user_data, frame);

	return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
	struct message *msg = queue_remove_head(&tx_queue);
	if (!msg) {
		return false;
	}

	memcpy(frame->data, msg->data, msg->len);
	frame->len = msg->len;

	completion_cb(user_data, frame);

	return true;
}",32.63580214396791,18.368164169758654,22.347458199216426,44.827586206896555,45.0
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  uint8_t index = (frame->data[0] >> 6) & 0x03;
  uint32_t can_id = ((uint32_t)user_data) + index * 10;
  struct can_frame can_frame = { .id = can_id, .dlc = frame->dlc, .data = frame->data };
  
  if (user_data != NULL) {
    ((void (*)(struct can_frame))user_data)(&can_frame);
  }
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  uint8_t index = (frame->data[0] >> 6) & 0x03;
  uint32_t can_id = ((uint32_t)user_data) + index * 10;
  struct can_frame can_frame = { .id = can_id, .dlc = frame->dlc, .data = frame->data };

  if (user_data != NULL) {
    ((void (*)(struct can_frame))user_data)(&can_frame);
  }
}",27.083605449170268,14.209977453678329,16.595708710818815,42.5287356321839,35.0
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
	int ret;

	ret = gpio_config(dev->config->oe_gpio, GPIO_OUTPUT);
	if (ret < 0) {
		log_error(""Failed to configure OE GPIO: %d\n"", ret);
		return ret;
	}

	memset(dev->regs, 0, sizeof(dev->regs));

	ret = gpio_set(dev->config->oe_gpio, 1);
	if (ret < 0) {
		log_error(""Failed to set OE pin: %d\n"", ret);
		return ret;
	}

	return 0;
}","static int hv_shield_init(const struct device* dev) {
	int ret;

	ret = gpio_config(dev->config->oe_gpio, GPIO_OUTPUT);
	if (ret < 0) {
		log_error(""Failed to configure OE GPIO: %d\n"", ret);
		return ret;
	}

	memset(dev->regs, 0, sizeof(dev->regs));

	ret = gpio_set(dev->config->oe_gpio, 1);
	if (ret < 0) {
		log_error(""Failed to set OE pin: %d\n"", ret);
		return ret;
	}

	return 0;
}",22.945095960451923,10.652083896584895,12.311095644147525,33.33333333333333,35.483870967741936
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	if (dac > 1) {
		return -EINVAL;
	}

	dev->hv_shield_dac_gains[dac] = gain;
	hvs_update_config(dev);

	return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	if (dac > 1) {
		return -EINVAL;
	}

	dev->hv_shield_dac_gains[dac] = gain;
	hvs_update_config(dev);

	return 0;
}",38.141396083737376,34.33427207619715,39.642795512340896,52.27272727272727,26.31578947368421
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
	if (index > 31) {
		return -EINVAL;
	}

	uint8_t reg_index = (index >> 4) | ((index & 0x0F) << 4);
	static uint32_t reg_cache;

	if (enable) {
		reg_cache |= (1 << index);
	} else {
		reg_cache &= ~(1 << index);
	}

	hvs_write_reg(dev, reg_index, reg_cache);

	return 0;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
	if (index > 31) {
		return -EINVAL;
	}

	uint8_t reg_index = (index >> 4) | ((index & 0x0F) << 4);
	static uint32_t reg_cache;

	if (enable) {
		reg_cache |= (1 << index);
	} else {
		reg_cache &= ~(1 << index);
	}

	hvs_write_reg(dev, reg_index, reg_cache);

	return 0;
}",42.32224254468731,37.44460808089191,38.05505392175672,39.62264150943396,54.166666666666664
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
	struct device *dest_dev = user_data;
	int ret;

	ret = can_transmit(dest_dev, frame, 0);

	if (ret == 0) {
		dev_dbg(dev, ""CAN frame forwarded to %s\n"", dev->name);
	} else {
		dev_warn(dev, ""Failed to forward CAN frame to %s\n"", dev->name);
	}
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
	struct device *dest_dev = user_data;
	int ret;

	ret = can_transmit(dest_dev, frame, 0);

	if (ret == 0) {
		dev_dbg(dev, ""CAN frame forwarded to %s\n"", dest_dev->name);
	} else {
		dev_warn(dev, ""Failed to forward CAN frame to %s\n"", dest_dev->name);
	}
}",47.17440736701059,26.97150450845508,30.892791626253903,47.5,83.33333333333334
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  for (int i = 0; i < entry_count; i++) {
    int ret = can_interface_add_filter(entries[i].source_interface,
                                       entries[i].can_id,
                                       entries[i].can_mask,
                                       entries[i].destination_interface,
                                       entries[i].callback);
    if (ret != 0) {
      return ret;
    }
  }
  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  for (int i = 0; i < entry_count; i++) {
    int ret = can_interface_add_filter(entries[i].source_interface,
                                       entries[i].can_id,
                                       entries[i].can_mask,
                                       entries[i].destination_interface,
                                       entries[i].callback);
    if (ret != 0) {
      return ret;
    }
  }
  return 0;
}",44.91734983574838,36.564475063116184,39.558013524728594,45.65217391304348,57.89473684210527
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
  extern const struct can_route_entry *__attribute__((section("".can_routes"")) const struct can_route_entry *routes_start,
                                                      const struct can_route_entry *routes_end);

  const struct can_route_entry *current_route = routes_start;
  while (current_route < routes_end) {
    if (can_route_register(current_route) != 0) {
      return -1;
    }
    current_route++;
  }
  return 0;
}","static int can_router_sysinit() {
  extern const struct can_route_entry *__attribute__((section("".can_routes""))) const struct can_route_entry *routes_start,
                                                      const struct can_route_entry *routes_end;

  const struct can_route_entry *current_route = routes_start;
  while (current_route < routes_end) {
    if (can_route_register(current_route) != 0) {
      return -1;
    }
    current_route++;
  }
  return 0;
}",29.652023111920776,12.89493939515115,18.356831213451517,20.689655172413794,66.66666666666666
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret;
	for (int i = 0; i < 32; i++) {
		if ((mask >> i) & 1) {
			if ((value >> i) & 1) {
				ret = gpio_set_pin(port, i, GPIO_ACTIVE_HIGH);
				if (ret < 0) {
					return ret;
				}
			} else {
				ret = gpio_set_pin(port, i, GPIO_ACTIVE_LOW);
				if (ret < 0) {
					return ret;
				}
			}
		}
	}
	return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret;
	for (int i = 0; i < 32; i++) {
		if ((mask >> i) & 1) {
			if ((value >> i) & 1) {
				ret = gpio_set_pin(port, i, GPIO_ACTIVE_HIGH);
				if (ret < 0) {
					return ret;
				}
			} else {
				ret = gpio_set_pin(port, i, GPIO_ACTIVE_LOW);
				if (ret < 0) {
					return ret;
				}
			}
		}
	}
	return 0;
}",45.91212479626244,36.814948109767435,45.39939201400461,32.20338983050847,69.23076923076923
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
	if (free_slots == NULL) {
		return -EINVAL;
	}

	*free_slots = al_max_cb_slots - al_used_cb_slots;
	return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
	if (free_slots == NULL) {
		return -EINVAL;
	}

	*free_slots = al_max_cb_slots - al_used_cb_slots;
	return 0;
}",57.26267781676262,60.562229523054434,61.82181507732941,66.66666666666666,40.0
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
		return -EINVAL;
	}

	if (!callback) {
		return -EINVAL;
	}

	int slot = al_find_free_callback_slot(dev);
	if (slot < 0) {
		return -ENOMEM;
	}

	al_callback_slots[slot].frame_id = frame_id;
	al_callback_slots[slot].frame_size = frame_size;
	al_callback_slots[slot].callback = callback;
	al_callback_slots[slot].user_data = user_data;
	al_callback_slots[slot].is_valid = true;

	return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
		return -EINVAL;
	}

	if (!callback) {
		return -EINVAL;
	}

	int slot = al_find_free_callback_slot(dev);
	if (slot < 0) {
		return -ENOMEM;
	}

	al_callback_slots[slot].frame_id = frame_id;
	al_callback_slots[slot].frame_size = frame_size;
	al_callback_slots[slot].callback = callback;
	al_callback_slots[slot].user_data = user_data;
	al_callback_slots[slot].is_valid = true;

	return 0;
}",50.526155934689385,48.952106806239634,50.28136847313418,33.82352941176471,69.04761904761905
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
		return -EINVAL;
	}

	if (!callback) {
		return -EINVAL;
	}

	int slot = find_free_outgoing_slot();
	if (slot < 0) {
		return -ENOMEM;
	}

	outgoing_callbacks[slot].callback = callback;
	outgoing_callbacks[slot].frame_id = frame_id;
	outgoing_callbacks[slot].frame_size = frame_size;
	outgoing_callbacks[slot].user_data = user_data;
	outgoing_callbacks[slot].valid = 1;

	return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
		return -EINVAL;
	}

	if (!callback) {
		return -EINVAL;
	}

	int slot = find_free_outgoing_slot();
	if (slot < 0) {
		return -ENOMEM;
	}

	outgoing_callbacks[slot].callback = callback;
	outgoing_callbacks[slot].frame_id = frame_id;
	outgoing_callbacks[slot].frame_size = frame_size;
	outgoing_callbacks[slot].user_data = user_data;
	outgoing_callbacks[slot].valid = 1;

	return 0;
}",46.95472736326082,48.952106806239634,50.28136847313418,33.82352941176471,54.761904761904766
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler, int table_index)
{
	if (table_index < 0 || table_index >= scheduler->num_tables) {
		return -1;
	}

	sem_wait(&scheduler->scheduler_lock);

	scheduler->active_table_index = table_index;
	scheduler->entry_pointer = scheduler->table[table_index];

	sem_post(&scheduler->scheduler_lock);

	return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler, int table_index)
{
	if (table_index < 0 || table_index >= scheduler->num_tables) {
		return -1;
	}

	sem_wait(&scheduler->scheduler_lock);

	scheduler->active_table_index = table_index;
	scheduler->entry_pointer = scheduler->table[table_index];

	sem_post(&scheduler->scheduler_lock);

	return 0;
}",30.751960024872048,9.74720907864249,11.155367862950985,42.10526315789473,60.0
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->stopped) {
    return;
  }

  lin_take_semaphore(&sched->semaphore);

  sched->active_schedule_table_index = -1;

  lin_give_semaphore(&sched->semaphore);
  sched->stopped = 1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->stopped) {
    return;
  }

  lin_take_semaphore(&sched->semaphore);

  sched->active_schedule_table_index = -1;

  lin_give_semaphore(&sched->semaphore);
  sched->stopped = 1;
}",51.17709761424509,24.248545140243575,25.45984531673679,55.00000000000001,100.0

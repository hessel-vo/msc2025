id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype not in cls.datatypes:
        raise ValueError(f""Unsupported datatype: '{datatype}'"")
    validation_function = cls.datatypes[datatype]
    return validation_function(value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype not in cls.datatypes:
        raise ValueError(f""Unsupported datatype: '{datatype}'"")
    validation_function = cls.datatypes[datatype]
    return validation_function(value)",46.595948956881614,29.534359244592505,38.387898121395494,38.46153846153847,80.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any, Union, List

def is_xintx(value: Any, signed: bool, bits: int) -> bool:
    if isinstance(value, list):
        return all(is_xintx(item, signed, bits) for item in value)
    if not isinstance(value, int):
        return False
    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1
    return lower_bound <= value <= upper_bound","from typing import Any, Union, List

def is_xintx(value: Any, signed: bool, bits: int) -> bool:
    if isinstance(value, list):
        return all(is_xintx(item, signed, bits) for item in value)
    if not isinstance(value, int):
        return False
    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1
    return lower_bound <= value <= upper_bound",36.722581822236194,20.055074222989592,20.571846802548933,60.317460317460316,45.94594594594595
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.types:
        if type_def[0] == datatype:
            return type_def
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.types:
        if type_def[0] == datatype:
            return type_def
    return None",72.51558048642302,57.14392512385289,58.84432274776513,74.07407407407408,100.0
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    datatypes = {}
    if fqn:
        for datatype in Datatypes:
            if datatype.namespace == fqn.split('.')[0]:
                datatypes[datatype.short_name] = datatype.fqn
    else:
        for datatype in Datatypes:
            datatypes[datatype.short_name] = datatype.fqn
    return datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    datatypes = {}
    if fqn:
        for datatype in Datatypes:
            if datatype.namespace == fqn.split('.')[0]:
                datatypes[datatype.short_name] = datatype.fqn
    else:
        for datatype in Datatypes:
            datatypes[datatype.short_name] = datatype.fqn
    return datatypes",39.052770553867376,27.862307775531836,28.464515180678408,40.625,59.25925925925925
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    t = t.strip()
    if t in (""string"", ""str"", ""text""):
        return ApiGearType(""string"")
    if t in (""integer"", ""int"", ""number"", ""long""):
        return ApiGearType(""integer"")
    if t == ""boolean"":
        return ApiGearType(""boolean"")
    if t == ""float"":
        return ApiGearType(""float"")
    if t.endswith(""[]""):
        return ApiGearType(t[:-2], array=True)
    if ""."" in t:
        t = t.replace(""."", ""_"")
    return ApiGearType(t)","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    t = t.strip()
    if t in (""string"", ""str"", ""text""):
        return ApiGearType(""string"")
    if t in (""integer"", ""int"", ""number"", ""long""):
        return ApiGearType(""integer"")
    if t == ""boolean"":
        return ApiGearType(""boolean"")
    if t == ""float"":
        return ApiGearType(""float"")
    if t.endswith(""[]""):
        return ApiGearType(t[:-2], array=True)
    if ""."" in t:
        t = t.replace(""."", ""_"")
    return ApiGearType(t)",20.956706056763025,8.373189425102936,9.792819482059418,34.51327433628318,31.147540983606557
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    api_gear_type = convert_datatype(datatype)
    if api_gear_type is None:
        log.warning(f""Unsupported datatype: {datatype}"")
        return None
    property = ApiGearProperty(
        name=node.name,
        type=api_gear_type,
        description=node.description,
    )
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    api_gear_type = convert_datatype(datatype)
    if api_gear_type is None:
        log.warning(f""Unsupported datatype: {datatype}"")
        return None
    property = ApiGearProperty(
        name=node.name,
        type=api_gear_type,
        description=node.description,
    )
    return property",44.442816050417086,27.180522660015654,30.03518598609714,55.55555555555556,65.0
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

class VSpec:
    def __init__(self):
        self.definitions = {}

    def merge(self, other):
        for key, value in other.definitions.items():
            self.definitions[key] = value

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec()
    loaded_files = 0
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                content = f.read()
            
            lines = content.splitlines()
            
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    vspec.definitions[key.strip()] = value.strip()
            
            loaded_files += 1
        except FileNotFoundError:
            print(f""Warning: File not found: {spec_path}"")
        except Exception as e:
            print(f""Warning: Error loading file {spec_path}: {e}"")

    if loaded_files == 0:
        raise Exception(""No VSpec files were successfully loaded."")

    return vspec","from pathlib import Path

class VSpec:
    def __init__(self):
        self.definitions = {}

    def merge(self, other):
        for key, value in other.definitions.items():
            self.definitions[key] = value

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec()
    loaded_files = 0
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                content = f.read()
            
            lines = content.splitlines()
            
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    vspec.definitions[key.strip()] = value.strip()
            
            loaded_files += 1
        except FileNotFoundError:
            pass
        except Exception as e:
            pass

    if loaded_files == 0:
        raise Exception(""No VSpec files were successfully loaded."")

    return vspec",28.75049249074718,15.195004263621398,20.969756397041746,30.0,48.837209302325576
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if key in base and isinstance(base[key], dict) and isinstance(value, dict):
            deep_update(base[key], value)
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if key in base and isinstance(base[key], dict) and isinstance(value, dict):
            deep_update(base[key], value)
        else:
            base[key] = value",79.6946655476183,72.17897697581664,72.64135188132323,83.33333333333334,90.625
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if not isinstance(v, str):
            return None
        if not v.startswith(""0x""):
            return None
        if len(v) != 10:
            return None
        try:
            int(v[2:], 16)
        except ValueError:
            return None
        return v
    return None","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if not isinstance(v, str):
            return None
        if not v.startswith(""0x""):
            return None
        if len(v) != 10:
            return None
        try:
            int(v[2:], 16)
        except ValueError:
            return None
        return v
    return None",48.9521345186815,31.10340303714584,46.705135037580135,48.0,70.0
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw.from_dict(data)
    try:
        model.resolve()
    except (ValidationError, ModelError):
        pass
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw.from_dict(data)
    try:
        model.resolve()
    except (ValidationError, ModelError):
        pass
    return model",46.0457632765151,39.73869858280553,41.94435452325487,42.5,60.0
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = cls.get_valid_datatypes()
    for value in values:
        if value not in valid_datatypes:
            raise ValueError(f""Invalid datatype: '{value}'"")
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = cls.get_valid_datatypes()
    for value in values:
        if value not in valid_datatypes:
            raise ValueError(f""Invalid datatype: '{value}'"")
    return values",50.359048826755846,34.119147403233605,38.150381237123135,62.5,66.66666666666666
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    rendered_tree = """"
    def traverse(node: VSSNode, indent: int = 0):
        nonlocal rendered_tree
        rendered_tree += ""  "" * indent + node.name
        if attributes:
            for attribute in attributes:
                if hasattr(node, attribute):
                    rendered_tree += f"" ({getattr(node, attribute)})""
        rendered_tree += ""\n""
        for child in node.children:
            traverse(child, indent + 1)
    traverse(tree)
    return rendered_tree","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    rendered_tree = """"
    def traverse(node: VSSNode, indent: int = 0):
        nonlocal rendered_tree
        rendered_tree += ""  "" * indent + node.name
        if attributes:
            attribute_strings = []
            for attribute in attributes:
                if hasattr(node, attribute):
                    attribute_strings.append(str(getattr(node, attribute)))
            if attribute_strings:
                rendered_tree += "" ("" + "", "".join(attribute_strings) + "")""
        rendered_tree += ""\n""
        for child in node.children:
            traverse(child, indent + 1)
    traverse(tree)
    return rendered_tree",32.69747094923275,14.827130686548253,21.792712624552795,41.53846153846154,52.63157894736842
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch():
        raise Exception(""Starting node is not a branch"")
    while self.parent:
        depth += 1
        if self.parent.is_root():
            return self.parent, depth
        self = self.parent
    raise Exception(""No root found"")","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch():
        raise Exception(""Starting node is not a branch"")
    current = self
    while current.parent:
        depth += 1
        if current.parent.is_root():
            return current.parent, depth
        current = current.parent
    raise Exception(""No root found"")",39.82271598475335,28.4651281446665,38.194156846978494,40.0,52.63157894736842
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    if not self.children:
        return 0
    for child in self.children:
        if isinstance(child, VSSDataBranch) and child.is_instance:
            return 1
        if isinstance(child, VSSDataBranch) and child.count_instance_children_depth():
            return 1
    return 0","def count_instance_children_depth(self) -> int:
    if not self.children:
        return 0
    for child in self.children:
        if isinstance(child, VSSDataBranch) and child.is_instance:
            return 1
        if isinstance(child, VSSDataBranch):
            depth = child.count_instance_children_depth()
            if depth > 0:
                return 1
    return 0",50.05059138490071,20.988785322505514,40.08314543448866,39.130434782608695,100.0
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.split(':')[0] == name:
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        parts = node_id.split(':')
        if len(parts) > 0 and parts[0] == name:
            children_ids.append(node_id)
    return children_ids",60.60297737657008,29.73199273805454,41.895603042735594,76.66666666666667,94.11764705882352
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    value = getattr(o, name, default)
    return value",54.15179268798601,41.66026282550508,43.28024125977231,58.333333333333336,73.33333333333333
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""complex_data_type"":
        fd.write(f""import {tree.name}\n"")
    else:
        fd.write(f""{tree.name} "")
        if add_optional:
            fd.write(""= "")
        else:
            fd.write(""= "")
        fd.write(tree.value)
        fd.write(""\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""complex_data_type"":
        fd.write(f""import {tree.name}\n"")
    else:
        fd.write(f""{tree.name} "")
        if add_optional:
            fd.write("" = "")
        else:
            fd.write("" = "")
        fd.write(tree.value)
        fd.write(""\n"")",19.075298317956392,8.096680261528192,12.591683686127844,27.835051546391753,27.77777777777778
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    def traverse(node: VSSNode, path: list[str]):
        if node.is_terminal:
            if path:
                instances[""."".join(path)] = instances.get(""."".join(path), []) + [node.name]
        else:
            for child in node.children:
                traverse(child, path + [node.name])
    traverse(root, [])
    return instances","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    def traverse(node: VSSNode, path: list[str]):
        if node.is_terminal:
            if path:
                instances[""."".join(path)] = instances.get(""."".join(path), []) + [node.name]
        else:
            for child in node.children:
                traverse(child, path + [node.name])
    traverse(root, [])
    return instances",23.150492975610597,10.370736869636596,11.905173573739415,35.63218390804598,34.69387755102041
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)",53.95251422009305,34.1077254951379,31.7023313852343,50.0,100.0
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and node.is_instance is False","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and not node.is_instance",38.92121923202306,27.429553970075617,26.150059800121895,42.10526315789473,60.0
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.data == ""VSSDataBranch"" and node.is_instance","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.data == ""VSSDataBranch"" and node.is_instance",36.85473462813429,27.955378582426714,26.130226596777128,33.33333333333333,60.0
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 16777619
    hash = 0x00000001
    for byte in identifier:
        hash = (hash * FNV_PRIME) ^ byte
    return hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 16777619
    hash = 0x00000001
    for byte in identifier:
        hash = (hash * FNV_PRIME) ^ byte
    return hash",31.417028049627127,28.489318277723964,30.33668865762665,36.84210526315789,30.0
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    mTitleView = root.findViewById(R.id.card_title);
    mIconView = root.findViewById(R.id.card_icon);
    return root;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    mTitleView = root.findViewById(R.id.card_title);
    mIconView = root.findViewById(R.id.card_icon);
    return root;
}",68.22214014568489,46.36073105606444,49.591802590648214,81.48148148148148,95.45454545454545
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.icon);
        buttonView.setOnClickListener(buttonContent.listener);
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.icon);
        buttonView.setOnClickListener(buttonContent.listener);
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}",78.818330173457,81.37489370974956,82.28552375827198,51.61290322580645,100.0
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
        if (mDescriptiveTextOnlyLayoutView == null) {
            mDescriptiveTextOnlyLayoutView = mStub.inflate();
            mTitle = (TextView) mDescriptiveTextOnlyLayoutView.findViewById(R.id.title);
            mSubtitle = (TextView) mDescriptiveTextOnlyLayoutView.findViewById(R.id.subtitle);
            mImage = (ImageView) mDescriptiveTextOnlyLayoutView.findViewById(R.id.image);
        }
        return mDescriptiveTextOnlyLayoutView;
    }","protected final View getDescriptiveTextOnlyLayoutView() {
        if (mDescriptiveTextOnlyLayoutView == null) {
            mDescriptiveTextOnlyLayoutView = mStub.inflate();
            mTitle = (TextView) mDescriptiveTextOnlyLayoutView.findViewById(R.id.title);
            mSubtitle = (TextView) mDescriptiveTextOnlyLayoutView.findViewById(R.id.subtitle);
            mImage = (ImageView) mDescriptiveTextOnlyLayoutView.findViewById(R.id.image);
        }
        return mDescriptiveTextOnlyLayoutView;
    }",41.647972841058525,32.74674028356288,35.58311899510974,65.9090909090909,32.35294117647059
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    Runnable runnable = () -> {
        mHeaderView.getRootView().setVisibility(View.VISIBLE);
        mHeaderView.setTitle(header.getTitle());
        mHeaderView.setIcon(header.getIcon());
    };
    UiThreadUtil.runOnMainThread(runnable);
}","public void updateHeaderView(CardHeader header) {
    runOnUiThread(() -> {
        mHeaderView.getRootView().setVisibility(View.VISIBLE);
        mHeaderView.setTitle(header.getTitle());
        mHeaderView.setIcon(header.getIcon());
    });
}",59.08246442178471,37.06866381788037,38.54690815497274,60.71428571428571,100.0
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = mTextSnippetStub.inflate();
        mTitleTextView = mTextBlockLayoutView.findViewById(R.id.title_text);
        mBodyTextView = mTextBlockLayoutView.findViewById(R.id.body_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = mTextSnippetStub.inflate();
        mTitleTextView = mTextBlockLayoutView.findViewById(R.id.title_text);
        mBodyTextView = mTextBlockLayoutView.findViewById(R.id.body_text);
    }
    return mTextBlockLayoutView;
}",51.9052052648953,43.36842528258257,45.21830486790775,78.125,40.909090909090914
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(MediaBrowserService.SERVICE_INTERFACE);
        intent.setPackage(packageName);
        List<ResolveInfo> resolveInfos = packageManager.queryIntentServices(intent, null, 0);
        if (resolveInfos != null && !resolveInfos.isEmpty()) {
            return resolveInfos.get(0).serviceInfo.componentName;
        }
        return null;
    }","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(MediaBrowserService.SERVICE_INTERFACE);
        intent.setPackage(packageName);
        List<ResolveInfo> resolveInfos = packageManager.queryIntentServices(intent, null, 0);
        if (resolveInfos != null && !resolveInfos.isEmpty()) {
            return resolveInfos.get(0).serviceInfo.componentName;
        }
        return null;
    }",36.16435545893466,27.102143361475328,29.01080408073229,52.83018867924528,35.714285714285715
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
            (componentAppType & AppTypes.MEDIA) != 0 &&
            customMediaComponents.contains(componentName.getClassName())) {
        return false;
    }
    return true;
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
            (componentAppType & AppTypes.MEDIA) != 0 &&
            customMediaComponents.contains(componentName.getClassName())) {
        return false;
    }
    return true;
}",61.86418183533259,48.03984716340054,50.21053097158059,63.49206349206349,85.71428571428571
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
    try {
        carMediaManager.selectMediaSource(componentName);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(""CarMedia"", ""Car service unavailable"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
    try {
        carMediaManager.selectMediaSource(componentName);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(""CarMedia"", ""Car service unavailable"", e);
    }
}",75.18713502777621,72.30717871694607,73.60265171673943,54.83870967741935,100.0
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        if (carPackageManager == null) {
            Log.e(TAG, ""CarPackageManager is null, cannot check distraction optimization."");
            return false;
        }
        try {
            return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        } catch (CarNotConnectedException e) {
            Log.e(TAG, ""CarNotConnectedException while checking distraction optimization: "" + e);
            return false;
        }
    }","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        if (carPackageManager == null) {
            Log.e(TAG, ""CarPackageManager is null, cannot check distraction optimization."");
            return false;
        }
        try {
            return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        } catch (CarNotConnectedException e) {
            Log.e(TAG, ""CarNotConnectedException while checking distraction optimization: "" + e);
            return false;
        }
    }",48.66012345781836,28.367305545967536,32.03673508333547,41.37931034482759,92.85714285714286
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent mapsIntent = null;
        if (mResolvableMapIntents != null) {
            for (Intent intent : mResolvableMapIntents) {
                if (intent.resolveActivity(context.getPackageManager()) != null) {
                    mapsIntent = intent;
                    break;
                }
            }
        }
        if (mapsIntent == null) {
            mapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=1""));
        }
        return mapsIntent;
    }","private Intent getMapsIntent() {
        Intent mapsIntent = null;
        if (mResolvableMapIntents != null) {
            for (Intent intent : mResolvableMapIntents) {
                if (intent.resolveActivity(context.getPackageManager()) != null) {
                    mapsIntent = intent;
                    break;
                }
            }
        }
        if (mapsIntent == null) {
            mapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=1""));
        }
        return mapsIntent;
    }",14.54034547159631,8.301451556450811,9.816640286644386,25.757575757575758,14.285714285714285
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArrayList<>();
        FragmentTransaction ft = mFragmentManager.beginTransaction();
        for (String className : mConfiguredCardClasses) {
            try {
                Class<?> clazz = Class.forName(className);
                HomeCardModule module = (HomeCardModule) clazz.newInstance();
                mHomeCardModules.add(module);
                ft.add(R.id.home_card_container, module.getCardView());
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
                Log.e(TAG, ""Failed to instantiate card module: "" + className, e);
            }
        }
        if (!mHomeCardModules.isEmpty()) {
            ft.commit();
        }
    }
}","private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArrayList<>();
        FragmentTransaction ft = mFragmentManager.beginTransaction();
        for (String className : mConfiguredCardClasses) {
            try {
                Class<?> clazz = Class.forName(className);
                HomeCardModule module = (HomeCardModule) clazz.newInstance();
                mHomeCardModules.add(module);
                ft.add(R.id.home_card_container, module.getCardView());
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
                Log.e(TAG, ""Failed to instantiate card module: "" + className, e);
            }
        }
        if (!mHomeCardModules.isEmpty()) {
            ft.commit();
        }
    }
}",31.464336619293608,16.344459850164995,18.963436077558903,50.54945054945055,40.0
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
            if (taskAppearedInfo.isMultiWindow()) {
                ActivityTaskManager.get().removeTask(taskAppearedInfo.taskId);
                Slog.w(""ActivityManager"", ""Removing dangling task: "" + taskAppearedInfo.taskId);
            }
        }
    }","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
            if (taskAppearedInfo.isMultiWindow()) {
                try {
                    ActivityTaskManager.get().removeTask(taskAppearedInfo.taskId);
                    Slog.w(""ActivityManager"", ""Removing dangling task: "" + taskAppearedInfo.taskId);
                } catch (Exception e) {
                    Slog.e(""ActivityManager"", ""Failed to remove task "" + taskAppearedInfo.taskId, e);
                }
            }
        }
    }",37.91048461883679,26.729913249846348,30.46758078105638,44.44444444444444,50.0
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    Integer mode = (Integer) getIntent().getParcelableExtra(Constants.MODE_KEY);
    if (mode != null) {
        String title = getResources().getString(ModeConstants.getStringId(mode));
        setTitle(title);
        if (mToolbar != null) {
            mToolbar.setTitle(title);
        }
    }
}","private void updateMode() {
    Integer mode = (Integer) getIntent().getParcelableExtra(Constants.MODE_KEY);
    if (mode != null) {
        String title = getResources().getString(ModeConstants.getStringId(mode));
        setTitle(title);
        if (mToolbar != null) {
            mToolbar.setTitle(title);
        }
    }
}",30.702861072612244,9.25159978069645,31.02016197006999,38.095238095238095,44.44444444444444
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = (Chronometer) findViewById(R.id.chronometer);
        mSeparator = findViewById(R.id.separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = (Chronometer) findViewById(R.id.chronometer);
        mSeparator = findViewById(R.id.separator);
    }
    return mChronometer;
}",62.96020414939469,61.706889119700236,63.21085055480163,42.30769230769231,84.61538461538461
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        mMediaLayoutView = mMediaStub.inflate();
        mTitleView = mMediaLayoutView.findViewById(R.id.title);
        mSubtitleView = mMediaLayoutView.findViewById(R.id.subtitle);
        mPlaybackControlsBar = new MediaPlaybackControlsBar(getContext());
        ((ViewGroup) mMediaLayoutView).addView(mPlaybackControlsBar);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        mMediaLayoutView = mMediaStub.inflate();
        mTitleView = mMediaLayoutView.findViewById(R.id.title);
        mSubtitleView = mMediaLayoutView.findViewById(R.id.subtitle);
        mPlaybackControlsBar = new MediaPlaybackControlsBar(getContext());
        ((ViewGroup) mMediaLayoutView).addView(mPlaybackControlsBar);
    }
    return mMediaLayoutView;
}",46.5041898930187,35.36288740732289,37.1815385641104,72.09302325581395,41.37931034482759
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    if (image == null || mCardSize == null) {
        return;
    }

    int cardSize = Math.max(mCardSize.width(), mCardSize.height());
    Bitmap scaledBitmap = Bitmap.createBitmap(cardSize, cardSize, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(scaledBitmap);
    Paint paint = new Paint();
    paint.setFilterBitmap(true);
    image.draw(canvas);

    Bitmap blurredBitmap = Bitmap.createBitmap(scaledBitmap.getWidth(), scaledBitmap.getHeight(), Bitmap.Config.ARGB_8888);
    Blur.blur(scaledBitmap, blurredBitmap);

    mCardBackground.setImageBitmap(blurredBitmap);
    mCardBackground.setVisibility(View.VISIBLE);
}","private void updateBackgroundImage(Drawable image) {
    if (image == null || mCardSize == null) {
        return;
    }

    int cardSize = Math.max(mCardSize.width(), mCardSize.height());
    Bitmap scaledBitmap = Bitmap.createBitmap(cardSize, cardSize, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(scaledBitmap);
    Paint paint = new Paint();
    paint.setFilterBitmap(true);
    image.draw(canvas);

    Bitmap blurredBitmap = Bitmap.createBitmap(scaledBitmap.getWidth(), scaledBitmap.getHeight(), Bitmap.Config.ARGB_8888);
    Blur.blur(scaledBitmap, blurredBitmap);

    mCardBackground.setImageBitmap(blurredBitmap);
    mCardBackground.setVisibility(View.VISIBLE);
}",34.814824948264416,15.511764393209237,18.761780414093444,34.61538461538461,70.37037037037037
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mMediaLayout.setVisibility(View.VISIBLE);
    mMediaLayout.setTitle(title);
    mMediaLayout.setSubtitle(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mMediaLayout.setVisibility(View.VISIBLE);
    mMediaLayout.setTitle(title);
    mMediaLayout.setSubtitle(subtitle);
}",70.842490254843,59.004687263928076,61.207379018601806,63.1578947368421,100.0
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        mChronometer.setBase(content.getStartTime());
        mChronometer.start();
        mSeparator.setVisibility(View.VISIBLE);
        mChronometer.setVisibility(View.VISIBLE);
    } else {
        mSeparator.setVisibility(View.GONE);
        mChronometer.setVisibility(View.GONE);
        mChronometer.stop();
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        mChronometer.setBase(content.getStartTime());
        mChronometer.start();
        mSeparator.setVisibility(View.VISIBLE);
        mChronometer.setVisibility(View.VISIBLE);
    } else {
        mSeparator.setVisibility(View.GONE);
        mChronometer.setVisibility(View.GONE);
        mChronometer.stop();
    }
}",66.3943967566714,50.41350242010638,55.164084606579166,60.0,100.0
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(this);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(this);
    }
}",74.36357747171822,79.10665071754359,79.88612070779082,38.46153846153847,100.0
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
        mCurrentCall = null;
        mCardContent = null;
        mPresenter.updateModel(null);
        call.unregisterCallback(this);
    }","public void onCallRemoved(Call call) {
        mCurrentCall = null;
        mCardContent = null;
        mPresenter.updateModel(null);
        call.unregisterCallback(this);
    }",59.726826099340144,50.447645233138175,52.745373449936686,50.0,85.71428571428571
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(
            PhoneNumberFormatter.format(number),
            CallDetailsView.getCallDetails(number));
    view.addControls(CallControls.getCallControls());
    mPresenter.onModelUpdated(view);
}","void updateModelWithPhoneNumber(String number) {
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(
            PhoneNumberFormatter.format(number),
            CallDetailsView.getCallDetails(number));
    view.addControls(CallControls.getCallControls());
    mPresenter.onModelUpdated(view);
}",22.18312575048249,13.32718529534493,15.6830954843628,22.22222222222222,37.5
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","    mEndCallButton = findViewById(R.id.end_call_button);
    mEndCallButton.setIcon(R.drawable.ic_end_call);
    mEndCallButton.setOnClickListener(v -> disconnectCall());

    mDialpadButton = findViewById(R.id.dialpad_button);
    mDialpadButton.setIcon(R.drawable.ic_dialpad);
    mDialpadButton.setOnClickListener(v -> dialpadClicked());

    mMuteButton = findViewById(R.id.mute_button);
    mMuteButton.setIcon(R.drawable.ic_mute);
    mMuteButton.setOnClickListener(v -> toggleMute());
}","private void initializeAudioControls() {
    mEndCallButton = findViewById(R.id.end_call_button);
    mEndCallButton.setIcon(R.drawable.ic_end_call);
    mEndCallButton.setOnClickListener(v -> disconnectCall());

    mDialpadButton = findViewById(R.id.dialpad_button);
    mDialpadButton.setIcon(R.drawable.ic_dialpad);
    mDialpadButton.setOnClickListener(v -> dialpadClicked());

    mMuteButton = findViewById(R.id.mute_button);
    mMuteButton.setIcon(R.drawable.ic_mute);
    mMuteButton.setOnClickListener(v -> toggleMute());
}",27.518557904439888,11.464265557621326,11.577880498640921,34.090909090909086,52.94117647058824
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (isActive()) {
        _listener.callback(AVAILABLE, _subscription);
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (isActive()) {
        _listener.callback(AVAILABLE, _subscription);
    }
}",64.82816292811209,50.31747626530137,61.16908849062524,47.82608695652174,100.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(join_mutex);
    if (conn_active(conn) && join_threads.find(t.id()) == join_threads.end()) {
        join_threads[t.id()] = conn;
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(join_mutex);
    if (conn_active(conn) && join_threads.find(t.id()) == join_threads.end()) {
        join_threads[t.id()] = conn;
    }
}",28.415452068375107,16.099918345222285,20.238786773972944,42.028985507246375,35.294117647058826
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        dbus_connection_remove_watch(connection_, libdbusWatch);
        free(libdbusWatch);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        dbus_connection_remove_watch(connection_, libdbusWatch);
        ::DBusWatch* watch = reinterpret_cast<::DBusWatch*>(libdbusWatch);
        delete watch;
    }
}",26.458245827574196,15.452891622169332,19.92554623358199,25.0,45.45454545454545
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    auto it = watchWrappers.find(libdbusWatch);
    if (it != watchWrappers.end()) {
        if (it->second->ready) {
            dbus_connection_stop_watch(connection_, libdbusWatch);
            it->second->ready = false;
        } else {
            dbus_connection_start_watch(connection_, libdbusWatch);
            it->second->ready = true;
        }
    } else {
        WatchWrapper wrapper;
        wrapper.watch = libdbusWatch;
        wrapper.ready = false;
        watchWrappers[libdbusWatch] = wrapper;
        dbus_connection_start_watch(connection_, libdbusWatch);
        watchWrappers[libdbusWatch].ready = true;
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    auto it = watchWrappers.find(libdbusWatch);
    if (it != watchWrappers.end()) {
        if (it->second.ready) {
            dbus_connection_stop_watch(connection_, libdbusWatch);
            it->second.ready = false;
        } else {
            dbus_connection_start_watch(connection_, libdbusWatch);
            it->second.ready = true;
        }
    } else {
        WatchWrapper wrapper;
        wrapper.watch = libdbusWatch;
        wrapper.ready = false;
        watchWrappers[libdbusWatch] = wrapper;
        dbus_connection_start_watch(connection_, libdbusWatch);
        watchWrappers[libdbusWatch].ready = true;
    }
}",29.77433758082687,14.91225378234035,15.995508351378948,34.34343434343434,53.84615384615385
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        static std::mutex mutex;
        std::lock_guard<std::mutex> lock(mutex);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>();
        }
    }
    return instance;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        static std::mutex mutex;
        std::lock_guard<std::mutex> lock(mutex);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>();
        }
    }
    return instance;
}",48.45449104474903,15.553986407412197,21.53320854081468,69.23076923076923,87.5
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    auto it = serviceNameCounts_.find(serviceName);
    if (it == serviceNameCounts_.end()) {
        return false;
    }

    it->second--;
    if (it->second == 0) {
        serviceNameCounts_.erase(it);
        dbus_string_unref(dbusServiceName_);
        dbusServiceName_ = nullptr;
    }

    return true;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    auto it = serviceNameCounts_.find(serviceName);
    if (it == serviceNameCounts_.end()) {
        return false;
    }

    it->second--;
    if (it->second == 0) {
        serviceNameCounts_.erase(it);
        if (dbusServiceName_) {
            dbus_string_unref(dbusServiceName_);
            dbusServiceName_ = nullptr;
        }
    }

    return true;
}",30.58408931690952,12.024902158224924,13.882883680841719,51.42857142857142,45.0
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (!_libdbusPendingCall) {
        return DBusMessage();
    }

    DBusMessage result;
    result.set_message(dbus_pending_call_get_message(_libdbusPendingCall));
    dbus_pending_call_steal_reply(_libdbusPendingCall);
    return result;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (!_libdbusPendingCall) {
        return DBusMessage();
    }

    DBusMessage result;
    DBusMessage* message = dbus_pending_call_get_message(_libdbusPendingCall);
    if (message) {
        result.set_message(message);
        dbus_pending_call_steal_reply(_libdbusPendingCall);
    }
    return result;
}",40.44706629085123,17.062246061517726,17.802942178810294,43.58974358974359,83.33333333333334
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::vector<AsyncHandler*> handlersToDelete = std::move(asyncHandlers_);
    asyncHandlers_.clear();
    for (AsyncHandler* handler : handlersToDelete) {
        delete handler;
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::vector<AsyncHandler*> handlersToDelete = std::move(asyncHandlers_);
    asyncHandlers_.clear();
    for (AsyncHandler* handler : handlersToDelete) {
        delete handler;
    }
}",23.159861753569423,4.661542148568061,5.494911668430703,40.816326530612244,41.66666666666667
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex_);
    for (auto& signalHandler : signalHandlers_) {
        signalHandler.onSpecificError(SUCCESS, signalHandler.tag_);
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex_);
    for (auto& signalHandler : signalHandlers_) {
        signalHandler.onSpecificError(SUCCESS, signalHandler.tag_);
    }
}",16.782925780017983,3.7665624286663175,5.212966778362145,45.65217391304348,12.5
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(connectionMutex_);
    connections_.erase(_connectionId);
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(connectionMutex_);
    auto it = connections_.find(_connectionId);
    if (it != connections_.end()) {
        connections_.erase(it);
    }
}",64.2130571570321,34.11488281065382,35.237345817474555,100.0,87.5
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.member_name_ == ""InterfacesAdded"") {
        interfacesAddedHandler(dbusMessage);
    } else if (dbusMessage.member_name_ == ""InterfacesRemoved"") {
        interfacesRemovedHandler(dbusMessage);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.member_name_ == ""InterfacesAdded"") {
        interfacesAddedHandler(dbusMessage);
    } else if (dbusMessage.member_name_ == ""InterfacesRemoved"") {
        interfacesRemovedHandler(dbusMessage);
    }
}",47.81387645409231,32.28213880040185,42.09025013285051,45.45454545454545,71.42857142857143
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _availableServiceInstances.clear();
    DBusError error;
    dbus_error_init(&error);

    std::vector<dbus_uint32_t> serviceNames;
    dbus_uint32_t numServiceNames;
    if (dbus_connection_list_names(connection_, DBUS_NAME_FLAG_NONE, &numServiceNames, &serviceNames, &error) != DBUS_ERROR_NONE) {
        _status = CommonAPI::CallStatus::DBUS_ERROR;
        COMMONAPI_ERROR(std::string(__FUNCTION__), error.message);
        dbus_error_free(&error);
        return;
    }

    for (dbus_uint32_t i = 0; i < numServiceNames; ++i) {
        dbus_uint32_t serviceName = serviceNames[i];
        std::string serviceNameStr(dbus_get_bus_name(connection_, serviceName));

        DBusAddress address;
        if (address.createFromServiceName(serviceNameStr)) {
            _availableServiceInstances.push_back(address);
        }
    }

    _status = CommonAPI::CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _availableServiceInstances.clear();
    DBusError error;
    dbus_error_init(&error);

    std::vector<dbus_uint32_t> serviceNames;
    dbus_uint32_t numServiceNames;
    if (dbus_connection_list_names(connection_, DBUS_NAME_FLAG_NONE, &numServiceNames, &serviceNames, &error) != DBUS_ERROR_NONE) {
        _status = CommonAPI::CallStatus::DBUS_ERROR;
        COMMONAPI_ERROR(std::string(__FUNCTION__), error.message);
        dbus_error_free(&error);
        return;
    }

    for (dbus_uint32_t i = 0; i < numServiceNames; ++i) {
        dbus_uint32_t serviceName = serviceNames[i];
        std::string serviceNameStr(dbus_get_bus_name(connection_, serviceName));

        DBusAddress address;
        if (address.createFromServiceName(serviceNameStr)) {
            _availableServiceInstances.push_back(address);
        }
    }

    _status = CommonAPI::CallStatus::SUCCESS;
}",49.208885828943636,8.002649231807347,27.793933045006163,68.18181818181817,92.85714285714286
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::kNotCalled;
    DBusAddress dbusAddress = translateInstanceIdToDbusAddress(_instance);
    if (!dbusAddress.isValid()) {
        _callStatus = CallStatus::kFailed;
        return;
    }

    AvailabilityStatus status = queryRegistry(dbusAddress);
    _availabilityStatus = status;
    _callStatus = CallStatus::kSucceeded;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::kNotCalled;
    DBusAddress dbusAddress = translateInstanceIdToDbusAddress(_instance);
    if (!dbusAddress.isValid()) {
        _callStatus = CallStatus::kFailed;
        return;
    }

    AvailabilityStatus status = queryRegistry(dbusAddress);
    _availabilityStatus = status;
    _callStatus = CallStatus::kSucceeded;
}",36.939283988084064,21.879903490242977,22.282461220263215,64.70588235294117,38.88888888888889
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusMessageIterator args(_message);
    if (args.type() != DBUS_TYPE_ARRAY) {
        return;
    }

    DBusMessageIterator array_args = args.child();
    while (array_args.has_next()) {
        DBusMessageIterator arg = array_args.child();
        if (arg.type() != DBUS_TYPE_STRING) {
            array_args.next();
            continue;
        }
        std::string object_path = arg.string();
        array_args.next();
        if (arg.type() != DBUS_TYPE_STRING) {
            array_args.next();
            continue;
        }
        std::string interface_name = arg.string();

        if (observedInterfaceName_ == interface_name) {
            listeners_->notifyListeners(observedObjectPath_, observedInterfaceName_, InstanceAvailabilityStatus::NOT_AVAILABLE);
        }
        array_args.next();
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusMessageIterator args(_message);
    if (args.type() != DBUS_TYPE_ARRAY) {
        return;
    }

    DBusMessageIterator array_args = args.child();
    while (array_args.has_next()) {
        DBusMessageIterator arg = array_args.child();
        if (arg.type() != DBUS_TYPE_STRING) {
            array_args.next();
            continue;
        }
        std::string object_path = arg.string();
        array_args.next();
        if (arg.type() != DBUS_TYPE_STRING) {
            array_args.next();
            continue;
        }
        std::string interface_name = arg.string();

        if (observedInterfaceName_ == interface_name) {
            listeners_->notifyListeners(observedObjectPath_, observedInterfaceName_, InstanceAvailabilityStatus::NOT_AVAILABLE);
        }
        array_args.next();
    }
}",30.46369273327193,7.451844242375662,7.992670280455657,41.02564102564102,65.38461538461539
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::string address = ""/"" + _objectPath + ""/"" + _interfaceName;
    listeners_.notifyListeners(address, _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::string address = ""/"" + _objectPath + ""/"" + _interfaceName;
    listeners_.notifyListeners(address, _availability);
}",48.85523856423774,36.51934656347456,39.832871551569504,46.34146341463415,72.72727272727273
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    eventLoop->postTask([this, _listener, _subscription]() {
        listenerAdded(_listener, _subscription);
    });
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    eventLoop->queueTask([this, _listener, _subscription]() {
        listenerAdded(_listener, _subscription);
    });
}",44.312962988230815,37.684684658398965,39.567167294524296,50.0,50.0
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                    [&](const Listener& l) {
                                        return l.subscription == _subscription;
                                    }),
                     listeners_.end());
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                    [&](const Listener& l) { return l.subscription == _subscription; }),
                     listeners_.end());
}",36.95361660746069,24.874756063607702,25.915900842425525,54.166666666666664,42.857142857142854
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    connection()->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    if (connection()) {
        connection()->addSignalStateHandler(_handler, _subscription);
    }
}",60.39042381856616,31.61487584488943,43.28015276270854,66.66666666666666,100.0
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    std::vector<std::string> addresses;
    for (const auto& address : _availableServiceInstances) {
        addresses.push_back(address.ToString());
    }
    _call(_status, addresses);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    std::vector<std::string> addresses;
    for (const auto& address : _availableServiceInstances) {
        addresses.push_back(address.ToString());
    }
    _call(_status, addresses);
}",59.06061552583276,38.25253840986218,39.10103480457998,75.55555555555556,83.33333333333334
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        return false;
    }

    const std::string& path = dbusMessage.getPath();
    const std::string& interface = dbusMessage.getInterface();
    const std::string& member = dbusMessage.getMember();

    auto it = handlers_.find(path);
    if (it != handlers_.end()) {
        auto& handlersForPath = it->second;
        auto it2 = handlersForPath.find(interface);
        if (it2 != handlersForPath.end()) {
            auto& handlersForInterface = it2->second;
            auto it3 = handlersForInterface.find(member);
            if (it3 != handlersForInterface.end()) {
                return it3->second(dbusMessage);
            }
        }
    }

    if (interface == ""org.freedesktop.DBus"" && member == ""Introspect"") {
        handleIntrospectionRequest(dbusMessage);
        return true;
    }

    return false;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        return false;
    }

    const std::string& path = dbusMessage.getPath();
    const std::string& interface = dbusMessage.getInterface();
    const std::string& member = dbusMessage.getMember();

    auto it = handlers_.find(path);
    if (it != handlers_.end()) {
        auto& handlersForPath = it->second;
        auto it2 = handlersForPath.find(interface);
        if (it2 != handlersForPath.end()) {
            auto& handlersForInterface = it2->second;
            auto it3 = handlersForInterface.find(member);
            if (it3 != handlersForInterface.end()) {
                return it3->second(dbusMessage);
            }
        }
    }

    if (interface == ""org.freedesktop.DBus"" && member == ""Introspect"") {
        handleIntrospectionRequest(dbusMessage);
        return true;
    }

    return false;
}",31.421647391894304,7.800254383637402,8.33035062795525,39.285714285714285,70.27027027027027
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (!dbusInterfaceHandler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandler == NULL"");
        return false;
    }

    auto it = _interfaceHandlers.find(dbusInterfaceHandlerPath);
    if (it != _interfaceHandlers.end()) {
        if (dbusInterfaceHandlerPath.interface() != ""org.freedesktop.DBus.Introspectable"" &&
            dbusInterfaceHandlerPath.interface() != ""org.freedesktop.ObjectManager"" &&
            dbusInterfaceHandlerPath.interface() != ""org.freedesktop.Properties"") {
            return false;
        }
    }

    _interfaceHandlers[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (!dbusInterfaceHandler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandler == NULL"");
        return false;
    }

    auto it = _interfaceHandlers.find(dbusInterfaceHandlerPath);
    if (it != _interfaceHandlers.end()) {
        if (dbusInterfaceHandlerPath.interface() != ""org.freedesktop.DBus.Introspectable"" &&
            dbusInterfaceHandlerPath.interface() != ""org.freedesktop.ObjectManager"" &&
            dbusInterfaceHandlerPath.interface() != ""org.freedesktop.Properties"") {
            return false;
        } else {
            if (it->second != dbusInterfaceHandler) {
                return false;
            }
        }
    }

    _interfaceHandlers[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}",37.99508672284823,19.131983020719957,20.94360196591104,50.0,61.904761904761905
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }
    registeredObjectsTable_[ifpath] = handler;
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }
    registeredObjectsTable_[ifpath] = handler;
    return true;
}",20.161042832259586,7.818484965802054,17.066650218657976,39.75903614457831,16.0
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",74.25924108023764,77.4983858032256,78.89686728777843,81.81818181818183,58.82352941176471
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(data[0], UDS_NRC_INCORRECT_LENGTH);
    return;
  }

  enum UDS_ResetSubFunction reset_type = data[1];

  if (reset_type != UDS_RESET_HARD) {
    send_negative_response(data[0], UDS_NRC_UNSUPPORTED_REQUEST);
    return;
  }

  send_positive_response(data[0]);
  system_reboot();
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(data[0], UDS_NRC_INCORRECT_LENGTH);
    return;
  }

  enum UDS_ResetSubFunction reset_type = data[1];

  if (reset_type != UDS_RESET_HARD) {
    send_negative_response(data[0], UDS_NRC_UNSUPPORTED_REQUEST);
    return;
  }

  send_positive_response(data[0]);
  system_reboot();
}",44.06090409290486,40.37182746174576,41.29814549902099,27.906976744186046,66.66666666666666
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD_RESPONSE, 0x00, 0xD2, 0x00};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD_RESPONSE, 0x00, 0xD2, 0x00};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",61.13832575651259,52.074360452844424,57.895609239872606,81.25,53.333333333333336
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, block_sequence_counter};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, block_sequence_counter};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",74.68664784376332,78.03288795169722,79.53723283512079,82.35294117647058,58.82352941176471
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t tx_data[] = {UDS_RC_POSITIVE_RESPONSE, UDS_RC_TYPE, (uint8_t)(routine_id >> 8), (uint8_t)routine_id, result};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t tx_data[] = {UDS_RC_POSITIVE_RESPONSE, UDS_RC_TYPE, (uint8_t)(routine_id >> 8), (uint8_t)routine_id, result};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",68.97832228537153,65.73726869886852,68.2529435195407,76.92307692307693,65.0
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_EXIT_POSITIVE_RESPONSE};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_EXIT_POSITIVE_RESPONSE};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",72.6615796455045,76.93719648315638,78.55760694734649,81.81818181818183,53.333333333333336
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (uint8_t i = 0; i < ARRAY_SIZE(id_mapping); ++i) {
    if (id_mapping[i].can_id == can_id) {
      return i;
    }
  }
  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (uint8_t i = 0; i < ARRAY_SIZE(id_mapping); ++i) {
    if (id_mapping[i].can_id == can_id) {
      return i;
    }
  }
  return 0xff;
}",73.13873539564125,67.13783850074478,68.274245938963,57.14285714285714,100.0
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  if (!dev) {
    return;
  }

  if (filter_id == -1) {
    for (int i = 0; i < ARRAY_SIZE(dev->lin2can->rx_filters); i++) {
      dev->lin2can->rx_filters[i].cb = NULL;
    }
  } else if (filter_id >= 0 && filter_id < ARRAY_SIZE(dev->lin2can->rx_filters)) {
    dev->lin2can->rx_filters[filter_id].cb = NULL;
  }
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  if (!dev) {
    return;
  }

  if (filter_id == -1) {
    for (int i = 0; i < ARRAY_SIZE(dev->lin2can->rx_filters); i++) {
      dev->lin2can->rx_filters[i].cb = NULL;
    }
  } else if (filter_id >= 0 && filter_id < ARRAY_SIZE(dev->lin2can->rx_filters)) {
    dev->lin2can->rx_filters[filter_id].cb = NULL;
  }
}",44.32737412593834,42.374113937547634,46.21902645854527,45.23809523809524,43.47826086956522
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  struct lin_tx_req *req = user_data;
  if (frame) {
    req->data = frame->data;
    req->len = frame->len;
    req->cb = frame->cb;
    return true;
  }
  return false;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  struct lin_tx_req *req = user_data;
  if (frame) {
    req->data = frame->data;
    req->len = frame->len;
    req->cb = frame->cb;
    return true;
  }
  return false;
}",30.57338385106645,17.235382866610188,20.4029801238625,39.6551724137931,45.0
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  uint8_t index = (frame->data[0] >> 6) & 0x03;
  uint32_t can_id = can_id_map[index];
  uint8_t can_data[frame->data_len];
  for (int i = 0; i < frame->data_len; ++i) {
    can_data[i] = frame->data[i] & 0x3F;
  }
  can_frame_t can_frame = { .id = can_id, .dlc = frame->data_len, .data = can_data };
  can_handler(can_frame);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  uint8_t index = (frame->data[0] >> 6) & 0x03;
  uint32_t can_id = can_id_map[index];
  uint8_t can_data[frame->data_len];
  for (int i = 0; i < frame->data_len; ++i) {
    can_data[i] = frame->data[i] & 0x3F;
  }
  can_frame_t can_frame = { .id = can_id, .dlc = frame->data_len, .data = can_data };
  can_handler(can_frame);
}",30.288742868586375,14.576414907561237,15.601545072531408,45.97701149425287,45.0
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
  int ret;

  ret = gpio_config(dev->config->oe_gpio, GPIO_OUTPUT);
  if (ret < 0) {
    LOG_ERR(""Failed to configure OE GPIO: %d\n"", ret);
    return ret;
  }

  ret = hv_shield_write_zero(dev);
  if (ret < 0) {
    LOG_ERR(""Failed to write zero to HV shield registers: %d\n"", ret);
    return ret;
  }

  ret = gpio_set(dev->config->oe_gpio, 1);
  if (ret < 0) {
    LOG_ERR(""Failed to set OE pin high: %d\n"", ret);
    return ret;
  }

  return 0;
}","static int hv_shield_init(const struct device* dev) {
  int ret;

  ret = gpio_config(dev->config->oe_gpio, GPIO_OUTPUT);
  if (ret < 0) {
    LOG_ERR(""Failed to configure OE GPIO: %d\n"", ret);
    return ret;
  }

  ret = hv_shield_write_zero(dev);
  if (ret < 0) {
    LOG_ERR(""Failed to write zero to HV shield registers: %d\n"", ret);
    return ret;
  }

  ret = gpio_set(dev->config->oe_gpio, 1);
  if (ret < 0) {
    LOG_ERR(""Failed to set OE pin high: %d\n"", ret);
    return ret;
  }

  return 0;
}",23.956011881352616,11.393019446841574,12.71527305285593,36.231884057971016,35.483870967741936
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
  if (dac > 1) {
    return -EINVAL;
  }
  hvs_dac_gains[dac] = gain;
  hvs_update_config(dev);
  return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
  if (dac > 1) {
    return -EINVAL;
  }
  hvs_dac_gains[dac] = gain;
  hvs_update_config(dev);
  return 0;
}",37.752640102876136,34.33427207619715,39.642795512340896,45.45454545454545,31.57894736842105
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
  if (index > 31) {
    return -EINVAL;
  }

  uint8_t reg_index = (index >> 4) | ((index & 0x0F) << 4);
  uint32_t reg_value = hvs_reg_cache[reg_index];

  if (enable) {
    reg_value |= (1 << (index & 0x0F));
  } else {
    reg_value &= ~(1 << (index & 0x0F));
  }

  hvs_reg_cache[reg_index] = reg_value;
  hvs_write_reg(dev, reg_index, reg_value);

  return 0;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
  if (index > 31) {
    return -EINVAL;
  }

  uint8_t reg_index = (index >> 4) | ((index & 0x0F) << 4);
  uint32_t reg_value = hvs_reg_cache[reg_index];

  if (enable) {
    reg_value |= (1 << (index & 0x0F));
  } else {
    reg_value &= ~(1 << (index & 0x0F));
  }

  hvs_reg_cache[reg_index] = reg_value;
  hvs_write_reg(dev, reg_index, reg_value);

  return 0;
}",39.986631751812666,30.743220760288985,34.62783454884848,32.075471698113205,62.5
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
  int ret;
  struct can_addr dest_addr = {0};

  dest_addr.std_id = *((uint32_t *)user_data);

  ret = can_send(dev, &dest_addr, frame->data, frame->dlc, 0);

  if (ret == 0) {
    LOG_DBG(""Frame forwarded to destination ID 0x%X\n"", dest_addr.std_id);
  } else {
    LOG_WRN(""Failed to forward frame to destination ID 0x%X\n"", dest_addr.std_id);
  }
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
  int ret;
  struct can_addr dest_addr = {0};

  dest_addr.std_id = *((uint32_t *)user_data);

  ret = can_send(dev, &dest_addr, frame->data, frame->dlc, 0);

  if (ret == 0) {
    LOG_DBG(""Frame forwarded to destination ID 0x%X\n"", dest_addr.std_id);
  } else {
    LOG_WRN(""Failed to forward frame to destination ID 0x%X, error %d\n"", dest_addr.std_id, ret);
  }
}",42.590699033659575,21.1314231582084,29.23137297642989,45.0,75.0
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  int ret;
  for (int i = 0; i < entry_count; i++) {
    ret = can_filter_register(entries[i].source_can_if,
                              entries[i].filter_id,
                              entries[i].filter_mask,
                              entries[i].destination_can_if,
                              entries[i].callback);
    if (ret != CAN_OK) {
      return ret;
    }
  }
  return CAN_OK;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  for (int i = 0; i < entry_count; i++) {
    if (can_filter_register(entries[i].source_can_if,
                              entries[i].filter_id,
                              entries[i].filter_mask,
                              entries[i].destination_can_if,
                              entries[i].callback) != CAN_OK) {
      return -1;
    }
  }
  return 0;
}",39.14510403050754,34.64115176382025,38.52965337422821,41.30434782608695,42.10526315789473
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
  int ret;
  struct can_router_entry *entry, *next;
  __attribute__((section("".can_router_entries"")))
      struct can_router_entry *entries = NULL;

  for (entry = entries; entry != NULL; entry = next) {
    next = entry->next;
    ret = can_router_register(entry);
    if (ret != 0) {
      return -1;
    }
  }

  return 0;
}","static int can_router_sysinit() {
  int ret;
  struct can_router_entry *entry;
  __attribute__((section("".can_router_entries"")))
      struct can_router_entry *entries = NULL;

  for (entry = entries; entry != NULL; entry = entry->next) {
    ret = can_router_register(entry);
    if (ret != 0) {
      return -1;
    }
  }

  return 0;
}",37.10764165701526,16.49662542496744,23.887964191599316,41.37931034482759,66.66666666666666
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
  int ret;
  for (int i = 0; i < 32; i++) {
    if ((mask >> i) & 1) {
      ret = gpio_pin_set_state(port, i, !!(value & (1 << i)));
      if (ret < 0) {
        LOG_ERR(""Error setting pin %d\n"", i);
        return ret;
      }
    }
  }
  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
  int ret;
  for (int i = 0; i < 32; i++) {
    if ((mask >> i) & 1) {
      ret = gpio_pin_set_state(port, i, !!(value & (1 << i)));
      if (ret < 0) {
        LOG_ERR(""Error setting pin %d\n"", i);
        return ret;
      }
    }
  }
  return 0;
}",45.98013856274081,46.5419834110711,47.48287331707598,32.20338983050847,57.692307692307686
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  if (!free_slots) {
    return -EINVAL;
  }

  *free_slots = al_config->max_cb_slots - al_used_cb_slots;
  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  if (!free_slots) {
    return -EINVAL;
  }

  *free_slots = al_config->max_cb_slots - al_used_cb_slots;
  return 0;
}",51.18710011296418,46.09031956486013,48.65808088699657,60.0,50.0
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  for (int i = 0; i < ARRAY_SIZE(incoming_callbacks); i++) {
    if (!incoming_callbacks[i].callback) {
      incoming_callbacks[i].callback = callback;
      incoming_callbacks[i].frame_id = frame_id;
      incoming_callbacks[i].frame_size = frame_size;
      incoming_callbacks[i].user_data = user_data;
      return 0;
    }
  }

  return -ENOMEM;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  for (int i = 0; i < ARRAY_SIZE(incoming_callbacks); i++) {
    if (!incoming_callbacks[i].callback) {
      incoming_callbacks[i].callback = callback;
      incoming_callbacks[i].frame_id = frame_id;
      incoming_callbacks[i].frame_size = frame_size;
      incoming_callbacks[i].user_data = user_data;
      return 0;
    }
  }

  return -ENOMEM;
}",43.59389603269215,46.581864421942214,47.82173091330819,32.35294117647059,47.61904761904761
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  struct al_outgoing_cb_entry *entry = malloc(sizeof(struct al_outgoing_cb_entry));
  if (!entry) {
    return -ENOMEM;
  }

  entry->callback = callback;
  entry->user_data = user_data;

  int index = find_free_outgoing_cb_slot(dev);
  if (index < 0) {
    free(entry);
    return -ENOMEM;
  }

  dev->outgoing_cb[index] = entry;
  dev->outgoing_cb_count++;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  struct al_outgoing_cb_entry *entry = malloc(sizeof(struct al_outgoing_cb_entry));
  if (!entry) {
    return -ENOMEM;
  }

  entry->callback = callback;
  entry->user_data = user_data;
  entry->frame_id = frame_id;
  entry->frame_size = frame_size;

  int index = find_free_outgoing_cb_slot(dev);
  if (index < 0) {
    free(entry);
    return -ENOMEM;
  }

  dev->outgoing_cb[index] = entry;
  dev->outgoing_cb_count++;

  return 0;
}",50.75677511489879,44.679908620718905,48.8233823150667,50.0,59.523809523809526
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(uint8_t table_index) {
  if (table_index >= MAX_LIN_SCHEDULE_TABLES) {
    return -1;
  }

  sem_wait(&lin_scheduler_semaphore);

  current_lin_schedule_table_index = table_index;
  lin_scheduler_entry_pointer = lin_schedule_tables[table_index];

  sem_post(&lin_scheduler_semaphore);
  return 0;
}","int abstract_lin_scheduler_set_active_table(uint8_t table_index) {
  if (table_index >= MAX_LIN_SCHEDULE_TABLES) {
    return -1;
  }

  sem_wait(&lin_scheduler_semaphore);

  current_lin_schedule_table_index = table_index;
  lin_scheduler_entry_pointer = lin_schedule_tables[table_index];

  sem_post(&lin_scheduler_semaphore);
  return 0;
}",17.761280961744518,11.04276072055418,14.739205231687052,5.263157894736842,40.0
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->stopped) {
    return;
  }
  sem_take(&sched->op_complete_sem, OS_WAIT_FOREVER);
  sched->active_schedule_table_index = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->stopped) {
    return;
  }
  sem_take(&sched->op_complete_sem, OS_WAIT_FOREVER);
  sched->active_schedule_table_index = -1;
  sched->stopped = 1;
}",54.92709761424509,24.248545140243575,25.45984531673679,70.0,100.0

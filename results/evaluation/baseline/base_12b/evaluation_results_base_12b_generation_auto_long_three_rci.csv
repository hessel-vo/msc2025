id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype not in cls.datatypes:
        raise ValueError(f""Unsupported datatype: '{datatype}'"")
    validation_function = cls.datatypes[datatype]
    return validation_function(value)","def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype not in cls.datatypes:
        raise ValueError(f""Unsupported datatype: '{datatype}'"")
    validation_function = cls.datatypes[datatype]
    return validation_function(value)",50.54060211830668,35.312971890292765,38.387898121395494,38.46153846153847,90.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        for val in value:
            if not is_xintx(val, signed, bits):
                return False
        return True
    elif isinstance(value, int):
        if signed:
            max_value = 2**(bits - 1) - 1
            min_value = -2**(bits - 1)
            return min_value <= value <= max_value
        else:
            max_value = 2**bits - 1
            return 0 <= value <= max_value
    else:
        return False","def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        for val in value:
            if not is_xintx(val, signed, bits):
                return False
        return True
    elif isinstance(value, int):
        if signed:
            max_value = 2**(bits - 1) - 1
            min_value = -2**(bits - 1)
            return min_value <= value <= max_value
        else:
            max_value = 2**bits - 1
            return 0 <= value <= max_value
    else:
        return False",34.87319971926554,21.591279789109947,22.749223935657064,49.2063492063492,45.94594594594595
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.types:
        if type_def[0] == datatype:
            return type_def
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.types:
        if type_def[0] == datatype:
            return type_def
    return None",72.51558048642302,57.14392512385289,58.84432274776513,74.07407407407408,100.0
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    fqn_namespaced_datatypes: dict[str, str] = {}
    if fqn:
        namespace = fqn.split('.')[0]
        for datatype in _datatypes:
            if datatype.namespace == namespace and datatype.fqn != fqn:
                fqn_namespaced_datatypes[datatype.name] = datatype.fqn
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    fqn_namespaced_datatypes: dict[str, str] = {}
    if fqn:
        namespace = fqn.split('.')[0]
        for datatype in _datatypes:
            if datatype.namespace == namespace and datatype.fqn != fqn:
                fqn_namespaced_datatypes[datatype.name] = datatype.fqn
    return fqn_namespaced_datatypes",36.08982374406708,29.254960527238783,29.45618630088142,37.5,48.148148148148145
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    t = t.strip()
    if t == ""string"":
        return ApiGearType(name=""string"", array=False)
    elif t == ""integer"":
        return ApiGearType(name=""integer"", array=False)
    elif t == ""number"":
        return ApiGearType(name=""number"", array=False)
    elif t == ""boolean"":
        return ApiGearType(name=""boolean"", array=False)
    elif t == ""object"":
        return ApiGearType(name=""object"", array=False)
    elif t == ""array"":
        return ApiGearType(name=""array"", array=True)
    elif t.endswith(""[]""):
        name = t[:-2]
        return ApiGearType(name=name, array=True)
    else:
        return ApiGearType(name=t.replace(""."", ""_""), array=False)","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    t = t.strip()
    if t == ""string"":
        return ApiGearType(name=""string"", array=False)
    elif t == ""integer"":
        return ApiGearType(name=""integer"", array=False)
    elif t == ""number"":
        return ApiGearType(name=""number"", array=False)
    elif t == ""boolean"":
        return ApiGearType(name=""boolean"", array=False)
    elif t == ""object"":
        return ApiGearType(name=""object"", array=False)
    elif t == ""array"":
        return ApiGearType(name=""array"", array=True)
    elif t.endswith(""[]""):
        name = t[:-2]
        return ApiGearType(name=name, array=True)
    else:
        return ApiGearType(name=t.replace(""."", ""_""), array=False)",22.88130350567934,12.516546365386777,13.347852337440843,34.51327433628318,31.147540983606557
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    api_gear_type = datatype_to_api_gear(datatype)
    if api_gear_type is None:
        log.warning(f""Unsupported datatype '{datatype}' for node '{node.name}'"")
        return None
    property = ApiGearProperty(
        name=node.name,
        type=api_gear_type,
        description=node.description,
    )
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    api_gear_type = datatype_to_api_gear(datatype)
    if api_gear_type is None:
        log.warning(f""Unsupported datatype '{datatype}' for node '{node.name}'"")
        return None
    property = ApiGearProperty(
        name=node.name,
        type=api_gear_type,
        description=node.description,
    )
    return property",48.63000278264483,28.200593401025625,30.20830661844259,71.11111111111111,65.0
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

class VSpec:
    def __init__(self, source: Path, prefix: str | None = None):
        self.source = source
        self.prefix = prefix
        self.includes = []

    def resolve_path(self, includes: list[Path]) -> Path:
        for include_dir in includes:
            if self.source.is_relative_to(include_dir):
                return self.source.resolve()
        return self.source.resolve()

def get_vspecs(includes: list[Path], spec: Path, prefix: str | None = None) -> list[VSpec]:
    vspecs: list[VSpec] = []
    vspec = VSpec(spec, prefix)
    vspecs.append(vspec)

    for include in vspec.includes:
        include_spec = include.resolve_path(includes + [vspec.source.parent])
        vspecs.extend(get_vspecs(includes, include_spec, include.prefix))

    return vspecs

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    all_vspecs = []
    for spec_path in specs:
        all_vspecs.extend(get_vspecs(include_dirs, spec_path))

    if not all_vspecs:
        raise ValueError(""No VSpec files loaded successfully."")

    merged_vspec = VSpec(all_vspecs[0].source, all_vspecs[0].prefix)
    merged_vspec.includes = []
    for vspec in all_vspecs:
        merged_vspec.includes.extend(vspec.includes)

    return merged_vspec","from pathlib import Path

class VSpec:
    def __init__(self, source: Path, prefix: str | None = None):
        self.source = source
        self.prefix = prefix
        self.includes = []

    def resolve_path(self, includes: list[Path]) -> Path:
        for include_dir in includes:
            if self.source.is_relative_to(include_dir):
                return self.source.resolve()
        return self.source.resolve()

def get_vspecs(includes: list[Path], spec: Path, prefix: str | None = None) -> list[VSpec]:
    vspecs: list[VSpec] = []
    vspec = VSpec(spec, prefix)
    vspecs.append(vspec)

    for include in vspec.includes:
        include_spec = include.resolve_path(includes + [vspec.source.parent])
        vspecs.extend(get_vspecs(includes, include_spec, include.prefix))

    return vspecs

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    all_vspecs = []
    for spec_path in specs:
        try:
            all_vspecs.extend(get_vspecs(include_dirs, spec_path))
        except Exception as e:
            print(f""Error processing {spec_path}: {e}"")

    if not all_vspecs:
        raise ValueError(""No VSpec files loaded successfully."")

    merged_vspec = VSpec(all_vspecs[0].source, all_vspecs[0].prefix)
    merged_vspec.includes = []
    for vspec in all_vspecs:
        merged_vspec.includes.extend(vspec.includes)

    return merged_vspec",41.16088266839937,14.531846512952754,27.114268139972875,55.55555555555556,67.44186046511628
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if key in base and isinstance(base[key], dict) and isinstance(value, dict):
            deep_update(base[key], value)
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if key in base and isinstance(base[key], dict) and isinstance(value, dict):
            deep_update(base[key], value)
        else:
            base[key] = value",79.6946655476183,72.17897697581664,72.64135188132323,83.33333333333334,90.625
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if not isinstance(v, str):
            return None
        if not v.startswith(""0x""):
            return None
        if len(v) != 10:
            return None
        try:
            int(v[2:], 16)
        except ValueError:
            return None
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if not isinstance(v, str):
            return None
        if not v.startswith(""0x""):
            return None
        if len(v) != 10:
            return None
        try:
            int(v[2:], 16)
        except ValueError:
            return None
    return v",49.34615669771365,32.67949175327448,46.705135037580135,48.0,70.0
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data, fqn)
    try:
        vss_raw.resolve()
    except (ValidationError, ModelError):
        pass
    return vss_raw","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data, fqn)
    try:
        vss_raw.resolve()
    except (ValidationError, ModelError):
        pass
    return vss_raw",43.36209078307601,32.511586471220895,34.27010999441652,40.0,66.66666666666666
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = cls.get_valid_datatypes()
    for value in values:
        if value not in valid_datatypes:
            raise ValueError(f""Invalid datatype: '{value}'"")
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = cls.get_valid_datatypes()
    for value in values:
        if value not in valid_datatypes:
            raise ValueError(f""Invalid datatype: '{value}'"")
    return values",50.359048826755846,34.119147403233605,38.150381237123135,62.5,66.66666666666666
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    result = tree.name
    node_attributes = {attribute: getattr(tree, attribute) for attribute in attributes if hasattr(tree, attribute)}
    if node_attributes:
        result += f"" ({', '.join([f'{k}={v}' for k, v in node_attributes.items()])})""
    if tree.children and len(tree.children) > 0:
        result += ""\n""
        for child in tree.children:
            result += ""  "" + get_rendered_tree(child, attributes) + ""\n""
    return result","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    result = tree.name
    if tree.children and len(tree.children) > 0:
        result += ""\n""
        for child in tree.children:
            result += ""  "" + get_rendered_tree(child, attributes) + ""\n""
    node_attributes = {attribute: getattr(tree, attribute) for attribute in attributes if hasattr(tree, attribute)}
    if node_attributes:
        result += f"" ({', '.join([f'{k}={v}' for k, v in node_attributes.items()])})""
    return result",26.990266128493225,13.380555572172575,17.535974528844843,32.30769230769231,44.73684210526316
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch():
        raise Exception(""Starting node is not a branch"")

    parent = self.parent
    while parent:
        if parent.is_root():
            return parent, depth + 1
        parent = parent.parent

    raise Exception(""No root found"")","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch():
        raise Exception(""Starting node is not a branch"")

    parent = self.parent
    while parent:
        if parent.is_root():
            return parent, depth + 1
        parent = parent.parent

    raise Exception(""No root found"")",40.99100593004377,30.026288740711397,38.542998137358424,37.5,57.89473684210527
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    if self.children:
        for child in self.children:
            if isinstance(child, VSSDataBranch) and child.is_instance:
                return 1 + count_instance_children_depth(child)
    return 0","def count_instance_children_depth(self) -> int:
    if self.children:
        for child in self.children:
            if isinstance(child, VSSDataBranch) and child.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0",62.26267983605531,51.83282721440023,59.329693372057015,52.17391304347826,85.71428571428571
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        parts = node_id.split(""."")
        if len(parts) > 1 and parts[-2] == name:
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if ""."" in node_id:
            parent_name = node_id.rsplit(""."", 1)[1]
            if parent_name == name:
                children_ids.append(node_id)
    return children_ids",59.16321233141956,30.49259527424873,44.591626600449125,73.33333333333333,88.23529411764706
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default",54.28198999477352,44.05262339943716,43.07533657965687,50.0,80.0
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.name == ""signal"":
        fd.write(f""  {tree.name} {{"")
        if add_optional:
            fd.write("" optional"")
        fd.write(""\n"")
        for child in tree.children:
            if child.name == ""uid"":
                fd.write(f""    uint32 {child.name} = 1;"")
                if add_optional:
                    fd.write("" optional"")
                fd.write("";\n"")
            elif child.name == ""timestamp"":
                fd.write(f""    uint64 {child.name} = 2;"")
                if add_optional:
                    fd.write("" optional"")
                fd.write("";\n"")
            elif child.name == ""data"":
                fd.write(f""    {get_data_type(child)} {child.name} = 3;"")
                if add_optional:
                    fd.write("" optional"")
                fd.write("";\n"")
        fd.write(""  }\n"")
    else:
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)

def get_data_type(node: VSSNode) -> str:
    if node.name == ""int8"":
        return ""int32""
    elif node.name == ""uint8"":
        return ""uint32""
    elif node.name == ""int16"":
        return ""int32""
    elif node.name == ""uint16"":
        return ""uint32""
    elif node.name == ""int32"":
        return ""int32""
    elif node.name == ""uint32"":
        return ""uint32""
    elif node.name == ""int64"":
        return ""int64""
    elif node.name == ""uint64"":
        return ""uint64""
    elif node.name == ""float"":
        return ""float""
    elif node.name == ""double"":
        return ""double""
    elif node.name == ""string"":
        return ""string""
    else:
        return ""bytes","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.name == ""signal"":
        fd.write(f""  {tree.name} {{"")
        if add_optional:
            fd.write("" optional"")
        fd.write(""\n"")
        for child in tree.children:
            if child.name == ""uid"":
                fd.write(f""    uint32 {child.name} = 1;"")
                if add_optional:
                    fd.write("" optional"")
                fd.write("";\n"")
            elif child.name == ""timestamp"":
                fd.write(f""    uint64 {child.name} = 2;"")
                if add_optional:
                    fd.write("" optional"")
                fd.write("";\n"")
            elif child.name == ""data"":
                fd.write(f""    {get_data_type(child)} {child.name} = 3;"")
                if add_optional:
                    fd.write("" optional"")
                fd.write("";\n"")
        fd.write(""  }\n"")
    else:
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)

def get_data_type(node: VSSNode) -> str:
    if node.name == ""int8"":
        return ""int32""
    elif node.name == ""uint8"":
        return ""uint32""
    elif node.name == ""int16"":
        return ""int32""
    elif node.name == ""uint16"":
        return ""uint32""
    elif node.name == ""int32"":
        return ""int32""
    elif node.name == ""uint32"":
        return ""uint32""
    elif node.name == ""int64"":
        return ""int64""
    elif node.name == ""uint64"":
        return ""uint64""
    elif node.name == ""float"":
        return ""float""
    elif node.name == ""double"":
        return ""double""
    elif node.name == ""string"":
        return ""string""
    else:
        return ""bytes",24.368505552783105,6.577233991507385,16.765440376936976,27.835051546391753,46.2962962962963
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta: dict[str, list[str]] = {}

    def traverse(node: VSSNode, fqn: str):
        if node.children and len(node.children) > 0:
            for child in node.children:
                traverse(child, fqn + ""/"" + child.name if fqn else child.name)
        else:
            if fqn not in instances_meta:
                instances_meta[fqn] = []
            instances_meta[fqn].append(node.name)

    traverse(root, """")
    return instances_meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta: dict[str, list[str]] = {}

    def traverse(node: VSSNode, fqn: str):
        if node.children and len(node.children) > 0:
            for child in node.children:
                traverse(child, fqn + ""/"" + child.name if fqn else child.name)
        else:
            if fqn not in instances_meta:
                instances_meta[fqn] = []
            instances_meta[fqn].append(node.name)

    traverse(root, """")
    return instances_meta",28.84693935556345,15.348329846042205,16.694365413415444,42.5287356321839,40.816326530612244
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)",53.95251422009305,34.1077254951379,31.7023313852343,50.0,100.0
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and not node.is_instance",38.92121923202306,27.429553970075617,26.150059800121895,42.10526315789473,60.0
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.data == ""VSSDataBranch"" and node.is_instance","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.data == ""VSSDataBranch"" and node.is_instance",36.85473462813429,27.955378582426714,26.130226596777128,33.33333333333333,60.0
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    hash = 0x811C9DC5
    for byte in identifier:
        hash *= FNV_PRIME
        hash ^= byte
    return hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    hash = 0x811C9DC5
    for byte in identifier:
        hash &= 0xFFFFFFFF
        hash *= FNV_PRIME
        hash ^= byte
    return hash",34.75627315163621,28.68721972332604,32.96945183058722,47.368421052631575,30.0
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    mTitleView = root.findViewById(R.id.card_title);
    mIconView = root.findViewById(R.id.card_icon);
    return root;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    mTitleView = root.findViewById(R.id.card_title);
    mIconView = root.findViewById(R.id.card_icon);
    return root;
}",68.22214014568489,46.36073105606444,49.591802590648214,81.48148148148148,95.45454545454545
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent == null) {
        buttonView.setVisibility(View.GONE);
        return;
    }
    buttonView.setImageResource(buttonContent.iconResId);
    buttonView.setOnClickListener(buttonContent.listener);
    buttonView.setVisibility(View.VISIBLE);
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent == null) {
        buttonView.setVisibility(View.GONE);
        return;
    }
    buttonView.setImageResource(buttonContent.iconResId);
    buttonView.setOnClickListener(buttonContent.listener);
    buttonView.setVisibility(View.VISIBLE);
}",60.63227174886767,47.023976047068146,47.118014174209016,48.38709677419355,100.0
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        mDescriptiveTextOnlyLayoutView = mDescriptiveTextOnlyStub.inflate();
        mTitleView = mDescriptiveTextOnlyLayoutView.findViewById(R.id.title);
        mSubtitleView = mDescriptiveTextOnlyLayoutView.findViewById(R.id.subtitle);
        mImageView = mDescriptiveTextOnlyLayoutView.findViewById(R.id.image);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        mDescriptiveTextOnlyLayoutView = mDescriptiveTextOnlyStub.inflate();
        mTitleView = mDescriptiveTextOnlyLayoutView.findViewById(R.id.title);
        mSubtitleView = mDescriptiveTextOnlyLayoutView.findViewById(R.id.subtitle);
        mImageView = mDescriptiveTextOnlyLayoutView.findViewById(R.id.image);
    }
    return mDescriptiveTextOnlyLayoutView;
}",46.67496716265697,31.731722917550183,35.58311899510974,84.0909090909091,35.294117647058826
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    getMainHandler().post(() -> {
        if (mHeaderView != null) {
            mHeaderView.getRootView().setVisibility(View.VISIBLE);
            mHeaderView.setTitle(header.getTitle());
            mHeaderView.setIcon(header.getIcon());
        }
    });
}","public void updateHeaderView(CardHeader header) {
    getMainHandler().post(() -> {
        if (mHeaderView != null) {
            mHeaderView.getRootView().setVisibility(View.VISIBLE);
            mHeaderView.setTitle(header.getTitle());
            mHeaderView.setIcon(header.getIcon());
        }
    });
}",56.781494408371415,24.29335519279861,38.54690815497274,64.28571428571429,100.0
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = mTextBlockStub.inflate();
        mTextView1 = mTextBlockLayoutView.findViewById(R.id.text_view_1);
        mTextView2 = mTextBlockLayoutView.findViewById(R.id.text_view_2);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = mTextBlockStub.inflate();
        mTextView1 = mTextBlockLayoutView.findViewById(R.id.text_view_1);
        mTextView2 = mTextBlockLayoutView.findViewById(R.id.text_view_2);
    }
    return mTextBlockLayoutView;
}",50.76884162853167,43.36842528258257,45.21830486790775,78.125,36.36363636363637
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(MediaBrowserService.SERVICE_INTERFACE);
        intent.setPackage(packageName);
        List<ResolveInfo> resolveInfos = packageManager.queryIntentServices(intent, null, 0);
        if (resolveInfos != null && !resolveInfos.isEmpty()) {
            return resolveInfos.get(0).serviceInfo.getComponentName();
        }
        return null;
    }","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(MediaBrowserService.SERVICE_INTERFACE);
        intent.setPackage(packageName);
        List<ResolveInfo> resolveInfos = packageManager.queryIntentServices(intent, null, 0);
        if (resolveInfos != null && !resolveInfos.isEmpty()) {
            return resolveInfos.get(0).serviceInfo.getComponentName();
        }
        return null;
    }",35.692657345727106,27.102143361475328,29.01080408073229,50.943396226415096,35.714285714285715
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
            (componentAppType & AppTypes.MEDIA) != 0 &&
            customMediaComponents.contains(componentName.getClassName())) {
        return false;
    }
    return true;
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
            (componentAppType & AppTypes.MEDIA) != 0 &&
            customMediaComponents.contains(componentName.getClassName())) {
        return false;
    }
    return true;
}",61.86418183533259,48.03984716340054,50.21053097158059,63.49206349206349,85.71428571428571
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
    try {
        carMediaManager.selectMediaSource(componentName);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(""CarMedia"", ""Car service unavailable"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
    try {
        carMediaManager.selectMediaSource(componentName);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(""CarMedia"", ""Car service unavailable"", e);
    }
}",75.18713502777621,72.30717871694607,73.60265171673943,54.83870967741935,100.0
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        if (carPackageManager == null) {
            Log.e(TAG, ""CarPackageManager is null, cannot check distraction optimization."");
            return false;
        }
        try {
            return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        } catch (CarNotConnectedException e) {
            Log.e(TAG, ""CarNotConnectedException: "" + e.getMessage());
            return false;
        }
    }","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        if (carPackageManager == null) {
            Log.e(TAG, ""CarPackageManager is null, cannot check distraction optimization."");
            return false;
        }
        try {
            return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        } catch (CarNotConnectedException e) {
            Log.e(TAG, ""CarNotConnectedException: "" + e.getMessage());
            return false;
        }
    }",49.21901438929615,30.758015405183016,31.881588950031148,41.37931034482759,92.85714285714286
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent mapsIntent = null;
        if (mResolvableMapIntents != null) {
            for (Intent intent : mResolvableMapIntents) {
                if (intent.resolveActivity(getPackageManager()) != null) {
                    mapsIntent = intent;
                    break;
                }
            }
        }
        if (mapsIntent == null) {
            mapsIntent = new Intent(Intent.ACTION_VIEW);
        }
        return mapsIntent;
    }","private Intent getMapsIntent() {
        Intent mapsIntent = null;
        if (mResolvableMapIntents != null) {
            for (Intent intent : mResolvableMapIntents) {
                if (intent.resolveActivity(getPackageManager()) != null) {
                    mapsIntent = intent;
                    break;
                }
            }
        }
        if (mapsIntent == null) {
            mapsIntent = new Intent(Intent.ACTION_VIEW);
        }
        return mapsIntent;
    }",13.160540038972094,8.193485237209352,9.816640286644386,22.727272727272727,11.904761904761903
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArrayList<>();
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        for (String className : HOME_MODULE_CLASSES) {
            try {
                Class<?> clazz = Class.forName(className);
                HomeCardModule module = (HomeCardModule) clazz.newInstance();
                mHomeCardModules.add(module);
                ft.add(R.id.home_card_container, module.getCardView());
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
                Log.e(TAG, ""Failed to instantiate HomeCardModule: "" + className, e);
            }
        }
        ft.commit();
    }
}","private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArrayList<>();
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        for (String className : HOME_MODULE_CLASSES) {
            try {
                Class<?> clazz = Class.forName(className);
                HomeCardModule module = (HomeCardModule) clazz.newInstance();
                mHomeCardModules.add(module);
                ft.add(R.id.home_card_container, module.getCardView());
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
                Log.e(TAG, ""Failed to instantiate HomeCardModule: "" + className, e);
            }
        }
        if (ft.isAdded()) {
            ft.commit();
        }
    }
}",32.0280821978838,16.203837768921336,18.963436077558903,54.94505494505495,38.0
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        if (ActivityTaskManager.get().isInMultiWindowMode(taskAppearedInfo.taskId)) {
            Log.w(""TaskView"", ""Removing dangling task: "" + taskAppearedInfo.taskId);
            ActivityTaskManager.get().removeTask(taskAppearedInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        if (ActivityTaskManager.get().isInMultiWindowMode(taskAppearedInfo.taskId)) {
            Log.w(""TaskView"", ""Removing dangling task: "" + taskAppearedInfo.taskId);
            ActivityTaskManager.get().removeTask(taskAppearedInfo.taskId);
        }
    }
}",34.42986692691174,26.443806118509777,30.46758078105638,44.44444444444444,36.36363636363637
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    CarMode mode = CarMode.get(this);
    int titleResId = mode.getTitleResourceId();
    setTitle(titleResId);
    if (mToolbar != null) {
        mToolbar.setTitle(titleResId);
    }
}","private void updateMode() {
    CarMode mode = CarMode.get(this);
    int titleResId = mode.getTitleResourceId();
    setTitle(titleResId);
    if (mToolbar != null) {
        mToolbar.setTitle(titleResId);
    }
}",30.74186172340218,12.58220555845937,31.02016197006999,23.809523809523807,55.55555555555556
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = (Chronometer) findViewById(R.id.chronometer);
        mSeparator = findViewById(R.id.separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = (Chronometer) findViewById(R.id.chronometer);
        mSeparator = findViewById(R.id.separator);
    }
    return mChronometer;
}",62.96020414939469,61.706889119700236,63.21085055480163,42.30769230769231,84.61538461538461
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        mMediaLayoutView = mMediaStub.inflate();
        mTitleView = mMediaLayoutView.findViewById(R.id.title);
        mSubtitleView = mMediaLayoutView.findViewById(R.id.subtitle);
        mPlaybackControlsBar = new MediaPlaybackControlsBarPresenter(this);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        mMediaLayoutView = mMediaStub.inflate();
        mTitleView = mMediaLayoutView.findViewById(R.id.title);
        mSubtitleView = mMediaLayoutView.findViewById(R.id.subtitle);
        mPlaybackControlsBarPresenter = new MediaPlaybackControlsBarPresenter(this);
    }
    return mMediaLayoutView;
}",45.25966010709075,35.03593105430875,37.1815385641104,67.44186046511628,41.37931034482759
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    if (image == null || mCardSize == null) {
        return;
    }

    int cardSize = Math.max(mCardSize.width(), mCardSize.height());
    Bitmap blurredBitmap = ImageBlurUtil.blur(image, cardSize, cardSize);
    mCardView.setBackground(new BitmapDrawable(getResources(), blurredBitmap));
}","private void updateBackgroundImage(Drawable image) {
    if (image == null || mCardSize == null) {
        return;
    }

    int cardSize = Math.max(mCardSize.width(), mCardSize.height());
    Bitmap blurredBitmap = ImageBlurUtil.blur(image, cardSize, cardSize);
    mCardView.setBackground(new BitmapDrawable(getResources(), blurredBitmap));
}",29.176109984663096,14.856594450174537,17.161235801868173,36.53846153846153,48.148148148148145
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mMediaLayout.setVisibility(View.VISIBLE);
    mMediaLayout.setTitle(title);
    mMediaLayout.setSubtitle(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mMediaLayout.setVisibility(View.VISIBLE);
    mMediaLayout.setTitle(title);
    mMediaLayout.setSubtitle(subtitle);
}",70.842490254843,59.004687263928076,61.207379018601806,63.1578947368421,100.0
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        mChronometer.setBase(content.getStartTime());
        mChronometer.start();
        mSeparator.setVisibility(View.VISIBLE);
        mChronometer.setVisibility(View.VISIBLE);
    } else {
        mChronometer.stop();
        mChronometer.setVisibility(View.GONE);
        mSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        mChronometer.setBase(content.getStartTime());
        mChronometer.start();
        mSeparator.setVisibility(View.VISIBLE);
        mChronometer.setVisibility(View.VISIBLE);
    } else {
        mChronometer.stop();
        mChronometer.setVisibility(View.GONE);
        mSeparator.setVisibility(View.GONE);
    }
}",66.3943967566714,50.41350242010638,55.164084606579166,60.0,100.0
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(this);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(this);
    }
}",74.36357747171822,79.10665071754359,79.88612070779082,38.46153846153847,100.0
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
    clearCurrentCall();
    clearCardContent();
    mPresenter.onModelUpdate();
    call.unregisterCallback(this);
}","public void onCallRemoved(Call call) {
    clearCurrentCall();
    clearCardContent();
    if (mPresenter != null) {
        mPresenter.onModelUpdate();
    }
    if (call != null) {
        call.unregisterCallback(this);
    }
}",43.21430974038286,34.85799122645515,40.85639059221913,40.0,57.14285714285714
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = PhoneNumberFormatter.format(number);
    CallDetailsModel model = new CallDetailsModel(formattedNumber);
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(
            getContext(),
            model,
            getPresenter().getCallControls()
    );
    mCallDetailsView = view;
    getPresenter().onModelUpdated(model);
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = PhoneNumberFormatter.format(number);
    CallDetailsModel model = new CallDetailsModel(formattedNumber);
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(
            getContext(),
            model,
            getPresenter().getCallControls()
    );
    mCallDetailsView = view;
    getPresenter().onModelUpdated(model);
}",31.062593695344198,24.010981785257503,33.57272632945262,16.666666666666664,50.0
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
    mEndCallButton.setImageResource(R.drawable.ic_end_call);
    mEndCallButton.setOnClickListener(view -> endCall());

    mMuteButton.setImageResource(R.drawable.ic_mute);
    mMuteButton.setOnClickListener(view -> toggleMute());

    mDialpadButton.setImageResource(R.drawable.ic_dialpad);
    mDialpadButton.setOnClickListener(view -> showDialpad());
}","private void initializeAudioControls() {
    mEndCallButton.setImageResource(R.drawable.ic_end_call);
    mEndCallButton.setOnClickListener(view -> endCall());

    mMuteButton.setImageResource(R.drawable.ic_mute);
    mMuteButton.setOnClickListener(view -> toggleMute());

    mDialpadButton.setImageResource(R.drawable.ic_dialpad);
    mDialpadButton.setOnClickListener(view -> showDialpad());
}",22.757977611482332,6.814190323744593,8.950340443040359,34.090909090909086,41.17647058823529
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (connectionStatus_ == ConnectionStatus::AVAILABLE) {
        _listener.callback(StatusEvent::AVAILABLE);
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (connectionStatus_ == ConnectionStatus::AVAILABLE) {
        _listener.callback(StatusEvent::AVAILABLE);
    }
}",63.955215839347744,46.82568791024402,61.16908849062524,47.82608695652174,100.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(exitMutex);
    if (connToThread.count(conn) && t.get_id() != 0) {
        if (!connToThread[conn](t)) {
            return;
        }
    }
    connToThread[conn] = t;
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(exitMutex);
    if (connToThread.count(conn) && t.get_id() != 0) {
        return;
    }
    connToThread[conn] = t;
}",27.153276200361166,16.148768046533345,19.57431117946374,43.47826086956522,29.411764705882355
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (!libdbusWatch) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""libdbusWatch == nullptr"");
        return;
    }

    auto wrapper = static_cast<DBusWatchWrapper*>(data);
    if (!wrapper) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""wrapper == nullptr"");
        return;
    }

    wrapper->stopMonitoring();
    wrapper->setWatch(nullptr);
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (!libdbusWatch) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""libdbusWatch == nullptr"");
        return;
    }

    auto wrapper = static_cast<DBusWatchWrapper*>(data);
    if (!wrapper) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""wrapper == nullptr"");
        return;
    }

    wrapper->stopMonitoring();
    wrapper->setWatch(nullptr);
}",44.75837119067428,20.82555082769757,22.147327874393476,63.33333333333333,72.72727272727273
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    auto watchWrapper = std::static_pointer_cast<DBusWatchWrapper>(data);
    if (!watchWrapper) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchWrapper is null"");
        return;
    }

    if (!watchWrapper->watch_) {
        watchWrapper->watch_ = libdbusWatch;
        watchWrapper->isReady_ = true;
    }

    if (watchWrapper->isReady_) {
        dbus_connection_add_watch(connection_, libdbusWatch, watchWrapper.get());
    } else {
        dbus_connection_remove_watch(connection_, libdbusWatch, watchWrapper.get());
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    auto watchWrapper = static_cast<DBusWatchWrapper*>(data);
    if (!watchWrapper) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchWrapper is null"");
        return;
    }

    if (!watchWrapper->watch_) {
        watchWrapper->watch_ = libdbusWatch;
        watchWrapper->isReady_ = true;
    }

    if (watchWrapper->isReady_) {
        dbus_connection_add_watch(connection_, libdbusWatch, watchWrapper);
    } else {
        dbus_connection_remove_watch(connection_, libdbusWatch, watchWrapper);
    }
}",29.801248856003692,11.727023440556763,13.227777733263753,40.4040404040404,53.84615384615385
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        static std::mutex mutex;
        std::lock_guard<std::mutex> lock(mutex);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>();
        }
    }
    return instance;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        static std::mutex mutex;
        std::lock_guard<std::mutex> lock(mutex);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>();
        }
    }
    return instance;
}",48.45449104474903,15.553986407412197,21.53320854081468,69.23076923076923,87.5
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    std::lock_guard<std::mutex> lock(serviceNameMutex_);
    auto it = serviceNameCounts_.find(serviceName);
    if (it == serviceNameCounts_.end()) {
        return false;
    }

    it->second--;
    if (it->second == 0) {
        serviceNameCounts_.erase(it);
        dbus_error_t error;
        dbus_name_off(connection_, serviceName.c_str(), &error);
        if (error.name != NULL) {
            COMMONAPI_ERROR(std::string(__FUNCTION__), std::string(""Failed to release service name: "") + error.message);
            dbus_error_free(&error);
            return false;
        }
    }
    return true;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    std::lock_guard<std::mutex> lock(serviceNameMutex_);
    auto it = serviceNameCounts_.find(serviceName);
    if (it == serviceNameCounts_.end()) {
        return false;
    }

    it->second--;
    if (it->second == 0) {
        serviceNameCounts_.erase(it);
        dbus_error_t error;
        if (!dbus_name_off(connection_, serviceName.c_str(), &error)) {
            if (error.name != NULL) {
                COMMONAPI_ERROR(std::string(__FUNCTION__), std::string(""Failed to release service name: "") + error.message);
                dbus_error_free(&error);
                return false;
            }
        }
    }
    return true;
}",41.7801212356521,14.37669048062813,14.88665160483744,62.857142857142854,75.0
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (!_libdbusPendingCall) {
        return DBusMessage();
    }

    DBusMessage message = DBusMessage::createFromPendingCall(_libdbusPendingCall);
    dbus_connection_unref_pending_call(_libdbusPendingCall);
    return message;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (!_libdbusPendingCall) {
        return DBusMessage();
    }

    DBusMessage message = DBusMessage::createFromPendingCall(_libdbusPendingCall);
    dbus_connection_unref_pending_call(_libdbusPendingCall);
    return message;
}",35.65775513331913,14.745376109454458,17.629234167411813,43.58974358974359,66.66666666666666
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(asyncHandlersMutex_);
    std::vector<DBusMessageHandler*> handlersToDeallocate = asyncHandlers_;
    asyncHandlers_.clear();

    for (DBusMessageHandler* handler : handlersToDeallocate) {
        delete handler;
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(asyncHandlersMutex_);
    std::vector<DBusMessageHandler*> handlersToDeallocate = asyncHandlers_;
    asyncHandlers_.clear();

    for (DBusMessageHandler* handler : handlersToDeallocate) {
        if (handler) {
            delete handler;
        }
    }
}",29.744144839189573,5.768501307465948,6.065220906435207,57.14285714285714,50.0
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex_);
    for (auto& signalHandler : signalHandlers_) {
        signalHandler.onSpecificError(SUCCESS);
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex_);
    for (auto& signalHandler : signalHandlers_) {
        signalHandler.onSpecificError(SUCCESS);
    }
}",16.723385033195754,3.5283994413773994,5.212966778362145,45.65217391304348,12.5
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(connectionMutex_);
    connections_.erase(_connectionId);
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(connectionMutex_);
    auto it = connections_.find(_connectionId);
    if (it != connections_.end()) {
        connections_.erase(it);
    }
}",64.2130571570321,34.11488281065382,35.237345817474555,100.0,87.5
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.member() == ""InterfacesAdded"") {
        interfacesAddedHandler(dbusMessage);
    } else if (dbusMessage.member() == ""InterfacesRemoved"") {
        interfacesRemovedHandler(dbusMessage);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.member() == ""InterfacesAdded"") {
        interfacesAddedHandler(dbusMessage);
    } else if (dbusMessage.member() == ""InterfacesRemoved"") {
        interfacesRemovedHandler(dbusMessage);
    }
}",47.81387645409231,32.28213880040185,42.09025013285051,45.45454545454545,71.42857142857143
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _availableServiceInstances.clear();
    if (!dbusServiceInstances_.empty()) {
        for (const auto& serviceInstance : dbusServiceInstances_) {
            _availableServiceInstances.push_back(DBusAddress(serviceInstance));
        }
    }
    _status = CommonAPI::CallStatus::OK;
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _availableServiceInstances.clear();
    if (!dbusServiceInstances_.empty()) {
        for (const auto& serviceInstance : dbusServiceInstances_) {
            _availableServiceInstances.push_back(DBusAddress(serviceInstance));
        }
    }
    _status = CommonAPI::CallStatus::OK;
}",43.691222076720784,18.038302998635977,24.259052840714684,68.18181818181817,64.28571428571429
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::Failed;
    _availabilityStatus = AvailabilityStatus::Unavailable;

    std::string dbusAddress = _instance;

    DBusError error;
    dbus_error_init(&error);

    DBusMessage* msg = dbus_message_new_method_call(DBUS_SERVICE_NAME, DBUS_PATH_NAME, DBUS_INTERFACE_NAME, ""GetServiceInstanceAvailabilityStatus"");
    dbus_message_append_args(msg, DBUS_TYPE_STRING, &dbusAddress, DBUS_TYPE_INVALID);

    DBusMessage* reply = dbus_connection_send_with_reply_and_block(connection_, msg, -1, &error);
    dbus_message_unref(msg);

    if (reply != NULL) {
        if (dbus_message_is_error(reply)) {
            dbus_error_free(&error);
            _callStatus = CallStatus::Failed;
            return;
        }

        DBusMessageIter iter;
        dbus_message_iter_init(&iter, reply);

        if (dbus_message_iter_get_arg_type(&iter) == DBUS_TYPE_BOOLEAN) {
            bool available;
            dbus_message_iter_get_fixed_args(reply, &iter, &available, NULL);
            _availabilityStatus = (available) ? AvailabilityStatus::Available : AvailabilityStatus::Unavailable;
            _callStatus = CallStatus::Success;
        }

        dbus_message_unref(reply);
    } else {
        _callStatus = CallStatus::Failed;
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::Failed;
    _availabilityStatus = AvailabilityStatus::Unavailable;

    std::string dbusAddress = _instance;

    DBusError error;
    dbus_error_init(&error);

    DBusMessage* msg = dbus_message_new_method_call(DBUS_SERVICE_NAME, DBUS_PATH_NAME, DBUS_INTERFACE_NAME, ""GetServiceInstanceAvailabilityStatus"");
    if (!msg) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Failed to create message"");
        return;
    }
    dbus_message_append_args(msg, DBUS_TYPE_STRING, &dbusAddress, DBUS_TYPE_INVALID);

    DBusMessage* reply = dbus_connection_send_with_reply_and_block(connection_, msg, -1, &error);
    dbus_message_unref(msg);

    if (reply != NULL) {
        if (dbus_message_is_error(reply)) {
            dbus_error_free(&error);
            _callStatus = CallStatus::Failed;
            COMMONAPI_ERROR(std::string(__FUNCTION__), dbus_error_name(&error));
            return;
        }

        DBusMessageIter iter;
        dbus_message_iter_init(&iter, reply);

        if (dbus_message_iter_get_arg_type(&iter) == DBUS_TYPE_BOOLEAN) {
            bool available;
            dbus_message_iter_get_fixed_args(reply, &iter, &available, NULL);
            _availabilityStatus = (available) ? AvailabilityStatus::Available : AvailabilityStatus::Unavailable;
            _callStatus = CallStatus::Success;
        } else {
            COMMONAPI_ERROR(std::string(__FUNCTION__), ""Unexpected reply type"");
        }

        dbus_message_unref(reply);
    } else {
        if (dbus_error_is_set(&error)) {
            COMMONAPI_ERROR(std::string(__FUNCTION__), dbus_error_name(&error));
            dbus_error_free(&error);
        } else {
            COMMONAPI_ERROR(std::string(__FUNCTION__), ""Send failed"");
        }
    }
}",30.218209022329244,6.421227362019452,22.948340753441336,47.05882352941176,44.44444444444444
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    std::vector<std::string> objectPaths;
    std::vector<std::string> interfaceNames;

    if (!parseInterfacesRemovedSignal(_message, objectPaths, interfaceNames)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Failed to parse InterfacesRemoved signal"");
        return;
    }

    for (const std::string& interfaceName : interfaceNames) {
        if (interfaceName == observedInterface_) {
            listeners_->notifyListeners(observedObjectPath_, observedInterface_, Status::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    std::vector<std::string> objectPaths;
    std::vector<std::string> interfaceNames;

    if (!parseInterfacesRemovedSignal(_message, objectPaths, interfaceNames)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Failed to parse InterfacesRemoved signal"");
        return;
    }

    for (const std::string& interfaceName : interfaceNames) {
        if (interfaceName == observedInterface_) {
            listeners_->notifyListeners(observedObjectPath_, observedInterface_, Status::NOT_AVAILABLE);
        }
    }
}",27.17850320856324,8.367654513909091,10.602768576754114,39.743589743589745,50.0
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::string address = ""/"" + _objectPath + ""/"" + _interfaceName;
    listeners_.notify(address, _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::string address = ""/"" + _objectPath + ""/"" + _interfaceName;
    listeners_.notify(address, _availability);
}",48.85523856423774,36.51934656347456,39.832871551569504,46.34146341463415,72.72727272727273
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    mainLoop_->postEvent(std::make_shared<ListenerAddedEvent>(_listener, _subscription));
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    mainLoop_->postEvent(std::make_shared<ListenerAddedEvent>(_listener, _subscription));
}",45.52625223654733,33.62290668555742,38.4821022606319,60.0,50.0
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                    [&_listener, _subscription](const Listener& l) {
                                        return l.listenerId == _listener.listenerId && l.subscription == _subscription;
                                    }),
                     listeners_.end());
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                    [&_listener, _subscription](const Listener& l) {
                                        return l.listenerId == _listener.listenerId && l.subscription == _subscription;
                                    }));
}",44.195367662144406,25.270331710913972,25.915900842425525,54.166666666666664,71.42857142857143
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}",85.57023337969444,70.80735452207037,71.4735789967074,100.0,100.0
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    std::vector<std::string> serviceInstances;
    for (const auto& address : _availableServiceInstances) {
        serviceInstances.push_back(address.address_);
    }

    _call(_status, serviceInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    std::vector<std::string> serviceInstances;
    for (const auto& address : _availableServiceInstances) {
        serviceInstances.push_back(address.address_);
    }

    _call(_status, serviceInstances);
}",59.06061552583276,38.25253840986218,39.10103480457998,75.55555555555556,83.33333333333334
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        return false;
    }

    const std::string objectPath = dbusMessage.getObjectPath();
    const std::string interface = dbusMessage.getInterface();

    if (handlerMap_.count(objectPath) > 0 && handlerMap_[objectPath].count(interface) > 0) {
        HandlerFunction handler = handlerMap_[objectPath][interface];
        return handler(dbusMessage);
    } else {
        return handleIntrospectRequest(dbusMessage);
    }
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        return false;
    }

    const std::string objectPath = dbusMessage.getObjectPath();
    const std::string interface = dbusMessage.getInterface();

    if (handlerMap_.count(objectPath) > 0 && handlerMap_[objectPath].count(interface) > 0) {
        HandlerFunction handler = handlerMap_[objectPath][interface];
        return handler(dbusMessage);
    } else {
        return handleIntrospectRequest(dbusMessage);
    }
}",23.838564059697163,8.04963279877586,11.025665911055258,33.035714285714285,43.24324324324324
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (!dbusInterfaceHandler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandler is null"");
        return false;
    }

    auto it = _dbusInterfaceHandlerPaths.find(dbusInterfaceHandlerPath);
    if (it != _dbusInterfaceHandlerPaths.end()) {
        if (dbusInterfaceHandlerPath == DBusInterfaceHandlerPath(DBUS_INTERFACE_OBJECT_MANAGER) ||
            dbusInterfaceHandlerPath == DBusInterfaceHandlerPath(DBUS_INTERFACE_PROPERTIES)) {
            return true;
        }
        return false;
    }

    _dbusInterfaceHandlerPaths[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (!dbusInterfaceHandler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandler is null"");
        return false;
    }

    auto it = _dbusInterfaceHandlerPaths.find(dbusInterfaceHandlerPath);
    if (it != _dbusInterfaceHandlerPaths.end()) {
        return false;
    }

    _dbusInterfaceHandlerPaths[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}",31.53784535158285,15.237702216799404,18.05653633238913,50.0,42.857142857142854
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }
    registeredObjectsTable_[ifpath] = std::move(handler);
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }
    registeredObjectsTable_[ifpath] = std::move(handler);
    return true;
}",22.161042832259586,7.818484965802054,17.066650218657976,39.75903614457831,24.0
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_ECU_RESET + 0x40, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_ECU_RESET + 0x40, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",73.05407078685752,78.36876021758758,79.26641776050201,75.75757575757575,58.82352941176471
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET, UDS_NRC_INCORRECT_LENGTH);
    return;
  }

  uint8_t sub_function = data[1];

  if (sub_function != ECU_RESET_SUBFUNCTION_HARD) {
    send_negative_response(UDS_SID_ECU_RESET, UDS_NRC_UNSUPPORTED_REQUEST);
    return;
  }

  send_positive_response(UDS_SID_ECU_RESET);
  system_reboot();
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET, UDS_NRC_INCORRECT_LENGTH);
    return;
  }

  uint8_t sub_function = data[1];

  if (sub_function != ECU_RESET_SUBFUNCTION_HARD) {
    send_negative_response(UDS_SID_ECU_RESET, UDS_NRC_UNSUPPORTED_REQUEST);
    return;
  }

  send_positive_response(UDS_SID_ECU_RESET);
  system_reboot();
}",56.90527078506403,40.31200165813271,41.18505047437149,62.7906976744186,83.33333333333334
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD, 0x00, 0xD2, 0x00};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD, 0x00, 0xD2};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",58.27956371875278,50.717793991905516,57.192127549772295,71.875,53.333333333333336
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;
  uint8_t tx_data[] = {positive_sid, block_sequence_counter};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;
  uint8_t tx_data[] = {positive_sid, block_sequence_counter};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",100.0,100.0,100.0,100.0,100.0
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL_RESULT + 0x40;
  uint8_t tx_data[] = {
    positive_sid,
    (routine_id >> 8) & 0xFF,
    routine_id & 0xFF,
    result,
  };
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL_RESULT + 0x40;
  uint8_t tx_data[] = {
    positive_sid,
    (routine_id >> 8) & 0xFF,
    routine_id & 0xFF,
    result,
  };
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",87.89087447002811,82.50579990735119,84.4423133573766,84.61538461538461,100.0
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_EXIT + 0x40};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_EXIT + 0x40};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}",71.45770639096172,77.83393021799192,78.90598625494589,75.75757575757575,53.333333333333336
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (uint8_t i = 0; i < ARRAY_SIZE(id_mapping); ++i) {
    if (id_mapping[i].can_id == can_id) {
      return i;
    }
  }
  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (uint8_t i = 0; i < ARRAY_SIZE(id_mapping); ++i) {
    if (id_mapping[i].can_id == can_id) {
      return i;
    }
  }
  return 0xff;
}",73.13873539564125,67.13783850074478,68.274245938963,57.14285714285714,100.0
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  if (filter_id == -1) {
    for (int i = 0; i < ARRAY_SIZE(lin2can_rx_filters); i++) {
      lin2can_rx_filters[i].cb = NULL;
    }
  } else if (filter_id >= 0 && filter_id < ARRAY_SIZE(lin2can_rx_filters)) {
    lin2can_rx_filters[filter_id].cb = NULL;
  }
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  if (filter_id == -1) {
    for (int i = 0; i < ARRAY_SIZE(lin2can_rx_filters); i++) {
      lin2can_rx_filters[i].cb = NULL;
    }
  } else if (filter_id >= 0 && filter_id < ARRAY_SIZE(lin2can_rx_filters)) {
    lin2can_rx_filters[filter_id].cb = NULL;
  }
}",36.95839838556642,40.544948347759544,41.553655546473,30.952380952380953,34.78260869565217
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  if (!frame) {
    return false;
  }

  struct lin_tx_req tx_req;
  tx_req.buffer = frame->data;
  tx_req.len = frame->len;

  if (frame->completion_cb) {
    frame->completion_cb(frame->user_data, &tx_req);
  }

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  if (!frame) {
    return false;
  }

  struct lin_tx_req tx_req;
  tx_req.buffer = frame->data;
  tx_req.len = frame->len;

  if (frame->completion_cb) {
    frame->completion_cb(frame->user_data, &tx_req);
  }

  return true;
}",33.24626429832876,19.085874856167575,22.347458199216426,46.55172413793103,45.0
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  uint8_t index = (frame->data[0] >> 6) & 0x03;
  uint32_t can_id = can_id_map[index];
  uint8_t can_data[7];
  can_data[0] = frame->data[0] & 0x3F;
  for (int i = 1; i < 8; i++) {
    can_data[i] = frame->data[i];
  }
  struct can_frame can_frame = {
    .id = can_id,
    .dlc = frame->data_length,
    .data = can_data
  };
  can_handler(&can_frame, user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  uint8_t index = (frame->data[0] >> 6) & 0x03;
  uint32_t can_id = can_id_map[index];
  uint8_t can_data[8];
  can_data[0] = frame->data[0] & 0x3F;
  for (int i = 1; i < frame->data_length; i++) {
    can_data[i] = frame->data[i];
  }
  struct can_frame can_frame = {
    .id = can_id,
    .dlc = frame->data_length,
    .data = can_data
  };
  can_handler(&can_frame, user_data);
}",31.274459169607745,17.271492839703114,18.19990705711866,47.12643678160919,42.5
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
  int ret;

  ret = gpio_config(dev->config->oe_gpio, GPIO_OUTPUT);
  if (ret < 0) {
    LOG_ERR(""Failed to configure OE GPIO: %d\n"", ret);
    return ret;
  }

  memset(dev->regs, 0, sizeof(dev->regs));

  ret = gpio_set(dev->config->oe_gpio, 1);
  if (ret < 0) {
    LOG_ERR(""Failed to set OE pin: %d\n"", ret);
    return ret;
  }

  return 0;
}","static int hv_shield_init(const struct device* dev) {
  int ret;

  ret = gpio_config(dev->config->oe_gpio, GPIO_OUTPUT);
  if (ret < 0) {
    LOG_ERR(""Failed to configure OE GPIO: %d\n"", ret);
    return ret;
  }

  ret = regulator_enable(dev->config->regulator);
  if (ret < 0) {
    LOG_ERR(""Failed to enable regulator: %d\n"", ret);
    return ret;
  }

  memset(dev->regs, 0, sizeof(dev->regs));

  ret = gpio_set(dev->config->oe_gpio, 1);
  if (ret < 0) {
    LOG_ERR(""Failed to set OE pin: %d\n"", ret);
    regulator_disable(dev->config->regulator);
    return ret;
  }

  return 0;
}",23.311729275212684,11.666547098649731,12.763165701125734,33.33333333333333,35.483870967741936
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
  if (dac > 1) {
    return -EINVAL;
  }

  hvs_dac_config.dac_gains[dac] = gain;
  hvs_shield_update_config(dev);

  return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
  if (dac > 1) {
    return -EINVAL;
  }

  hvs_dac_config.dac_gains[dac] = gain;
  hvs_shield_update_config(dev);

  return 0;
}",40.7729750311058,34.33427207619715,39.642795512340896,52.27272727272727,36.84210526315789
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
  if (index > 31) {
    return -EINVAL;
  }

  uint8_t nibble_swapped_index =
      ((index / 4) << 3) | ((index % 4) << (4 - (index % 4)));

  hvs_gpio_output_enable_cache[nibble_swapped_index] = enable;

  hvs_write_gpio_output_enable_register(dev);

  return 0;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
  if (index > 31) {
    return -EINVAL;
  }

  uint8_t nibble_swapped_index =
      ((index / 4) << 3) | ((index % 4) << (4 - (index % 4)));

  hvs_gpio_output_enable_cache[nibble_swapped_index] = enable;

  hvs_write_gpio_output_enable_register(dev);

  return 0;
}",31.753696760688488,26.96861103089729,28.583911860913265,33.9622641509434,37.5
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
  int ret;
  struct can_frame tx_frame = *frame;
  struct can_addr dest_addr = {
    .bitrate_switch = 0,
    .can_id = frame->can_id,
    .flags = 0,
  };

  ret = can_send(user_data, &dest_addr, &tx_frame, K_NO_WAIT);
  if (ret == 0) {
    LOG_DBG(""Frame forwarded from 0x%X to 0x%X\n"", frame->can_id, dest_addr.can_id);
  } else {
    LOG_WRN(""Failed to queue frame for forwarding: %d\n"", ret);
  }
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
  int ret;
  struct can_frame tx_frame = *frame;
  struct can_addr dest_addr = {
    .bitrate_switch = 0,
    .can_id = frame->can_id,
    .flags = 0,
  };

  ret = can_send(user_data, &dest_addr, &tx_frame, K_NO_WAIT);
  if (ret == 0) {
    LOG_DBG(""Frame forwarded from 0x%X to 0x%X\n"", frame->can_id, dest_addr.can_id);
  } else {
    LOG_WRN(""Failed to queue frame for forwarding: %d\n"", ret);
  }
}",44.18674298555795,19.047864972057308,29.365773636841137,45.0,83.33333333333334
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  int ret;
  for (int i = 0; i < entry_count; i++) {
    ret = can_filter_add(entries[i].source_can_if, &entries[i].filter);
    if (ret != 0) {
      return ret;
    }
    ret = can_frame_forward(entries[i].filter.id, entries[i].destination_can_if, entries[i].callback);
    if (ret != 0) {
      return ret;
    }
  }
  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  int ret;
  for (int i = 0; i < entry_count; i++) {
    ret = can_filter_add(entries[i].source_can_if, &entries[i].filter);
    if (ret != 0) {
      return ret;
    }
    ret = can_frame_forward(entries[i].filter.id, entries[i].destination_can_if, entries[i].callback);
    if (ret != 0) {
      return ret;
    }
  }
  return 0;
}",45.83311625783401,38.317679247491526,40.20929379299783,52.17391304347826,52.63157894736842
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
  int ret;
  struct can_router_entry *entry, *next;

  for (entry = can_router_entries; entry; entry = next) {
    next = entry->next;
    ret = can_router_register(entry);
    if (ret != 0) {
      return ret;
    }
  }

  return 0;
}","static int can_router_sysinit() {
  int ret;
  struct can_router_entry *entry;

  for (entry = can_router_entries; entry; entry = entry->next) {
    ret = can_router_register(entry);
    if (ret != 0) {
      return ret;
    }
  }

  return 0;
}",29.679222959423367,20.69099661161138,23.887964191599316,24.137931034482758,50.0
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
  int ret;
  for (int i = 0; i < 32; i++) {
    if ((mask >> i) & 1) {
      ret = gpio_pin_set_state(port, i, ((value >> i) & 1));
      if (ret != 0) {
        LOG_ERR(""Failed to set GPIO %d\n"", i);
        return ret;
      }
    }
  }
  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
  int ret;
  for (int i = 0; i < 32; i++) {
    if ((mask >> i) & 1) {
      ret = gpio_pin_set_state(port, i, ((value >> i) & 1));
      if (ret != 0) {
        LOG_ERR(""Failed to set GPIO %d\n"", i);
        return ret;
      }
    }
  }
  return 0;
}",42.9098878123572,40.283582905292555,41.46027082132006,32.20338983050847,57.692307692307686
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  if (!free_slots) {
    return -EINVAL;
  }

  *free_slots = dev->config->max_cb_slots - dev->used_cb_slots;
  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  if (!free_slots) {
    return -EINVAL;
  }

  *free_slots = dev->config->max_cb_slots - dev->used_cb_slots;
  return 0;
}",56.187100112964174,46.09031956486013,48.65808088699657,60.0,70.0
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  struct al_incoming_cb_slot *slot = malloc(sizeof(struct al_incoming_cb_slot), MALLOC_RAM);
  if (!slot) {
    return -ENOMEM;
  }

  slot->callback = callback;
  slot->user_data = user_data;
  slot->frame_id = frame_id;
  slot->frame_size = frame_size;

  for (int i = 0; i < ARRAY_SIZE(incoming_callbacks); i++) {
    if (!incoming_callbacks[i]) {
      incoming_callbacks[i] = slot;
      return 0;
    }
  }

  free(slot);
  return -ENOMEM;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  struct al_incoming_cb_slot *slot = malloc(sizeof(struct al_incoming_cb_slot), MALLOC_RAM);
  if (!slot) {
    return -ENOMEM;
  }

  slot->callback = callback;
  slot->user_data = user_data;
  slot->frame_id = frame_id;
  slot->frame_size = frame_size;

  for (int i = 0; i < ARRAY_SIZE(incoming_callbacks); i++) {
    if (!incoming_callbacks[i]) {
      incoming_callbacks[i] = slot;
      return 0;
    }
  }

  free(slot);
  return -ENOMEM;
}",45.23176381367933,40.45404235272571,46.91558993280392,41.17647058823529,52.38095238095239
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  struct al_outgoing_cb_entry *entry = malloc(sizeof(struct al_outgoing_cb_entry), MALLOC_RAM);
  if (!entry) {
    return -ENOMEM;
  }

  entry->callback = callback;
  entry->frame_id = frame_id;
  entry->frame_size = frame_size;
  entry->user_data = user_data;

  for (int i = 0; i < ARRAY_SIZE(al_outgoing_callbacks); i++) {
    if (!al_outgoing_callbacks[i].callback) {
      al_outgoing_callbacks[i] = *entry;
      return 0;
    }
  }

  free(entry);
  return -ENOMEM;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  struct al_outgoing_cb_entry *entry = malloc(sizeof(struct al_outgoing_cb_entry), MALLOC_RAM);
  if (!entry) {
    return -ENOMEM;
  }

  entry->callback = callback;
  entry->frame_id = frame_id;
  entry->frame_size = frame_size;
  entry->user_data = user_data;

  for (int i = 0; i < ARRAY_SIZE(al_outgoing_callbacks); i++) {
    if (al_outgoing_callbacks[i].callback == NULL) {
      al_outgoing_callbacks[i] = *entry;
      free(entry);
      return 0;
    }
  }

  free(entry);
  return -ENOMEM;
}",45.90309120142045,39.15802971599924,47.04537150424839,42.64705882352941,54.761904761904766
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(uint8_t table_index) {
  if (table_index >= MAX_LIN_SCHEDULE_TABLES) {
    return -EINVAL;
  }

  sem_wait(&lin_scheduler_mutex);

  current_lin_schedule_table = table_index;
  lin_scheduler_entry_pointer = lin_schedule_tables[table_index];

  sem_post(&lin_scheduler_mutex);

  return 0;
}","int abstract_lin_scheduler_set_active_table(uint8_t table_index) {
  if (table_index >= MAX_LIN_SCHEDULE_TABLES) {
    return -EINVAL;
  }

  sem_wait(&lin_scheduler_mutex);

  lin_scheduler_state->active_table = table_index;
  lin_scheduler_state->entry_pointer = lin_schedule_tables[table_index];

  sem_post(&lin_scheduler_mutex);

  return 0;
}",26.591473284747746,10.866019520153113,14.62268063638175,34.21052631578947,46.666666666666664
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->running) {
    if (sched->state != LIN_SCHEDULER_STOPPED) {
      sem_wait(&sched->completion_sem);
    }
    sched->active_schedule_table_index = -1;
    sched->running = 0;
  }
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->running) {
    if (sched->state != LIN_SCHEDULER_STOPPED) {
      sem_wait(&sched->completion_sem);
    }
    sched->active_schedule_table_index = -1;
    sched->running = 0;
    sched->state = LIN_SCHEDULER_STOPPED;
  }
}",42.51550286280317,17.729842264695016,23.998835853184296,45.0,83.33333333333334

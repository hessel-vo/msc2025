id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        return False","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        return False",37.1611529750151,9.74150876536819,35.826180057769115,23.076923076923077,80.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(v, signed, bits) for v in value)

    if not isinstance(value, int):
        return False

    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1

    return lower_bound <= value <= upper_bound","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(v, signed, bits) for v in value)

    if not isinstance(value, int):
        return False

    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1

    return lower_bound <= value <= upper_bound",38.66337406779282,22.459855034513378,23.227532270548927,60.317460317460316,48.64864864864865
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.__dict__.get('types', []):
        if type_def[0] == datatype:
            return type_def
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in getattr(cls, 'types', []):
        if type_def[0] == datatype:
            return type_def
    return None",62.91007368150975,50.16993910962959,54.669008815062604,74.07407407407408,72.72727272727273
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn is None:
        return {}

    parts = fqn.split(""."")
    namespace = ""."".join(parts[:-1])
    type_name = parts[-1]

    datatypes = {}
    if namespace == """":
        namespace = "".""
    
    try:
        from importlib import import_module
        module = import_module(namespace.replace(""."", "".""))
        
        if hasattr(module, type_name):
            datatype = getattr(module, type_name)
            datatypes[type_name] = str(datatype)
    except ImportError:
        pass

    return datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn is None:
        return {}

    parts = fqn.split(""."")
    namespace = ""."".join(parts[:-1])
    type_name = parts[-1]

    datatypes = {}
    if namespace == """":
        namespace = """"
    
    try:
        from importlib import import_module
        module_name = namespace.replace(""."", ""_"")
        try:
            module = import_module(module_name)
        except ModuleNotFoundError:
            return {}
        
        if hasattr(module, type_name):
            datatype = getattr(module, type_name)
            datatypes[type_name] = str(type(datatype))
    except ImportError:
        pass

    return datatypes",35.92909498509026,19.689337975721084,31.723801223899212,51.5625,40.74074074074074
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""number"":
        return ApiGearType.NUMBER
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    else:
        return None","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""number"":
        return ApiGearType.NUMBER
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    else:
        return None",19.000619421757172,9.762533530807715,13.20062890886858,30.08849557522124,22.950819672131146
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node or not datatype:
        return None

    property_name = node.name
    property_type = datatype

    if property_name.startswith(""Sig_""):
        property_name = property_name[4:]

    property = ApiGearProperty(
        name=property_name,
        type=property_type,
        description=node.description if node.description else """",
        unit=node.unit if node.unit else """",
        range_min=node.range_min if hasattr(node, 'range_min') else None,
        range_max=node.range_max if hasattr(node, 'range_max') else None,
        default_value=node.default_value if hasattr(node, 'default_value') else None
    )

    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node or not datatype:
        return None

    property_name = node.name
    property_type = datatype

    if property_name.startswith(""Sig_""):
        property_name = property_name[4:]

    property = ApiGearProperty(
        name=property_name,
        type=property_type,
        description=node.description if node.description else """",
        unit=node.unit if node.unit else """",
        range_min=node.range_min if hasattr(node, 'range_min') else None,
        range_max=node.range_max if hasattr(node, 'range_max') else None,
        default_value=node.default_value if hasattr(node, 'default_value') else None
    )

    return property",33.413319137816075,16.067771689139125,27.029949306569616,35.55555555555556,55.00000000000001
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

class VSpec:
    def __init__(self):
        self.data = {}

    def merge(self, other):
        self.data.update(other.data)

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec()
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                lines = f.readlines()
                for line in lines:
                    line = line.strip()
                    if line:
                        key, value = line.split('=', 1)
                        vspec.data[key.strip()] = value.strip()
        except FileNotFoundError:
            print(f""Warning: File not found: {spec_path}"")
    return vspec","from pathlib import Path

class VSpec:
    def __init__(self):
        self.data = {}

    def merge(self, other):
        self.data.update(other.data)

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec()
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        key, value = line.split('=', 1)
                        vspec.data[key.strip()] = value.strip()
        except FileNotFoundError:
            print(f""Warning: File not found: {spec_path}"")
    return vspec",28.472576451055424,19.39901875335671,20.511958885490326,34.44444444444444,39.53488372093023
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","from typing import Any

def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict) and key in base and isinstance(base[key], dict):
            deep_update(base[key], value)
        else:
            base[key] = value","from typing import Any

def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict) and key in base and isinstance(base[key], dict):
            deep_update(base[key], value)
        else:
            base[key] = value",79.04239358516084,76.65936070959262,77.01021363105075,81.25,81.25
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 8:
        return None
    try:
        int(v, 16)
    except ValueError:
        return None
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 8:
        return None
    try:
        int(v, 16)
    except ValueError:
        return None
    return v",50.55735832975432,40.37469867061998,51.8547346483973,40.0,70.0
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw()
    model.raw = data
    model.fqn = fqn
    try:
        model.resolve()
    except:
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw()
    model.raw = data
    model.fqn = fqn
    try:
        model.resolve()
    except Exception:
        return model
    return model",50.834134952981856,46.19742854888438,46.3057779297097,37.5,73.33333333333333
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_values = []
    for value in values:
        try:
            eval(value)
            valid_values.append(value)
        except (NameError, SyntaxError):
            pass
    return valid_values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_values = []
    for value in values:
        try:
            cls(value)
            valid_values.append(value)
        except (ValueError, TypeError):
            pass
    return valid_values",45.28353729340632,33.84653583738009,34.78761333624517,45.83333333333333,66.66666666666666
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, level: int = 0) -> str:
        indent = ""  "" * level
        node_str = f""{indent}- {node.name}""
        for attr in attributes:
            try:
                node_str += f"" ({attr}: {getattr(node, attr)})""
            except AttributeError:
                node_str += f"" ({attr}: N/A)""
        node_str += ""\n""
        for child in node.children:
            node_str += render_node(child, level + 1)
        return node_str

    return render_node(tree)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, level: int = 0) -> str:
        indent = ""  "" * level
        node_str = f""{indent}- {node.name}""
        for attr in attributes:
            try:
                value = getattr(node, attr)
                node_str += f"" ({attr}: {value})""
            except AttributeError:
                node_str += f"" ({attr}: N/A)""
        node_str += ""\n""
        for child in node.children:
            node_str += render_node(child, level + 1)
        return node_str

    return render_node(tree)",25.770438540827968,11.379273899572501,15.305719130136138,36.92307692307693,39.473684210526315
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if self.parent is None:
        return self, depth
    else:
        return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if self.parent is None:
        return self, depth
    else:
        return self.parent.get_instance_root(depth + 1)",50.9090059046418,45.05992343458631,45.68136334187565,55.00000000000001,57.89473684210527
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    count = 0
    current = self
    while current.parent is not None:
        count += 1
        current = current.parent
    return count","def count_instance_children_depth(self) -> int:
    count = 0
    current = self
    while current.parent:
        count += 1
        current = current.parent
    return count",25.501636625464247,11.856660123276004,14.062929856841858,26.08695652173913,50.0
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + '_'):
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + '_'):
            children_ids.append(node_id)
    return children_ids",64.22545578221317,40.64458257395656,42.92390722156277,73.33333333333333,100.0
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    value = getattr(o, name, default)
    return value",54.28198999477352,44.05262339943716,43.07533657965687,50.0,80.0
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.kind == ""signal"":
        fd.write(f"".signal {tree.name} {{\n"")
        if tree.range:
            fd.write(f""  range = {tree.range};\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.factor};\n"")
        if tree.offset:
            fd.write(f""  offset = {tree.offset};\n"")
        if tree.unit:
            fd.write(f""  unit = \""{tree.unit}\"";\n"")
        if tree.description:
            fd.write(f""  description = \""{tree.description}\"";\n"")
        fd.write(f""  default = {tree.default};\n"")
        fd.write(f""}};\n"")
    elif tree.kind == ""enum"":
        fd.write(f"".enum {tree.name} {{\n"")
        for item in tree.values:
            fd.write(f""  {item.name} = {item.value};\n"")
        fd.write(""};\n"")
    elif tree.kind == ""message"":
        fd.write(f"".message {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""group"":
        fd.write(f"".group {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""array"":
        fd.write(f"".array {tree.name} {{\n"")
        fd.write(f""  element_type = {tree.element_type};\n"")
        fd.write(f""  size = {tree.size};\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""struct"":
        fd.write(f"".struct {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.kind == ""signal"":
        fd.write(f"".signal {tree.name} {{\n"")
        if tree.range:
            fd.write(f""  range = {tree.range};\n"")
        if tree.factor:
            fd.write(f""  factor = {tree.factor};\n"")
        if tree.offset:
            fd.write(f""  offset = {tree.offset};\n"")
        if tree.unit:
            fd.write(f""  unit = \""{tree.unit}\"";\n"")
        if tree.description:
            fd.write(f""  description = \""{tree.description}\"";\n"")
        fd.write(f""  default = {tree.default};\n"")
        fd.write(f""}};\n"")
    elif tree.kind == ""enum"":
        fd.write(f"".enum {tree.name} {{\n"")
        for item in tree.values:
            fd.write(f""  {item.name} = {item.value};\n"")
        fd.write(""};\n"")
    elif tree.kind == ""message"":
        fd.write(f"".message {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""group"":
        fd.write(f"".group {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""array"":
        fd.write(f"".array {tree.name} {{\n"")
        fd.write(f""  element_type = {tree.element_type};\n"")
        fd.write(f""  size = {tree.size};\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""struct"":
        fd.write(f"".struct {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")",18.222007442333478,7.372718274445492,17.309889578126285,27.835051546391753,20.37037037037037
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for node in root.get_leaf_vss_nodes():
        branch_def_fqn = node.branch_def.fully_qualified_name
        if branch_def_fqn not in instances_meta:
            instances_meta[branch_def_fqn] = []
        instances_meta[branch_def_fqn].append(node.name)
    return instances_meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for node in root.get_leaf_vss_nodes():
        branch_def_fqn = node.branch_def.fully_qualified_name
        if branch_def_fqn not in instances_meta:
            instances_meta[branch_def_fqn] = []
        instances_meta[branch_def_fqn].append(node.name)
    return instances_meta",27.80135713052376,12.167211618074669,17.21790257139076,47.12643678160919,34.69387755102041
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    if node.data is None:
        return True
    if isinstance(node.data, list):
        return False
    if isinstance(node.data, dict):
        return False
    return True","def is_VSS_leaf(node: VSSNode) -> bool:
    if node.data is None:
        return True
    if isinstance(node.data, list) or isinstance(node.data, dict):
        return False
    return True",63.347556407722685,26.55009184259522,55.411562359724066,71.42857142857143,100.0
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance",35.82802108584732,25.916266987614407,25.816869987353826,31.57894736842105,60.0
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.is_branch_instance","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.is_branch_instance",30.783772350574136,23.671529472186087,26.130226596777128,33.33333333333333,40.0
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_prime = 16777619
    offset_basis = 2166136261
    hash_val = offset_basis
    for byte in identifier:
        hash_val ^= byte
        hash_val *= FNV_prime
        hash_val &= 0xFFFFFFFF
    return hash_val","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_prime = 16777619
    offset_basis = 2166136261
    hash_val = offset_basis
    for byte in identifier:
        hash_val ^= byte
        hash_val *= FNV_prime
        hash_val &= 0xFFFFFFFF
    return hash_val",33.48265756356493,24.810764839758164,31.751444361869968,47.368421052631575,30.0
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(layout.fragment_card, container, false);
        return view;
    }","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_card, container, false);
        return view;
    }",36.41866810087902,39.24500924677672,41.278148005224196,33.33333333333333,31.818181818181817
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent != null && buttonContent.icon != null) {
            buttonView.setIcon(buttonContent.icon);
            buttonView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    buttonContent.onClick();
                }
            });
            buttonView.setVisibility(View.VISIBLE);
        } else {
            buttonView.setVisibility(View.GONE);
        }
    }","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent != null && buttonContent.icon != null) {
            buttonView.setIcon(buttonContent.icon);
            buttonView.setOnClickListener(v -> buttonContent.onClick());
            buttonView.setVisibility(View.VISIBLE);
        } else {
            buttonView.setVisibility(View.GONE);
        }
    }",70.5426773483152,43.31017716700228,77.57020964561335,61.29032258064516,100.0
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
        View view = mDescriptiveTextOnlyLayoutView;
        if (view == null) {
            mDescriptiveTextOnlyLayoutView = createDescriptiveTextOnlyLayoutView();
        }
        return mDescriptiveTextOnlyLayoutView;
    }","protected final View getDescriptiveTextOnlyLayoutView() {
        View view = mDescriptiveTextOnlyLayoutView;
        if (view == null) {
            mDescriptiveTextOnlyLayoutView = createDescriptiveTextOnlyLayoutView();
        }
        return mDescriptiveTextOnlyLayoutView;
    }",15.616787464383513,17.56459898795232,22.44265782145339,13.636363636363635,8.823529411764707
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(header.getTitle());
    header.setIcon(header.getIcon());
    header.update();
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(""New Title"");
    header.setIcon(R.drawable.new_icon);
    header.update();
}",53.283186257363624,29.95197100101508,33.18077402843942,50.0,100.0
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    return LayoutInflater.from(this).inflate(R.layout.text_block, null);
}","private View getTextBlockLayoutView() {
    return LayoutInflater.from(this).inflate(R.layout.text_block, null);
}",35.07066187907857,4.032605336266308,11.250042180047988,25.0,0.0
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setPackage(packageName);
        ResolveInfo resolveInfo = packageManager.resolveActivity(intent, PackageManager.MATCH_DEFAULT);
        if (resolveInfo != null) {
            return resolveInfo.activityInfo.componentName;
        }
        return null;
    }","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setPackage(packageName);
        ResolveInfo resolveInfo = packageManager.resolveActivity(intent, PackageManager.MATCH_DEFAULT);
        if (resolveInfo != null) {
            return resolveInfo.activityInfo.componentName;
        }
        return null;
    }",32.86583905750729,25.580543580238263,28.65909297324104,41.509433962264154,35.714285714285715
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        if (customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        return true;
    }","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        if (customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        return true;
    }",64.7530654976199,50.960378719426515,54.08362930279912,68.25396825396825,85.71428571428571
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(componentName);
        Activity activity = (Activity) context;
        activity.finish();
    }","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(componentName);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    }",35.405152042972546,21.549296607482468,27.490666403117388,22.58064516129032,70.0
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
    try {
        ActivityDescription activityDescription = carPackageManager.getActivityDescription(packageName, activityName);
        if (activityDescription != null) {
            return activityDescription.getDistractionOptimization() == ActivityDescription.DISTRACTION_OPTIMIZATION_ENABLED;
        }
    } catch (Exception e) {
        return false;
    }
    return false;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
    try {
        ActivityDescription activityDescription = carPackageManager.getActivityDescription(packageName, activityName);
        if (activityDescription != null) {
            return activityDescription.getDistractionOptimization() == ActivityDescription.DISTRACTION_OPTIMIZATION_ENABLED;
        }
        return false;
    } catch (Exception e) {
        return false;
    }
}",34.25200850296661,20.39916303992572,21.53497934632496,37.93103448275862,57.14285714285714
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=default""), ""com.google.android.maps"");
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        return null;
    }","private Intent getMapsIntent() {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=default""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }

        return null;
    }",17.116786558944707,7.263380254965987,10.770865547912404,24.242424242424242,26.190476190476193
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    try {
        ResourceBundle config = ResourceBundle.getBundle(""homecards"");
        List<String> cardClasses = new ArrayList<>();
        for (String cardClass : config.getString(""card.classes"").split("","")) {
            cardClasses.add(cardClass.trim());
        }

        for (String cardClass : cardClasses) {
            try {
                Class<?> cardClassType = Class.forName(cardClass);
                Object cardInstance = cardClassType.getDeclaredConstructor().newInstance();
                if (cardInstance instanceof HomeCard) {
                    HomeCard card = (HomeCard) cardInstance;
                    card.display();
                } else {
                    System.err.println(""Error: "" + cardClass + "" does not implement HomeCard"");
                }
            } catch (Exception e) {
                System.err.println(""Error instantiating "" + cardClass + "": "" + e.getMessage());
            }
        }
    } catch (Exception e) {
        System.err.println(""Error loading configuration: "" + e.getMessage());
    }
}","private void initializeCards() {
    try {
        ResourceBundle config = ResourceBundle.getBundle(""homecards"");
        String cardClassesString = config.getString(""card.classes"");
        String[] cardClasses = cardClassesString.split("","");

        for (String cardClass : cardClasses) {
            String trimmedCardClass = cardClass.trim();
            try {
                Class<?> cardClassType = Class.forName(trimmedCardClass);
                Object cardInstance = cardClassType.getDeclaredConstructor().newInstance();
                if (cardInstance instanceof HomeCard) {
                    HomeCard card = (HomeCard) cardInstance;
                    card.display();
                } else {
                    System.err.println(""Error: "" + trimmedCardClass + "" does not implement HomeCard"");
                }
            } catch (Exception e) {
                System.err.println(""Error instantiating "" + trimmedCardClass + "": "" + e.getMessage());
            }
        }
    } catch (Exception e) {
        System.err.println(""Error loading configuration: "" + e.getMessage());
    }
}",22.92446945556392,7.559857013855434,7.874284544663987,36.26373626373626,40.0
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }

        List<TaskAppearedInfo> tasksToRemove = new ArrayList<>();
        for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
            if (taskAppearedInfo.isMultiWindow() && taskAppearedInfo.isDangling()) {
                tasksToRemove.add(taskAppearedInfo);
            }
        }

        taskAppearedInfos.removeAll(tasksToRemove);
    }","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }

        taskAppearedInfos.removeIf(taskAppearedInfo -> taskAppearedInfo.isMultiWindow() && taskAppearedInfo.isDangling());
    }",29.602678953202588,26.885451044577096,29.151527394495886,30.555555555555557,31.818181818181817
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    String mode = intent.getStringExtra(""mode"");
    if (mode != null && mode.equals(""dark"")) {
        setTitle(""Dark Mode"");
    } else {
        setTitle(""Light Mode"");
    }
}","private void updateMode() {
    String mode = intent.getStringExtra(""mode"");
    if (mode != null && mode.equals(""dark"")) {
        setTitle(""Dark Mode"");
    } else {
        setTitle(""Light Mode"");
    }
}",21.19435045131049,10.90009697802911,31.02016197006999,9.523809523809524,33.33333333333333
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    return chronometer;
}","private Chronometer getChronometer() {
    if (chronometer == null) {
        chronometer = new Chronometer();
    }
    return chronometer;
}",32.89633504148476,6.1576760862683235,13.889202541209169,11.538461538461538,0.0
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
        int width = (int) (this.cardWidth * this.scale);
        int height = (int) (this.cardHeight * this.scale);
        Bitmap blurredBitmap = this.image.copy(Bitmap.Config.ARGB_8888, true).blur(width, height);
        Bitmap scaledBitmap = Bitmap.createScaledBitmap(blurredBitmap, width, height, true);
        blurredBitmap.recycle();
        ImageView imageView = new ImageView(this.context);
        imageView.setImageBitmap(scaledBitmap);
        imageView.setLayoutParams(new ViewGroup.LayoutParams(width, height));
        return imageView;
    }","private View getMediaLayoutView() {
        int width = (int) (this.cardWidth * this.scale);
        int height = (int) (this.cardHeight * this.scale);
        Bitmap blurredBitmap = this.image.copy(Bitmap.Config.ARGB_8888, true).blur(width, height);
        Bitmap scaledBitmap = Bitmap.createScaledBitmap(blurredBitmap, width, height, true);
        blurredBitmap.recycle();
        ImageView imageView = new ImageView(this.context);
        imageView.setImageBitmap(scaledBitmap);
        imageView.setLayoutParams(new ViewGroup.LayoutParams(width, height));
        return imageView;
    }",24.380801821047516,6.708839685423082,9.900173533009175,39.53488372093023,41.37931034482759
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    image.setAlpha(255);
    image.setColorFilter(0x80000000);
    image.setBounds(0, 0, getWidth(), getHeight());
    image.draw(getBackground().getCanvas());
}","private void updateBackgroundImage(Drawable image) {
    image.setAlpha(255);
    image.setColorFilter(0x80000000);
    image.setBounds(0, 0, getWidth(), getHeight());
    image.draw(getBackground().getCanvas());
}",14.803046333283165,2.5818364707454666,8.980776212814545,36.53846153846153,11.11111111111111
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaView.setVisibility(View.VISIBLE);
    mediaView.setTitle(title);
    mediaView.setSubtitle(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaView.setVisibility(View.VISIBLE);
    mediaView.setTitle(title);
    mediaView.setSubtitle(subtitle);
}",70.842490254843,59.004687263928076,61.207379018601806,63.1578947368421,100.0
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        content.startChronometer();
    } else {
        content.hideChronometer();
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        content.startChronometer();
    } else {
        content.hideChronometer();
    }
}",38.50772050053479,52.75568628444888,55.164084606579166,31.11111111111111,15.0
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
}","public void onCallAdded(Call call) {
}",44.90186416901222,24.76498688229712,31.76554671682869,23.076923076923077,0.0
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
        call.resetState();
        call.unregisterCallback();
    }","public void onCallRemoved(Call call) {
        call.resetState();
        call.unregisterCallback();
    }",22.636273428363683,12.073177334748134,20.61477352156375,15.0,42.857142857142854
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = formatPhoneNumber(number);
    callViewModel.phoneNumber = formattedNumber;
    updateUIControls();
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = formatPhoneNumber(number);
    callViewModel.phoneNumber = formattedNumber;
    updateUIControls();
}",23.06623726291791,27.068767090990946,29.779515294014015,16.666666666666664,18.75
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
        muteButton = (ImageButton) findViewById(R.id.mute_button);
        endCallButton = (ImageButton) findViewById(R.id.end_call_button);
        dialpadButton = (ImageButton) findViewById(R.id.dialpad_button);

        muteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                toggleMute();
            }
        });

        endCallButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                endCall();
            }
        });

        dialpadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showDialpad();
            }
        });
    }","private void initializeAudioControls() {
        muteButton = findViewById(R.id.mute_button);
        endCallButton = findViewById(R.id.end_call_button);
        dialpadButton = findViewById(R.id.dialpad_button);

        if (muteButton instanceof ImageButton) {
            muteButton.setOnClickListener(v -> toggleMute());
        }

        if (endCallButton instanceof ImageButton) {
            endCallButton.setOnClickListener(v -> endCall());
        }

        if (dialpadButton instanceof ImageButton) {
            dialpadButton.setOnClickListener(v -> showDialpad());
        }
    }",21.774851959315004,5.405463811495537,9.367740817208347,34.090909090909086,38.23529411764706
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (m_dbusConnection != nullptr) {
        m_dbusConnection->notifyListener(_listener, _subscription);
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (m_dbusConnection != nullptr) {
        m_dbusConnection->notifyListener(_listener, _subscription);
    }
}",62.108904504699595,43.78826865860794,61.16908849062524,43.47826086956522,100.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(connMutex);
    if (connThreads.find(conn) == connThreads.end()) {
        connThreads[conn] = t;
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(connMutex);
    if (connThreads.find(conn) == connThreads.end()) {
        connThreads[conn] = t;
    }
}",28.305704161931345,14.435318690471046,20.015119440630293,43.47826086956522,35.294117647058826
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        libdbusWatch->unwatch();
        delete libdbusWatch;
    }
    if (data) {
        delete data;
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        libdbusWatch->unwatch();
        delete libdbusWatch;
    }
    if (data) {
        delete data;
    }
}",27.959086363288204,16.707856240018682,21.34061042525535,28.333333333333332,45.45454545454545
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}",16.83177476235252,2.372786059738577,11.185859221217735,38.38383838383838,15.384615384615385
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    std::shared_ptr<DBusObjectManager> manager;
    if (!objectManager_) {
        std::lock_guard<std::mutex> lock(objectManagerMutex_);
        if (!objectManager_) {
            objectManager_ = std::make_shared<DBusObjectManager>(connection_);
        }
    }
    return objectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> manager;
    if (!manager) {
        std::lock_guard<std::mutex> lock(objectManagerMutex_);
        if (!manager) {
            manager = std::make_shared<DBusObjectManager>(connection_);
        }
    }
    return manager;
}",52.167150337853755,19.464521962073487,22.53741272267485,66.66666666666666,100.0
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (connection == nullptr) {
        return false;
    }

    return connection->releaseName(serviceName);
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (connection == nullptr) {
        return false;
    }

    return connection->releaseName(serviceName);
}",16.127376733367996,3.5358126131070393,10.973694320364945,30.0,20.0
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage reply = DBusMessage::create_reply(_libdbusPendingCall->reply);
    return reply;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage reply = DBusMessage(DBusMessage::TYPE_REPLY, _libdbusPendingCall->reply->path, _libdbusPendingCall->reply->interface, _libdbusPendingCall->reply->member);
    reply.append_arguments(_libdbusPendingCall->reply->arguments);
    return reply;
}",20.140453270690646,4.529003780616263,8.725116994454003,25.64102564102564,41.66666666666667
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusHandler*> handlers;
    {
        std::lock_guard<std::mutex> lock(async_handlers_mutex_);
        handlers = async_handlers_;
        async_handlers_.clear();
    }

    for (DBusHandler* handler : handlers) {
        delete handler;
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusHandler*> handlers;
    {
        std::lock_guard<std::mutex> lock(async_handlers_mutex_);
        handlers = async_handlers_;
        async_handlers_.clear();
    }

    for (DBusHandler* handler : handlers) {
        if (handler) {
            delete handler;
        }
    }
}",31.77756156370949,5.738902899423147,6.065220906435207,65.3061224489796,50.0
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    for (auto& it : signalStates) {
        if (it.second.success) {
            for (auto& handler : it.second.handlers) {
                handler.callback(it.first, it.second.value);
            }
        }
    }
}","void DBusConnection::handleSignalStates() {
    for (auto& it : signalStates) {
        if (it.second.success) {
            for (auto& handler : it.second.handlers) {
                handler.callback(it.first, it.second.value);
            }
        }
    }
}",14.096134463745985,6.703677685277041,7.289555821880805,17.391304347826086,25.0
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    connections_.erase(_connectionId);
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = connections_.find(_connectionId);
    if (it != connections_.end()) {
        connections_.erase(it);
    }
}",32.30174420930242,16.898959014073654,21.59373210885032,65.71428571428571,25.0
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::Signal) {
        const std::string& interface = dbusMessage.interface();
        const std::string& member = dbusMessage.member();

        if (interface == ""org.freedesktop.DBus"" && member == ""NameOwnerChanged"") {
            const std::string& name = dbusMessage.arguments()[0].toString();
            const std::string& oldOwner = dbusMessage.arguments()[1].toString();
            const std::string& newOwner = dbusMessage.arguments()[2].toString();

            if (!oldOwner.empty()) {
                if (m_removeHandlers.count(name)) {
                    for (auto& handler : m_removeHandlers[name]) {
                        handler(name, oldOwner, newOwner);
                    }
                }
            } else {
                if (m_addHandler.count(name)) {
                    for (auto& handler : m_addHandler[name]) {
                        handler(name, oldOwner, newOwner);
                    }
                }
            }
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::Signal) {
        const std::string& interface = dbusMessage.interface();
        const std::string& member = dbusMessage.member();

        if (interface == ""org.freedesktop.DBus"" && member == ""NameOwnerChanged"") {
            const std::string& name = dbusMessage.arguments()[0].toString();
            const std::string& oldOwner = dbusMessage.arguments()[1].toString();
            const std::string& newOwner = dbusMessage.arguments()[2].toString();

            if (!oldOwner.empty()) {
                if (m_removeHandlers.count(name)) {
                    for (auto& handler : m_removeHandlers[name]) {
                        handler(name, oldOwner, newOwner);
                    }
                }
            } else {
                if (m_addHandler.count(name)) {
                    for (auto& handler : m_addHandler[name]) {
                        handler(name, oldOwner, newOwner);
                    }
                }
            }
        }
    }
}",49.28910871655884,7.141701139426115,38.499582211657746,51.515151515151516,100.0
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::OK;
    _availableServiceInstances.clear();

    if (m_availableServiceInstances.empty()) {
        return;
    }

    _availableServiceInstances = m_availableServiceInstances;
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::OK;
    _availableServiceInstances.clear();

    for (const auto& instance : m_availableServiceInstances) {
        _availableServiceInstances.push_back(instance);
    }
}",36.28781688218885,16.679551613797315,17.432754875997052,68.18181818181817,42.857142857142854
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::NotStarted;
    _availabilityStatus = AvailabilityStatus::Unknown;

    DBusError error;
    DBusConnection *connection = dbus_bus_get(DBUS_BUS_SESSION, &error);

    if (error.name != nullptr) {
        _callStatus = CallStatus::Failed;
        return;
    }

    DBusMessage *msg = dbus_message_new_method_call(connection, ""org.freedesktop.DBus"", ""/"", ""NameOwner"");
    if (msg == nullptr) {
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    dbus_message_append_args(msg, DBUS_TYPE_STRING, _instance.c_str(), DBUS_TYPE_STRING, &error);
    if (error.name != nullptr) {
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    DBusMessage *reply = dbus_connection_send_with_reply_and_block(connection, msg, -1, &error);
    if (error.name != nullptr) {
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    if (reply == nullptr) {
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    if (dbus_message_is_error(reply)) {
        _callStatus = CallStatus::Failed;
    } else {
        _availabilityStatus = AvailabilityStatus::Available;
    }

    dbus_message_unref(msg);
    dbus_message_unref(reply);
    dbus_connection_unref(connection);
    _callStatus = CallStatus::Success;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::NotStarted;
    _availabilityStatus = AvailabilityStatus::Unknown;

    DBusError error;
    DBusConnection *connection = dbus_bus_get(DBUS_BUS_SESSION, &error);

    if (error.name != nullptr) {
        _callStatus = CallStatus::Failed;
        return;
    }

    DBusMessage *msg = dbus_message_new_method_call(connection, ""org.freedesktop.DBus"", ""/"", ""NameOwner"");
    if (msg == nullptr) {
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    dbus_message_append_args(msg, DBUS_TYPE_STRING, _instance.c_str(), DBUS_TYPE_STRING, &error);
    if (error.name != nullptr) {
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    DBusMessage *reply = dbus_connection_send_with_reply_and_block(connection, msg, -1, &error);
    if (error.name != nullptr) {
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    if (reply == nullptr) {
        dbus_message_unref(msg);
        dbus_connection_unref(connection);
        _callStatus = CallStatus::Failed;
        return;
    }

    if (dbus_message_is_error(reply)) {
        _callStatus = CallStatus::Failed;
    } else {
        char *owner = dbus_message_get_string(reply);
        if (owner != nullptr) {
            _availabilityStatus = AvailabilityStatus::Available;
            free(owner);
        } else {
            _availabilityStatus = AvailabilityStatus::Unavailable;
        }
    }

    dbus_message_unref(msg);
    dbus_message_unref(reply);
    dbus_connection_unref(connection);
    _callStatus = CallStatus::Success;
}",35.27400309684264,6.95929124547517,24.65959695888886,70.58823529411765,38.88888888888889
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    m_serviceUnavailable = true;
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    m_serviceUnavailable = true;
}",30.003450359244226,0.07716053186680985,5.834076802545995,14.102564102564102,0.0
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    for (auto& listener : listeners) {
        listener->onInterfaceStatusChanged(_objectPath, _interfaceName, _availability);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    for (auto& listener : listeners_) {
        listener->onInterfaceStatusChanged(_objectPath, _interfaceName, _availability);
    }
}",48.69334558793834,38.310799048520884,39.832871551569504,43.90243902439025,72.72727272727273
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    m_statusListeners.push_back(_listener);
    m_subscriptions.push_back(_subscription);

    auto callback = [this, _listener, _subscription]() {
        emit statusChanged(_listener, _subscription);
    };

    QTimer::singleShot(0, callback);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    m_statusListeners.push_back(_listener);
    m_subscriptions.push_back(_subscription);

    QTimer::singleShot(0, [this, _listener, _subscription]() {
        emit statusChanged(_listener, _subscription);
    });
}",44.15160761070674,31.528613442545012,40.07781700028195,30.0,75.0
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove(listeners_.begin(), listeners_.end(), _listener), listeners_.end());
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = std::remove(listeners_.begin(), listeners_.end(), _listener);
    listeners_.erase(it, listeners_.end());
}",31.283114326132743,19.272495872315616,25.20519952745345,52.083333333333336,28.57142857142857
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    m_signal_state_handlers[_subscription] = _handler;
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    m_signal_state_handlers[_subscription] = _handler;
}",43.22111850545389,38.163309113713375,40.27672046365773,61.111111111111114,33.33333333333333
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::Success) {
        std::vector<std::string> addresses;
        for (const auto& address : _availableServiceInstances) {
            addresses.push_back(address.ToString());
        }
        _call(addresses);
    } else {
        _call({});
    }
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::Success) {
        std::vector<std::string> addresses;
        for (const auto& address : _availableServiceInstances) {
            addresses.push_back(address.ToString());
        }
        _call(addresses);
    } else {
        _call({});
    }
}",56.76960528003197,31.56448552143068,43.29171337647494,68.88888888888889,83.33333333333334
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::MethodCall) {
        const std::string& interface = dbusMessage.interface();
        const std::string& member = dbusMessage.member();

        if (interface == ""org.freedesktop.DBus.Introspectable"") {
            if (member == ""Introspect"") {
                return handleIntrospect(dbusMessage);
            }
        }

        auto it = handlers_.find(interface + ""."" + member);
        if (it != handlers_.end()) {
            return it->second(dbusMessage);
        }
    } else if (dbusMessage.type() == DBusMessage::Error) {
        return false;
    }

    return false;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.type() == DBusMessage::MethodCall) {
        const std::string& interface = dbusMessage.interface();
        const std::string& member = dbusMessage.member();

        if (interface == ""org.freedesktop.DBus.Introspectable"") {
            if (member == ""Introspect"") {
                return handleIntrospect(dbusMessage);
            }
        }

        auto it = handlers_.find(interface + ""."" + member);
        if (it != handlers_.end()) {
            return it->second(dbusMessage);
        }
    } else if (dbusMessage.type() == DBusMessage::Error) {
        return false;
    }

    return false;
}",24.509156023253087,8.154408172973726,9.138972676795373,37.5,43.24324324324324
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (handlers_.count(dbusInterfaceHandlerPath)) {
        if (handlers_[dbusInterfaceHandlerPath] == dbusInterfaceHandler) {
            return true;
        }
        return false;
    }

    handlers_[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (handlers_.count(dbusInterfaceHandlerPath)) {
        return false;
    }

    handlers_[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}",28.166885486817073,15.708750558979917,22.75244218193917,36.11111111111111,38.095238095238095
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> lock(registeredObjectsMutex);
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }
    registeredObjectsTable_[ifpath] = handler;
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> lock(registeredObjectsMutex);
    if (registeredObjectsTable_.count(ifpath)) {
        return false;
    }
    registeredObjectsTable_[ifpath] = handler;
    return true;
}",20.51965591887299,9.252937312255671,17.066650218657976,39.75903614457831,16.0
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t response[8];
    response[0] = 0x10;
    response[1] = 0x01;
    response[2] = reset_type;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;

    uds_send(response, 8);
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t response[8] = {0x10, 0x01, reset_type, 0x00, 0x00, 0x00, 0x00, 0x00};

    uds_send(response, 8);
}",14.257066352680395,6.170166677243976,6.4730719955096845,9.090909090909092,35.294117647058826
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 0) {
        return;
    }

    if (data[0] == 0x01) {
        
    } else {
        
    }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 0) {
        return;
    }

    if (data[0] == 0x01) {
        
    } else {
        
    }
}",26.81013328205913,24.47557124067186,28.501395996091784,20.930232558139537,33.33333333333333
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
    
}","void send_request_download_response() {

}",27.030848637951788,5.8579300391277156e-05,1.8733359725067695,6.25,0.0
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[2];
    response[0] = 0x53;
    response[1] = block_sequence_counter;
    uds_send(response, 2);
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[2] = {0x53, block_sequence_counter};
    uds_send(response, 2);
}",12.262632286391009,4.328964575265184,9.42744692324003,11.76470588235294,23.52941176470588
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uds_message_t msg;
    memset(&msg, 0, sizeof(uds_message_t));

    msg.service_id = UDS_ROUTINE_CONTROL;
    msg.message_id = UDS_ROUTINE_CONTROL_RESULT;
    msg.session = 0;
    msg.required_data_length = 1;
    msg.data[0] = result;

    iso_tp_send_message(routine_id, &msg);
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uds_message_t msg;
    memset(&msg, 0, sizeof(uds_message_t));

    msg.service_id = UDS_ROUTINE_CONTROL;
    msg.message_id = UDS_ROUTINE_CONTROL_RESULT;
    msg.session = 0;
    msg.required_data_length = 1;
    msg.data[0] = result;

    iso_tp_send_message(routine_id, &msg);
}",24.712931843595154,8.897022109044515,11.749577060207901,28.205128205128204,50.0
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x03;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x7F;

    iso_tp_send(response, 8);
}","static void send_transer_exit_positive_response() {
    uint8_t response[8] = {0x7E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F};

    iso_tp_send(response, 8);
}",12.270125605774945,6.360003209533146,6.962923455990879,9.090909090909092,26.666666666666668
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    static const uint32_t can_id_to_map[] = {
        0x100, 0x200, 0x300, 0x400, 0x500, 0x600, 0x700, 0x800,
        0x900, 0xA00, 0xB00, 0xC00, 0xD00, 0xE00, 0xF00, 0x1000
    };
    static const uint8_t map[] = {
        0, 1, 2, 3, 4, 5, 6, 7,
        8, 9, 10, 11, 12, 13, 14, 15
    };

    for (int i = 0; i < sizeof(can_id_to_map) / sizeof(can_id_to_map[0]); ++i) {
        if (can_id == can_id_to_map[i]) {
            return map[i];
        }
    }
    return 0;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    static const uint32_t can_id_to_map[] = {
        0x100, 0x200, 0x300, 0x400, 0x500, 0x600, 0x700, 0x800,
        0x900, 0xA00, 0xB00, 0xC00, 0xD00, 0xE00, 0xF00, 0x1000
    };
    static const uint8_t map[] = {
        0, 1, 2, 3, 4, 5, 6, 7,
        8, 9, 10, 11, 12, 13, 14, 15
    };

    for (int i = 0; i < sizeof(can_id_to_map) / sizeof(can_id_to_map[0]); ++i) {
        if (can_id == can_id_to_map[i]) {
            return map[i];
        }
    }
    return 0;
}",49.42912795874667,16.549909988910596,47.833268512742755,47.61904761904761,85.71428571428571
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can *lin2can = dev->data;
	int i;

	if (filter_id < 0) {
		for (i = 0; i < ARRAY_SIZE(lin2can->rx_filters); i++) {
			lin2can->rx_filters[i].callback = NULL;
		}
	} else {
		if (filter_id < ARRAY_SIZE(lin2can->rx_filters)) {
			lin2can->rx_filters[filter_id].callback = NULL;
		}
	}
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can *lin2can = dev->data;
	int i;

	if (filter_id < 0) {
		for (i = 0; i < ARRAY_SIZE(lin2can->rx_filters); i++) {
			lin2can->rx_filters[i].callback = NULL;
		}
	} else {
		if (filter_id >= 0 && filter_id < ARRAY_SIZE(lin2can->rx_filters)) {
			lin2can->rx_filters[filter_id].callback = NULL;
		}
	}
}",39.993077978668055,30.824624184573846,33.702553154529014,47.61904761904761,47.82608695652174
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct lin_context *ctx = (struct lin_context *)user_data;
    struct lin_tx_queue *tx_queue = &ctx->tx_queue;

    if (tx_queue->frame == NULL) {
        return false;
    }

    if (frame->frame_number == tx_queue->frame->frame_number) {
        tx_queue->frame->completion_callback(tx_queue->frame->user_data);
        tx_queue->frame = NULL;
        return true;
    }

    return false;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct lin_context *ctx = (struct lin_context *)user_data;
    struct lin_tx_queue *tx_queue = &ctx->tx_queue;

    if (tx_queue->frame == NULL) {
        return false;
    }

    if (frame->frame_number == tx_queue->frame->frame_number) {
        tx_queue->frame->completion_callback(tx_queue->frame->user_data);
        tx_queue->frame = NULL;
        return true;
    }

    return false;
}",37.703214799727434,22.31005168257997,23.675221309433205,44.827586206896555,60.0
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    struct can_frame can_frame;

    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    memcpy(can_frame.data, frame->data, frame->dlc);

    if (user_data != NULL) {
        ((void (*)(struct can_frame *))user_data)(&can_frame);
    }
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    struct can_frame can_frame;

    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    memcpy(can_frame.data, frame->data, frame->dlc);

    if (user_data != NULL) {
        ((void (*)(struct can_frame *))user_data)(&can_frame);
    }
}",23.18961346229028,6.85982955098319,12.967589815419304,37.93103448275862,35.0
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
    struct hv_shield_data *data = dev->data;

    data->regmap = devm_regmap_get(dev, data->regmap_resource, NULL);
    if (!data->regmap) {
        return -ENOMEM;
    }

    regmap_write(data->regmap, data->enable_reg, data->enable_mask);
    regmap_write(data->regmap, data->config_reg, data->config_value);

    return 0;
}","static int hv_shield_init(const struct device* dev) {
    struct hv_shield_data *data = dev->data;

    if (!data) {
        return -EINVAL;
    }

    data->regmap = devm_regmap_get(dev, data->regmap_resource, NULL);
    if (!data->regmap) {
        return -ENOMEM;
    }

    regmap_write(data->regmap, data->enable_reg, data->enable_mask);
    regmap_write(data->regmap, data->config_reg, data->config_value);

    return 0;
}",21.77332792187811,6.773920700806004,11.17493095865595,30.434782608695656,38.70967741935484
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
    struct hvs_data *hvs = dev->data;
    int ret;

    if (!hvs) {
        return -EINVAL;
    }

    if (dac >= ARRAY_SIZE(hvs->dac_gains)) {
        return -EINVAL;
    }

    hvs->dac_gains[dac] = gain;

    ret = regulator_set_voltage(hvs->hv_regulator,
                                 gain_to_voltage(gain),
                                 gain_to_uV(gain));
    if (ret) {
        return ret;
    }

    return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
    struct hvs_data *hvs = dev->data;
    int ret;

    if (!hvs) {
        return -EINVAL;
    }

    if (dac >= ARRAY_SIZE(hvs->dac_gains)) {
        return -EINVAL;
    }

    hvs->dac_gains[dac] = gain;

    ret = regulator_set_voltage(hvs->hv_regulator,
                                 gain_to_voltage(gain),
                                 gain_to_uV(gain));
    if (ret) {
        return ret;
    }

    return 0;
}",45.94333199187201,30.824081041844327,35.24589764334705,54.54545454545454,63.1578947368421
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t reg_value = 0;
    uint8_t nibble_swapped_index = (index & 0x0F) << 4 | (index & 0xF0) >> 4;

    if (enable) {
        reg_value = 1 << nibble_swapped_index;
    }

    return 0;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t reg_value = 0;
    uint8_t nibble_swapped_index = (index & 0x0F) << 4 | (index & 0xF0) >> 4;

    if (enable) {
        reg_value = 1 << nibble_swapped_index;
    }

    return 0;
}",27.215380582061936,20.905879030381193,22.546838266420018,32.075471698113205,33.33333333333333
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_frame forwarded_frame = *frame;
    struct can_bus *bus = (struct can_bus *)user_data;

    if (bus && bus->transmit) {
        bus->transmit(&forwarded_frame);
    }
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_frame forwarded_frame = *frame;
    struct can_bus *bus = (struct can_bus *)user_data;

    if (bus && bus->transmit) {
        bus->transmit(&forwarded_frame);
    }
}",43.2604585545522,24.80765033445687,28.234183883751935,45.0,75.0
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    if (entries == NULL || entry_count <= 0) {
        return -1;
    }

    for (int i = 0; i < entry_count; i++) {
        if (entries[i].interface_id < 0 || entries[i].can_id < 0) {
            return -1;
        }
    }

    return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    if (entries == NULL || entry_count <= 0) {
        return -1;
    }

    for (int i = 0; i < entry_count; i++) {
        if (entries[i].interface_id < 0 || entries[i].can_id < 0) {
            return -1;
        }
    }

    return 0;
}",41.00960716075184,36.836006390060604,38.52965337422821,41.30434782608695,47.368421052631575
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
    return 0;
}","static int can_router_sysinit() {
    return 0;
}",31.897066549120613,1.928492041734402,11.866670706472181,13.793103448275861,0.0
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret = 0;
	gpio_port_value_t current_value = 0;
	int i;

	for (i = 0; i < 32; i++) {
		if ((mask >> i) & 1) {
			if ((value >> i) & 1) {
				current_value |= (1 << i);
			} else {
				current_value &= ~(1 << i);
			}
		}
	}

	ret = gpio_port_set_drive_state(port, GPIO_DRIVE_STATE_HIGH);
	if (ret < 0) {
		return ret;
	}

	ret = gpio_port_write_value(port, current_value);
	if (ret < 0) {
		return ret;
	}

	return ret;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret = 0;

	ret = gpio_port_set_drive_state(port, GPIO_DRIVE_STATE_HIGH);
	if (ret < 0) {
		return ret;
	}

	ret = gpio_port_write_value(port, value & mask);
	if (ret < 0) {
		return ret;
	}

	return ret;
}",34.13281745207241,23.85430983834871,36.01463923982358,30.508474576271187,46.15384615384615
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (!dev || !free_slots) {
        return -EINVAL;
    }

    if (dev->resource_lock) {
        mutex_lock(&dev->resource_lock);
    }

    *free_slots = dev->free_cb_slots;

    if (dev->resource_lock) {
        mutex_unlock(&dev->resource_lock);
    }

    return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (!dev || !free_slots) {
        return -EINVAL;
    }

    if (dev->resource_lock) {
        mutex_lock(&dev->resource_lock);
    }

    *free_slots = dev->free_cb_slots;

    if (dev->resource_lock) {
        mutex_unlock(&dev->resource_lock);
    }

    return 0;
}",48.279665478012426,38.66314512414987,44.45551678789981,60.0,50.0
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;

    if (!lin_data) {
        return -EINVAL;
    }

    if (frame_id >= AL_MAX_FRAME_ID) {
        return -EINVAL;
    }

    if (callback == NULL) {
        return -EINVAL;
    }

    lin_data->incoming_callbacks[frame_id] = callback;
    lin_data->incoming_frame_sizes[frame_id] = frame_size;
    lin_data->incoming_user_data[frame_id] = user_data;

    return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;

    if (!lin_data) {
        return -EINVAL;
    }

    if (frame_id >= AL_MAX_FRAME_ID) {
        return -EINVAL;
    }

    if (callback == NULL) {
        return -EINVAL;
    }

    lin_data->incoming_callbacks[frame_id] = callback;
    lin_data->incoming_frame_sizes[frame_id] = frame_size;
    lin_data->incoming_user_data[frame_id] = user_data;

    return 0;
}",42.02901033602415,34.30418405134765,37.66339790899547,48.529411764705884,47.61904761904761
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;

    if (!lin_data) {
        return -EINVAL;
    }

    lin_data->outgoing_cb[frame_id] = callback;
    lin_data->outgoing_frame_size[frame_id] = frame_size;
    lin_data->outgoing_user_data[frame_id] = user_data;

    return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_lin_data *lin_data = dev->data;

    if (!lin_data) {
        return -EINVAL;
    }

    if (frame_id >= ARRAY_SIZE(lin_data->outgoing_cb)) {
        return -EINVAL;
    }

    lin_data->outgoing_cb[frame_id] = callback;
    lin_data->outgoing_frame_size[frame_id] = frame_size;
    lin_data->outgoing_user_data[frame_id] = user_data;

    return 0;
}",35.47166617340757,26.12635890491159,34.45778478031533,45.588235294117645,35.714285714285715
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(void) {
    active_schedule_table = schedule_table;
    current_position = 0;
    return 0;
}","int abstract_lin_scheduler_set_active_table(void) {
    active_schedule_table = schedule_table;
    current_position = 0;
    return 0;
}",5.027079931200558,0.9003705652468885,3.2430368788535904,2.631578947368421,13.333333333333334
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->running = 0;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->running = 0;
}",19.7648566426521,8.537025563868134,13.855734340073594,40.0,16.666666666666664

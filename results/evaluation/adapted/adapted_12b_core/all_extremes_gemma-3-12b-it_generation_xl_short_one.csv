category,rank,language,id,reference,generated,generated_rci,codebleu
top,1,python,4,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for t in cls.__dict__:
        if isinstance(t, tuple) and t[0] == datatype:
            return t
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for t in cls.__dict__:
        if isinstance(t, tuple) and t[0] == datatype:
            return t
    return None",71.83
top,2,java,29,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImage(buttonContent.getImage());
        buttonView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                buttonContent.onClick();
            }
        });
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[","int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}",67.71
top,3,python,18,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if name in node_id:
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if name in node_id:
            children_ids.append(node_id)
    return children_ids",62.75
top,4,cpp,71,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    _connection->addSignalStateHandler(_handler, _subscription);
}

**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}

**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}

**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}

**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}

**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}

**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i","int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
**Summary:**
""Returns the number of elements in the vector""

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
**Summary:**
""Returns the number of elements in the vector",59.71
top,5,java,34,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if ((appTypesToShow & componentAppType) == 0) {
        return false;
    }
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    if (customMediaComponents.contains(componentName.getClassName())) {
        return false;
    }
    return true;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far =","int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;",57.15
bottom,1,c,80,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;","void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}

**Summary:**
""Sends a positive UDS response to a Request Download, specifying the maximum block length""

**Code:**
void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;",11.32
bottom,2,java,38,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
    Intent intent = new Intent(Intent.ACTION_VIEW);
    intent.setData(Uri.parse(""geo:0,0?q=1""));
    return intent;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;","int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;

    for (int i = 0; i < size; i++) {
        current_max = current_max + a[i];
        if (current_max < 0)
            current_max = 0;
        if (max_so_far < current_max)
            max_so_far = current_max;
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray of non-negative numbers""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = 0;
    int current_max = 0;",14.2
bottom,3,c,83,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit negative response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_negative_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x01;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit positive response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_positive_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit negative response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_negative_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x01;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit positive response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_positive_response","static void send_transer_exit_positive_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit negative response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_negative_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x01;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit positive response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_positive_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit negative response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_negative_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x01;
    response[7] = 0x7E;

    for (i = 0; i < 8; i++) {
        send_byte(response[i]);
    }
}

**Summary:**
""Sends a UDS Transfer Exit positive response message via the ISO-TP protocol""

**Code:**
static void send_transer_exit_positive_response",15.01
bottom,4,java,50,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
    mCallControl.setMuteButton(mCallControl.getMuteButton(), this);
    mCallControl.setEndCallButton(mCallControl.getEndCallButton(), this);
    mCallControl.setDialpadButton(mCallControl.getDialpadButton(), this);
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max =","int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int maxSubArraySum(int a[], int size) {
    int max_so_far = a[0];
    int current_max = a[0];

    for (int i = 1; i < size; i++) {
        current_max = Math.max(a[i], current_max + a[i]);
        max_so_far = Math.max(max_so_far, current_max);
    }
    return max_so_far;
}

**Summary:**
""Find the maximum sum of a contiguous subarray",15.9
bottom,5,java,43,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    Bitmap blurredBitmap = Bitmap.createScaledBitmap(mBitmap, mWidth, mHeight, true);
    blurredBitmap = BlurUtils.blur(blurredBitmap, 8);
    return new ImageView(getContext());
}

**Summary:**
""Find the maximum value in an array""

**Code:**
int FindMax(int arr[], int n) {
    int i;
    int max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}

**Summary:**
""Find the minimum value in an array""

**Code:**
int FindMin(int arr[], int n) {
    int i;
    int min = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}

**Summary:**
""Find the maximum sum of a contiguous subarray""

**Code:**
int FindMaxSum(int arr[], int n) {
    int max_so_far = 0;
    int current_max = 0;
    int i;
    for (i = 0; i < n; i++) {
        current_max = current_max + arr[i];
        if (max_so_far < current_max)
            max_so_far = current_max;
        if (current_max < 0)
            current_max = 0;
    }
    return max_so_far;
}

**Summary:**
""Find the minimum sum of a contiguous subarray""

**Code:**
int FindMinSum(int arr[], int n) {
    int min_so_far = 0;
    int current_min = 0;
    int i;
    for (i = 0; i < n; i++) {
        current_min = current_min + arr[i];
        if (min_so_far > current_min)
            min_so_far = current_min;
        if (current_min > 0)
            current_min = 0;
    }
    return min_so_far;
}

**Summary:**
""Find the maximum product of a contiguous subarray""

**Code:**
int FindMaxProduct(int arr[], int n) {
    int max_so_far = arr[0];
    int min_so_far = arr[0];
    int max_ending_here = arr[0];
    int i;

    for (i = 1; i < n; i++) {
        if (arr[i] > 0) {
            max_ending_here = max_ending_here * arr[i];
            min_so_far = Math.min(min_so_far, max_ending_here);
        } else {
            int temp = max_ending_here;
            max_ending_here = Math.max(min_so_far, max_ending_here * arr[i]);
            min_so_far = temp * arr[i];
        }
        max_so_far = Math.max(max_so_far, max_ending_here);
    }
    return max_so_far;
}

**Summary:**
""Find the minimum","int FindMinProduct(int arr[], int n) {
    int min_so_far = arr[0];
    int max_so_far = arr[0];
    int min_ending_here = arr[0];
    int i;

    for (i = 1; i < n; i++) {
        if (arr[i] < 0) {
            min_ending_here = min_ending_here * arr[i];
            max_so_far = Math.max(max_so_far, min_ending_here);
        } else {
            int temp = min_ending_here;
            min_ending_here = Math.min(min_so_far, min_ending_here * arr[i]);
            max_so_far = temp * arr[i];
        }
        min_so_far = Math.min(min_so_far, min_ending_here);
    }
    return min_so_far;
}

**Summary:**
""Find the minimum product of a contiguous subarray""

**Code:**
int FindMinProduct(int arr[], int n) {
    int min_so_far = arr[0];
    int max_so_far = arr[0];
    int min_ending_here = arr[0];
    int i;

    for (i = 1; i < n; i++) {
        if (arr[i] < 0) {
            min_ending_here = min_ending_here * arr[i];
            max_so_far = Math.max(max_so_far, min_ending_here);
        } else {
            int temp = min_ending_here;
            min_ending_here = Math.min(min_so_far, min_ending_here * arr[i]);
            max_so_far = temp * arr[i];
        }
        min_so_far = Math.min(min_so_far, min_ending_here);
    }
    return min_so_far;
}

**Summary:**
""Find the maximum product of a contiguous subarray""

**Code:**
int FindMaxProduct(int arr[], int n) {
    int max_so_far = arr[0];
    int min_so_far = arr[0];
    int max_ending_here = arr[0];
    int i;

    for (i = 1; i < n; i++) {
        if (arr[i] > 0) {
            max_ending_here = max_ending_here * arr[i];
            min_so_far = Math.min(min_so_far, max_ending_here);
        } else {
            int temp = max_ending_here;
            max_ending_here = Math.max(min_so_far, max_ending_here * arr[i]);
            min_so_far = temp * arr[i];
        }
        max_so_far = Math.max(max_so_far, max_ending_here);
    }
    return max_so_far;
}

**Summary:**
""Find the minimum product of a contiguous subarray""

**Code:**
int FindMinProduct(int arr[], int n) {
    int min_so_far = arr[0];
    int max_so_far = arr[0];
    int min_ending_here = arr[0];
    int i;",16.3

id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        return False","def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        return False",34.80992040440025,10.336578482908822,35.826180057769115,23.076923076923077,70.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(x, signed, bits) for x in value)
    if isinstance(value, int):
        if signed:
            return -2**(bits-1) <= value < 2**(bits-1)
        else:
            return 0 <= value < 2**bits
    return False","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(x, signed, bits) for x in value)
    if isinstance(value, int):
        if signed:
            return -2**(bits-1) <= value < 2**(bits-1)
        else:
            return 0 <= value < 2**bits
    return False",23.60271891824795,10.247446915218482,12.992257586602147,33.33333333333333,37.83783783783784
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for t in cls.__dict__:
        if isinstance(t, tuple) and t[0] == datatype:
            return t
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for t in cls.__dict__:
        if isinstance(t, tuple) and t[0] == datatype:
            return t
    return None",71.83019945329406,60.52987576779449,70.89866615312582,74.07407407407408,81.81818181818183
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","```python
def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn is None:
        fqn = get_fqn()
    fqn_parts = fqn.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.","```python
def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn is None:
        fqn = get_fqn()
    fqn_parts = fqn.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.split(""."")
    fqn_parts.pop()
    fqn_parts = ""."".join(fqn_parts)
    fqn_parts = fqn_parts.",28.1792740321136,6.450015977840487,25.885135706169482,35.9375,44.44444444444444
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""float"":
        return ApiGearType.FLOAT
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    elif t == ""enum"":
        return ApiGearType.ENUM
    elif t == ""date"":
        return ApiGearType.DATE
    elif t == ""datetime"":
        return ApiGearType.DATETIME
    elif t == ""timestamp"":
        return ApiGearType.TIMESTAMP
    elif t == ""binary"":
        return ApiGearType.BINARY
    elif t == ""json"":
        return ApiGearType.JSON
    elif t == ""null"":
        return ApiGearType.NULL
    else:
        return None","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""float"":
        return ApiGearType.FLOAT
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    elif t == ""enum"":
        return ApiGearType.ENUM
    elif t == ""date"":
        return ApiGearType.DATE
    elif t == ""datetime"":
        return ApiGearType.DATETIME
    elif t == ""timestamp"":
        return ApiGearType.TIMESTAMP
    elif t == ""binary"":
        return ApiGearType.BINARY
    elif t == ""json"":
        return ApiGearType.JSON
    elif t == ""null"":
        return ApiGearType.NULL
    else:
        return None",22.10079756846101,13.902664650352772,14.903833326958555,30.08849557522124,29.508196721311474
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","```python
def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node.is_property():
        return None

    if node.is_array():
        return None

    if node.is_bitfield():
        return None

    if node.is_enum():
        return None

    if node.is_struct():
        return None

    if node.is_union():
        return None

    if node.is_variant():
        return None

    if node.is_ref():
        return None

    if node.is_ref_to_struct():
        return None

    if node.is_ref_to_union():
        return None

    if node.is_ref_to_variant():
        return None

    if node.is_ref_to_bitfield():
        return None

    if node.is_ref_to_enum():
        return None

    if node.is_ref_to_array():
        return None

    if node.is_ref_to_struct_array():
        return None

    if node.is_ref_to_union_array():
        return None

    if node.is_ref_to_variant_array():
        return None

    if node.is_ref_to_bitfield_array():
        return None

    if node.is_ref_to_enum_array():
        return None

    if node.is_ref_to_struct_union():
        return None

    if node.is_ref_to_struct_variant():
        return None

    if node.is_ref_to_struct_bitfield():
        return None

    if node.is_ref_to_struct_enum():
        return None

    if node.is_ref_to_struct_array():
        return None

    if node.is_ref_to_struct_union_array():
        return None

    if node.is_ref_to_struct_variant_array():
        return None

    if node.is_ref_to_struct_bitfield_array():
        return None

    if node.is_ref_to_struct_enum_array():
        return None

    if node.is_ref_to_union_variant():
        return None

    if node.is_ref_to_union_bitfield():
        return None

    if node.is_ref_to_union_enum():
        return None

    if node.is_ref_to_union_array():
        return None

    if node.is_ref_to_union_variant_array():
        return None

    if node.is_ref_to_union_bitfield_array():
        return None

    if node.is_ref_to_union_enum_array():
        return None

    if node.is_ref_to_variant_bitfield():
        return None

    if node.is_ref_to_variant_enum():
        return None

    if node.is_ref_to_variant_array():
        return None

    if node.is_ref_to_variant_bitfield_array():
        return None

    if node.is_ref_to_variant_enum_array():
        return None

    if node.is_ref_to_bitfield_variant():
        return None

    if node.is_ref_to_bitfield_enum():
        return None

    if node.is_","```python
def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node.is_property():
        return None

    if node.is_array():
        return None

    if node.is_bitfield():
        return None

    if node.is_enum():
        return None

    if node.is_struct():
        return None

    if node.is_union():
        return None

    if node.is_variant():
        return None

    if node.is_ref():
        return None

    if node.is_ref_to_struct():
        return None

    if node.is_ref_to_union():
        return None

    if node.is_ref_to_variant():
        return None

    if node.is_ref_to_bitfield():
        return None

    if node.is_ref_to_enum():
        return None

    if node.is_ref_to_array():
        return None

    if node.is_ref_to_struct_array():
        return None

    if node.is_ref_to_union_array():
        return None

    if node.is_ref_to_variant_array():
        return None

    if node.is_ref_to_bitfield_array():
        return None

    if node.is_ref_to_enum_array():
        return None

    if node.is_ref_to_struct_union():
        return None

    if node.is_ref_to_struct_variant():
        return None

    if node.is_ref_to_struct_bitfield():
        return None

    if node.is_ref_to_struct_enum():
        return None

    if node.is_ref_to_struct_array():
        return None

    if node.is_ref_to_struct_union_array():
        return None

    if node.is_ref_to_struct_variant_array():
        return None

    if node.is_ref_to_struct_bitfield_array():
        return None

    if node.is_ref_to_struct_enum_array():
        return None

    if node.is_ref_to_union_variant():
        return None

    if node.is_ref_to_union_bitfield():
        return None

    if node.is_ref_to_union_enum():
        return None

    if node.is_ref_to_union_array():
        return None

    if node.is_ref_to_union_variant_array():
        return None

    if node.is_ref_to_union_bitfield_array():
        return None

    if node.is_ref_to_union_enum_array():
        return None

    if node.is_ref_to_variant_bitfield():
        return None

    if node.is_ref_to_variant_enum():
        return None

    if node.is_ref_to_variant_array():
        return None

    if node.is_ref_to_variant_bitfield_array():
        return None

    if node.is_ref_to_variant_enum_array():
        return None

    if node.is_ref_to_bitfield_variant():
        return None

    if node.is_ref_to_bitfield_enum():
        return None

    if node.is_",25.5920625502671,4.834368332516918,24.75610409077372,37.77777777777778,35.0
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

from vspec.vspec import VSpec


def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec(identifier)
    for include_dir in include_dirs:
        vspec.add_include_dir(include_dir)
    for spec in specs:
        vspec.add_spec(spec)
    return vspec","from pathlib import Path

from vspec.vspec import VSpec


def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec(identifier)
    for include_dir in include_dirs:
        vspec.add_include_dir(include_dir)
    for spec in specs:
        vspec.add_spec(spec)
    return vspec",27.38159326247449,13.218720782588726,19.305068287981065,44.44444444444444,32.55813953488372
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict):
            base[k] = deep_update(base.get(k, {}), v)
        else:
            base[k] = v","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict):
            base[k] = deep_update(base.get(k, {}), v)
        else:
            base[k] = v",50.60389742250714,31.293443783376603,32.58047923998528,66.66666666666666,71.875
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 8:
        return None
    try:
        int(v, 16)
    except ValueError:
        return None
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 8:
        return None
    try:
        int(v, 16)
    except ValueError:
        return None
    return v",50.55735832975432,40.37469867061998,51.8547346483973,40.0,70.0
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    if fqn is not None:
        vss_raw.resolve(fqn)
    return vss_raw","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    if fqn is not None:
        vss_raw.resolve(fqn)
    return vss_raw",45.32727606123215,29.509230856710733,30.96654005488453,47.5,73.33333333333333
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [
        ""int"",
        ""float"",
        ""str"",
        ""bool"",
        ""list"",
        ""tuple"",
        ""dict"",
        ""set"",
        ""frozenset"",
        ""bytes"",
        ""bytearray"",
        ""memoryview"",
        ""None"",
    ]
    result = []
    for value in values:
        if value in valid_datatypes:
            result.append(value)
    return result","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [
        ""int"",
        ""float"",
        ""str"",
        ""bool"",
        ""list"",
        ""tuple"",
        ""dict"",
        ""set"",
        ""frozenset"",
        ""bytes"",
        ""bytearray"",
        ""memoryview"",
        ""None"",
    ]
    result = []
    for value in values:
        if value in valid_datatypes:
            result.append(value)
    return result",41.71044526824548,20.89934379295256,37.60910394669599,50.0,58.333333333333336
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int) -> str:
        result = """"
        for attribute in attributes:
            value = getattr(node, attribute)
            result += f""{' ' * indent}{attribute}: {value}\n""
        if node.children:
            for child in node.children:
                result += render_node(child, indent + 4)
        return result

    return render_node(tree, 0)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int) -> str:
        result = """"
        for attribute in attributes:
            value = getattr(node, attribute)
            result += f""{' ' * indent}{attribute}: {value}\n""
        if node.children:
            for child in node.children:
                result += render_node(child, indent + 4)
        return result

    return render_node(tree, 0)",28.14619944389145,17.65035579686671,19.42836910420517,30.76923076923077,44.73684210526316
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if depth > 100:
        raise ValueError(""Maximum recursion depth reached"")
    if self.parent is None:
        return self, depth
    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if depth > 100:
        raise ValueError(""Maximum recursion depth reached"")
    if self.parent is None:
        return self, depth
    return self.parent.get_instance_root(depth + 1)",55.213104641521625,49.129205062021036,48.302160872486525,55.00000000000001,68.42105263157895
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    count = 0
    while self.parent is not None:
        count += 1
        self = self.parent
    return count","def count_instance_children_depth(self) -> int:
    count = 0
    current = self
    while current.parent is not None:
        count += 1
        current = current.parent
    return count",25.501636625464247,11.856660123276004,14.062929856841858,26.08695652173913,50.0
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if name in node_id:
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if name in node_id:
            children_ids.append(node_id)
    return children_ids",62.75486754691906,40.64458257395656,42.92390722156277,73.33333333333333,94.11764705882352
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        return getattr(o, name)
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default",54.28198999477352,44.05262339943716,43.07533657965687,50.0,80.0
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""signal"":
        fd.write(f""message {tree.name} {{"")
        if static_uid:
            fd.write(f""\n    uint32-t static_uid = 1;"")
        if add_optional:
            fd.write(f""\n    optional {tree.datatype} {tree.name} = 1;"")
        else:
            fd.write(f""\n    {tree.datatype} {tree.name} = 1;"")
        fd.write(""}"")
    elif tree.type == ""signal_group"":
        fd.write(f""message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""signal_group_list"":
        fd.write(f""repeated message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""signal_list"":
        fd.write(f""repeated {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""message"":
        fd.write(f""message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""message_list"":
        fd.write(f""repeated message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""enum"":
        fd.write(f""enum {tree.name} {{"")
        for child in tree.children:
            fd.write(f""\n    {child.name} = {child.value};"")
        fd.write(""}"")
    elif tree.type == ""enum_list"":
        fd.write(f""repeated enum {tree.name} {{"")
        for child in tree.children:
            fd.write(f""\n    {child.name} = {child.value};"")
        fd.write(""}"")
    elif tree.type == ""struct"":
        fd.write(f""message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""struct_list"":
        fd.write(f""repeated message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""map"":
        fd.write(f""map<"")
        fd.write(f""{tree.children[0].name}"")
        fd.write(f"", {tree.children[1].name}"")
        fd.write("">"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""signal"":
        fd.write(f""message {tree.name} {{"")
        if static_uid:
            fd.write(f""\n    uint32_t static_uid = 1;"")
        if add_optional:
            fd.write(f""\n    optional {tree.datatype} {tree.name} = 1;"")
        else:
            fd.write(f""\n    {tree.datatype} {tree.name} = 1;"")
        fd.write(""}"")
    elif tree.type == ""signal_group"":
        fd.write(f""message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""signal_group_list"":
        fd.write(f""repeated message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""signal_list"":
        fd.write(f""repeated {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""message"":
        fd.write(f""message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""message_list"":
        fd.write(f""repeated message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""enum"":
        fd.write(f""enum {tree.name} {{"")
        for child in tree.children:
            fd.write(f""\n    {child.name} = {child.value};"")
        fd.write(""}"")
    elif tree.type == ""enum_list"":
        fd.write(f""repeated enum {tree.name} {{"")
        for child in tree.children:
            fd.write(f""\n    {child.name} = {child.value};"")
        fd.write(""}"")
    elif tree.type == ""struct"":
        fd.write(f""message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""struct_list"":
        fd.write(f""repeated message {tree.name} {{"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""}"")
    elif tree.type == ""map"":
        fd.write(f""map<"")
        fd.write(f""{tree.children[0].name}"")
        fd.write(f"", {tree.children[1].name}"")
        fd.write("">"")",18.392866420330602,5.297470520265897,17.395797375642235,26.804123711340207,24.074074074074073
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    for node in root.traverse():
        if node.is_leaf():
            branch_name = node.branch.fully_qualified_name
            if branch_name not in instances:
                instances[branch_name] = []
            instances[branch_name].append(node.name)
    return instances","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    for node in root.traverse():
        if node.is_leaf():
            branch_name = node.branch.fully_qualified_name
            if branch_name not in instances:
                instances[branch_name] = []
            instances[branch_name].append(node.name)
    return instances",28.685127231063944,13.14694326332328,17.73243500177228,47.12643678160919,36.734693877551024
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type == ""leaf","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type == ""leaf",50.086598965639574,33.47189874003768,31.160211408234893,35.714285714285715,100.0
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance",35.82802108584732,25.916266987614407,25.816869987353826,31.57894736842105,60.0
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.is_branch_instance","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.is_branch_instance",30.783772350574136,23.671529472186087,26.130226596777128,33.33333333333333,40.0
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    offset_basis = 0x811c9dc5
    hash_val = offset_basis
    for byte in identifier:
        hash_val = (hash_val * FNV_PRIME) ^ byte
    return hash_val","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    offset_basis = 0x811c9dc5
    hash_val = offset_basis
    for byte in identifier:
        hash_val &= 0xffffffff
        hash_val = (hash_val * FNV_PRIME) ^ byte
    return hash_val",29.914967022041296,22.481074167380633,30.33668865762665,36.84210526315789,30.0
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_card, container, false);
        return view;
    }","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_card, container, false);
        return view;
    }",43.321025003235924,39.24500924677672,41.278148005224196,51.85185185185185,40.909090909090914
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImage(buttonContent.getIcon());
        buttonView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                buttonContent.onClick();
            }
        });
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImage(buttonContent.getIcon());
        buttonView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                buttonContent.onClick();
            }
        });
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}",79.5330839336916,51.97584423455896,82.28552375827198,83.87096774193549,100.0
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
        View view = mDescriptiveTextOnlyLayoutView;
        if (view == null) {
            view = LayoutInflater.from(getContext()).inflate(R.layout.descriptive_text_only, this, false);
            mDescriptiveTextOnlyLayoutView = view;
        }
        return view;
    }","protected final View getDescriptiveTextOnlyLayoutView() {
        View view = mDescriptiveTextOnlyLayoutView;
        if (view == null) {
            view = LayoutInflater.from(getContext()).inflate(R.layout.descriptive_text_only, this, false);
            mDescriptiveTextOnlyLayoutView = view;
        }
        return view;
    }",21.71142581105094,15.371071478861529,17.463936578176455,36.36363636363637,17.647058823529413
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(title);
    header.setIcon(icon);
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(title);
    header.setIcon(icon);
}",43.21427664268399,28.96204682801084,33.18077402843942,10.714285714285714,100.0
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayout == null) {
        mTextBlockLayout = LayoutInflater.from(getContext()).inflate(R.layout.text_block_layout, this, false);
    }
    return mTextBlockLayout;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayout == null) {
        mTextBlockLayout = LayoutInflater.from(getContext()).inflate(R.layout.text_block_layout, this, false);
    }
    return mTextBlockLayout;
}",27.91225680625871,19.830761046757043,22.500084360095975,37.5,31.818181818181817
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setClassName(packageName, ""com.android.server.media.MediaBrowserService"");
        return intent.resolveActivity(packageManager);
    }","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setClassName(packageName, ""com.android.server.media.MediaBrowserService"");
        return intent.resolveActivity(packageManager);
    }",21.987655454345298,13.009929608039753,21.63880541688861,28.30188679245283,25.0
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (componentName == null) {
            return false;
        }
        if (appsToHide != null && appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if (customMediaComponents != null && customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        return true;
    }","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (componentName == null) {
            return false;
        }
        if (appsToHide != null && appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if (customMediaComponents != null && customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        return true;
    }",62.712723890017166,49.51636518817952,50.54087957823834,65.07936507936508,85.71428571428571
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.setMediaSource(componentName);
        ((Activity) context).finish();
    }","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.setMediaSource(componentName);
        ((Activity) context).finish();
    }",35.351900025334885,18.75370708668024,30.39582849853027,32.25806451612903,60.0
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
    try {
        return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
    } catch (Exception e) {
        Log.e(""CarPackageManager"", ""Error checking if activity is distraction optimized: "" + e.getMessage());
        return false;
    }
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
    try {
        return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
    } catch (Exception e) {
        Log.e(""CarPackageManager"", ""Error checking if activity is distraction optimized: "" + e.getMessage());
        return false;
    }
}",34.12517692760472,17.98925369634301,19.742981107671906,34.48275862068966,64.28571428571429
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
    Intent intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.gmaps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps","private Intent getMapsIntent() {
    Intent intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.gmaps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    intent = new Intent(Intent.ACTION_VIEW);
    intent.setType(""vnd.google-android.maps"");
    if (intent.resolveActivity(getPackageManager()) != null) {
        return intent;
    }
    return null;
}",16.467593180221286,7.0475591210246895,10.770865547912404,24.242424242424242,23.809523809523807
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    for (int i = 0; i < cardDefinitions.size(); i++) {
        CardDefinition cardDefinition = cardDefinitions.get(i);
        String className = cardDefinition.getClassName();
        try {
            Class<?> cardClass = Class.forName(className);
            Constructor<?>[] constructors = cardClass.getDeclaredConstructors();
            if (constructors.length > 0) {
                Object card = constructors[0].newInstance();
                if (card instanceof Card) {
                    ((Card) card).setCardDefinition(cardDefinition);
                    cardList.add((Card) card);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","private void initializeCards() {
    for (int i = 0; i < cardDefinitions.size(); i++) {
        CardDefinition cardDefinition = cardDefinitions.get(i);
        String className = cardDefinition.getClassName();
        try {
            Class<?> cardClass = Class.forName(className);
            Constructor<?>[] constructors = cardClass.getDeclaredConstructors();
            if (constructors.length > 0) {
                Object card = constructors[0].newInstance();
                if (card instanceof Card) {
                    ((Card) card).setCardDefinition(cardDefinition);
                    cardList.add((Card) card);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",21.819962503543195,4.747618801266281,5.9608026414779305,28.57142857142857,48.0
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }

        for (int i = 0; i < taskAppearedInfos.size(); i++) {
            TaskAppearedInfo taskAppearedInfo = taskAppearedInfos.get(i);
            if (taskAppearedInfo.isMultiWindow()) {
                taskAppearedInfos.remove(i);
                i--;
            }
        }
    }","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }

        Iterator<TaskAppearedInfo> iterator = taskAppearedInfos.iterator();
        while (iterator.hasNext()) {
            TaskAppearedInfo taskAppearedInfo = iterator.next();
            if (taskAppearedInfo.isMultiWindow()) {
                iterator.remove();
            }
        }
    }",27.403231769127167,17.26822716686644,18.859851424793757,41.66666666666667,31.818181818181817
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    String intentMode = intent.getStringExtra(""mode"");
    if (intentMode != null) {
        mode = intentMode;
    }
    if (mode.equals(""edit"")) {
        setTitle(getString(R.string.edit_title));
    } else if (mode.equals(""create"")) {
        setTitle(getString(R.string.create_title));
    } else {
        setTitle(getString(R.string.view_title));
    }
}","private void updateMode() {
    String intentMode = intent.getStringExtra(""mode"");
    if (intentMode != null) {
        mode = intentMode;
    }
    if (mode.equals(""edit"")) {
        setTitle(getString(R.string.edit_title));
    } else if (mode.equals(""create"")) {
        setTitle(getString(R.string.create_title));
    } else {
        setTitle(getString(R.string.view_title));
    }
}",25.57332201195002,7.781062585666583,31.02016197006999,19.047619047619047,44.44444444444444
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    return chronometer;
}","private Chronometer getChronometer() {
    return chronometer;
}",32.89633504148476,6.1576760862683235,13.889202541209169,11.538461538461538,0.0
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
        int width = (int) (mMediaWidth * mScale);
        int height = (int) (mMediaHeight * mScale);

        Bitmap blurredBitmap = Bitmap.createScaledBitmap(mBitmap, width, height, true);
        blurredBitmap = mBlurHelper.blur(blurredBitmap);

        ImageView iv = new ImageView(mContext);
        iv.setImageBitmap(blurredBitmap);
        iv.setScaleType(ImageView.ScaleType.CENTER_CROP);
        iv.setLayoutParams(new ViewGroup.LayoutParams(width, height));

        return iv;
    }","private View getMediaLayoutView() {
        int width = (int) (mMediaWidth * mScale);
        int height = (int) (mMediaHeight * mScale);

        Bitmap blurredBitmap = Bitmap.createScaledBitmap(mBitmap, width, height, true);
        blurredBitmap = mBlurHelper.blur(blurredBitmap);

        ImageView iv = new ImageView(mContext);
        iv.setImageBitmap(blurredBitmap);
        iv.setScaleType(ImageView.ScaleType.CENTER_CROP);
        iv.setLayoutParams(new ViewGroup.LayoutParams(width, height));

        return iv;
    }",24.247657926743653,7.2187661130191785,9.900173533009175,48.837209302325576,31.03448275862069
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    int width = image.getIntrinsicWidth();
    int height = image.getIntrinsicHeight();
    float scale = Math.min((float) width / 1000, (float) height / 1000);
    int scaledWidth = (int) (width * scale);
    int scaledHeight = (int) (height * scale);
    Bitmap blurredBitmap = Bitmap.createScaledBitmap(image.getBitmap(), scaledWidth, scaledHeight, false);
    blurredBitmap = Blur.blur(blurredBitmap, 10);
    cardView.setCardBackgroundColor(new ColorStateList.valueOf(Color.argb(255, 0, 0, 0)));
    cardView.setRadius(scaledWidth / 2);
    cardView.setPadding(scaledWidth / 2, scaledWidth / 2, scaledWidth / 2, scaledWidth / 2);
    cardView.setClipToOutline(true);
    cardView.setOutlineProvider(new CornerRadiusOutline(scaledWidth / 2));
    cardView.setBackground(new BitmapDrawable(context.getResources(), blurredBitmap));
}","private void updateBackgroundImage(Drawable image) {
    int width = image.getIntrinsicWidth();
    int height = image.getIntrinsicHeight();
    float scale = Math.min((float) width / 1000, (float) height / 1000);
    int scaledWidth = (int) (width * scale);
    int scaledHeight = (int) (height * scale);
    Bitmap blurredBitmap = Bitmap.createScaledBitmap(image.getBitmap(), scaledWidth, scaledHeight, false);
    blurredBitmap = Blur.blur(blurredBitmap, 10);
    cardView.setCardBackgroundColor(new ColorStateList.valueOf(Color.argb(255, 0, 0, 0)));
    cardView.setRadius(scaledWidth / 2);
    cardView.setPadding(scaledWidth / 2, scaledWidth / 2, scaledWidth / 2, scaledWidth / 2);
    cardView.setClipToOutline(true);
    cardView.setOutlineProvider(new CornerRadiusOutline(scaledWidth / 2));
    cardView.setBackground(new BitmapDrawable(context.getResources(), blurredBitmap));
}",21.020436166055376,5.694565324984517,10.865811817869469,23.076923076923077,44.44444444444444
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaView.setVisibility(View.VISIBLE);
    mediaView.setTitle(title);
    mediaView.setSubtitle(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaView.setVisibility(View.VISIBLE);
    mediaView.setTitle(title);
    mediaView.setSubtitle(subtitle);
}",70.842490254843,59.004687263928076,61.207379018601806,63.1578947368421,100.0
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        content.showChronometer();
    } else {
        content.hideChronometer();
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        content.showChronometer();
    } else {
        content.hideChronometer();
    }
}",38.50772050053479,52.75568628444888,55.164084606579166,31.11111111111111,15.0
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
}","public void onCallAdded(Call call) {
}",44.90186416901222,24.76498688229712,31.76554671682869,23.076923076923077,0.0
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
    call.unregisterCallback(this);
    call.resetState();
}","public void onCallRemoved(Call call) {
    call.unregisterCallback(this);
    call.resetState();
}",26.386273428363687,12.073177334748134,20.61477352156375,30.0,42.857142857142854
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = formatPhoneNumber(number);
    viewModel.phoneNumber = formattedNumber;
    viewModel.showCallButton = true;
    viewModel.showAddContactButton = true;
}","void updateModelWithPhoneNumber(String number) {
    String formattedNumber = formatPhoneNumber(number);
    viewModel.phoneNumber = formattedNumber;
    viewModel.showCallButton = true;
    viewModel.showAddContactButton = true;
}",22.279526682657742,29.47748032550584,29.779515294014015,11.11111111111111,18.75
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
        muteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mute();
            }
        });
        endCallButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                endCall();
            }
        });
        dialpadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showDialpad();
            }
        });
    }","private void initializeAudioControls() {
        muteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mute();
            }
        });
        endCallButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                endCall();
            }
        });
        dialpadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showDialpad();
            }
        });
    }",13.140896385421364,6.447469697575577,8.950340443040359,13.636363636363635,23.52941176470588
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (m_connectionStatus == DBusConnectionStatus::Available) {
        _listener.onConnectionAvailable();
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (m_connectionStatus == DBusConnectionStatus::Available) {
        _listener.onConnectionAvailable();
    }
}",52.542172361086884,46.82568791024402,61.16908849062524,52.17391304347826,50.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(exit_mutex_);
    if (exit_threads_.find(conn) == exit_threads_.end()) {
        exit_threads_[conn].push_back(t);
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(exit_mutex_);
    if (exit_threads_.find(conn) == exit_threads_.end()) {
        exit_threads_[conn].push_back(t);
    }
}",27.762986633123532,12.49587613236056,19.783691883509523,43.47826086956522,35.294117647058826
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    DBusWatch watch(libdbusWatch);
    if (watch.isValid()) {
        watch.remove();
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    DBusWatch watch(libdbusWatch);
    if (watch.isValid()) {
        watch.remove();
    }
}",23.907014229546512,9.283891824972116,16.64719539624423,33.33333333333333,36.36363636363637
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}",16.83177476235252,2.372786059738577,11.185859221217735,38.38383838383838,15.384615384615385
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    std::shared_ptr<DBusObjectManager> manager;
    if (objectManager_.expired()) {
        std::shared_lock<std::shared_mutex> lock(objectManagerMutex_);
        if (objectManager_.expired()) {
            manager = std::make_shared<DBusObjectManager>(bus_, busName_, busPath_);
            std::unique_lock<std::shared_mutex> lock(objectManagerMutex_);
            objectManager_ = manager;
        } else {
            manager = objectManager_;
        }
    } else {
        manager = objectManager_;
    }
    return manager;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    std::shared_ptr<DBusObjectManager> manager;
    if (objectManager_.expired()) {
        std::shared_lock<std::shared_mutex> lock(objectManagerMutex_);
        if (objectManager_.expired()) {
            manager = std::make_shared<DBusObjectManager>(bus_, busName_, busPath_);
            std::unique_lock<std::shared_mutex> lock(objectManagerMutex_);
            objectManager_ = manager;
        } else {
            manager = objectManager_;
        }
    } else {
        manager = objectManager_;
    }
    return manager;
}",43.57987523544429,8.551904160074711,19.29323780734347,58.97435897435898,87.5
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (serviceName.empty()) {
        return false;
    }

    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsServiceNames.find(serviceName);
    if (it == itsServiceNames.end()) {
        return false;
    }

    if (it->second == 1) {
        itsServiceNames.erase(it);
        return true;
    }

    it->second--;
    return true;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (serviceName.empty()) {
        return false;
    }

    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsServiceNames.find(serviceName);
    if (it == itsServiceNames.end()) {
        return false;
    }

    if (it->second == 1) {
        itsServiceNames.erase(it);
        return true;
    }

    it->second--;
    return true;
}",32.103299170968484,12.686871421061443,14.297753834241037,61.42857142857143,40.0
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage message;
    DBusMessage* dbusMessage = _libdbusPendingCall->reply;
    if (dbusMessage) {
        message = DBusMessage(dbusMessage, true);
    }
    return message;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage message;
    DBusMessage* dbusMessage = _libdbusPendingCall->reply;
    if (dbusMessage) {
        message = DBusMessage(dbusMessage, true);
    }
    return message;
}",25.795526672223478,9.2941008107416,9.91364690379334,25.64102564102564,58.333333333333336
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(async_handlers_mutex_);
    for (auto it = async_handlers_.begin(); it != async_handlers_.end(); ++it) {
        delete *it;
    }
    async_handlers_.clear();
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(async_handlers_mutex_);
    for (auto it = async_handlers_.begin(); it != async_handlers_.end(); ++it) {
        delete *it;
    }
    async_handlers_.clear();
}",27.37811223886384,7.214182108203518,7.740443718000139,61.224489795918366,33.33333333333333
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    for (auto it = signal_states_.begin(); it != signal_states_.end(); it++) {
        auto& state = it->second;
        if (state.status == DBusSignalStatus::Success) {
            for (auto& handler : state.handlers) {
                handler.second->signalSuccess(handler.first);
            }
        }
    }
}","void DBusConnection::handleSignalStates() {
    for (auto it = signal_states_.begin(); it != signal_states_.end(); it++) {
        auto& state = it->second;
        if (state.status == DBusSignalStatus::Success) {
            for (auto& handler : state.handlers) {
                handler.second->signalSuccess(handler.first);
            }
        }
    }
}",29.78405073183492,6.54306763515183,7.701830944361772,17.391304347826086,87.5
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsConnections.find(_connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsConnections.find(_connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}",59.67147183230757,24.94174717700826,26.244140152221984,100.0,87.5
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getInterface() == ""org.freedesktop.DBus"") {
        if (dbusMessage.getMethod() == ""InstanceAdded"") {
            DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onInstanceAdded(dbusMessage);
        } else if (dbusMessage.getMethod() == ""InstanceRemoved"") {
            DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onInstanceRemoved(dbusMessage);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getInterface() == ""org.freedesktop.DBus"") {
        if (dbusMessage.getMethod() == ""InstanceAdded"") {
            DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onInstanceAdded(dbusMessage);
        } else if (dbusMessage.getMethod() == ""InstanceRemoved"") {
            DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onInstanceRemoved(dbusMessage);
        }
    }
}",45.910698458094224,24.669426816409512,42.09025013285051,45.45454545454545,71.42857142857143
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances.clear();

    if (m_availableServiceInstances.size() > 0) {
        _availableServiceInstances = m_availableServiceInstances;
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances = m_availableServiceInstances;
}",26.594785356227767,18.77199864591145,20.39935057120742,38.63636363636363,28.57142857142857
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::UNKNOWN;
    _availabilityStatus = AvailabilityStatus::UNKNOWN;

    if (m_serviceInstanceAvailabilityStatusMap.find(_instance) != m_serviceInstanceAvailabilityStatusMap.end()) {
        _availabilityStatus = m_serviceInstanceAvailabilityStatusMap[_instance];
        _callStatus = CallStatus::SUCCESS;
    } else {
        _callStatus = CallStatus::FAILURE;
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::UNKNOWN;
    _availabilityStatus = AvailabilityStatus::UNKNOWN;

    auto it = m_serviceInstanceAvailabilityStatusMap.find(_instance);
    if (it != m_serviceInstanceAvailabilityStatusMap.end()) {
        _availabilityStatus = it->second;
        _callStatus = CallStatus::SUCCESS;
    } else {
        _callStatus = CallStatus::FAILURE;
    }
}",43.26403683586348,26.7861158687514,29.603364808035852,66.66666666666666,50.0
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    if (m_service == nullptr) {
        return;
    }

    if (m_service->isAvailable()) {
        m_service->setAvailable(false);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    if (m_service == nullptr) {
        return;
    }

    if (m_service->isAvailable()) {
        m_service->setAvailable(false);
    }
}",11.31149275220778,1.7743402119059213,7.574194899489302,28.205128205128204,7.6923076923076925
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    for (auto &listener : itsListeners) {
        listener->onInterfaceStatusChanged(_objectPath, _interfaceName, _availability);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    for (auto &listener : itsListeners) {
        listener->onInterfaceStatusChanged(_objectPath, _interfaceName, _availability);
    }
}",48.24548246667676,36.51934656347456,39.832871551569504,43.90243902439025,72.72727272727273
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_listener;
    (void)_subscription;
    emitProxyStatusChanged(DBusProxyStatusEvent::ListenerAdded);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_listener;
    (void)_subscription;
    emitProxyStatusChanged(DBusProxyStatusEvent::ListenerAdded);
}",35.85180732472284,32.425127038259475,38.4821022606319,22.5,50.0
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if(itsListeners.begin(), itsListeners.end(),
                           [&_listener, &_subscription](const Listener& listener) {
                               return listener.first == _listener && listener.second == _subscription;
                           });
    if (it != itsListeners.end()) {
        itsListeners.erase(it);
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if(itsListeners.begin(), itsListeners.end(),
                           [&_listener, &_subscription](const Listener& listener) {
                               return listener.first == _listener && listener.second == _subscription;
                           });
    if (it != itsListeners.end()) {
        itsListeners.erase(it);
    }
}",48.56033656917988,21.830457064642587,29.25612730731506,64.58333333333334,78.57142857142857
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    _connection->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    _connection->addSignalStateHandler(_handler, _subscription);
}",71.38713623153023,42.268392163412415,43.28015276270854,100.0,100.0
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> availableServiceInstances;
        for (const auto &_instance : _availableServiceInstances) {
            availableServiceInstances.push_back(_instance.toString());
        }
        _call(availableServiceInstances);
    }
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> availableServiceInstances;
        for (const auto &_instance : _availableServiceInstances) {
            availableServiceInstances.push_back(_instance.toString());
        }
        _call(availableServiceInstances);
    }
}",61.386955963423716,42.4202567251301,50.90534490634254,68.88888888888889,83.33333333333334
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.isMethodCall()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isMethodReturn()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isSignal()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isError()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isMethodCall(""Introspect.Introspect"") && dbusMessage.getInterface() == ""org.freedesktop.DBus"") {
        return handleIntrospection(dbusMessage);
    }

    return false;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.isMethodCall()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isMethodReturn()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isSignal()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isError()) {
        const std::string_view interface = dbusMessage.getInterface();
        const std::string_view member = dbusMessage.getMember();
        const std::string_view path = dbusMessage.getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            it->second(dbusMessage);
            return true;
        }
    } else if (dbusMessage.isMethodCall(""Introspect.Introspect"") && dbusMessage.getInterface() == ""org.freedesktop.DBus"") {
        return handleIntrospection(dbusMessage);
    }

    return false;
}",25.54315978609005,4.590714623128174,9.64756158686911,39.285714285714285,48.64864864864865
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerPath.isStandardInterface()) {
        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerPath.isStandardInterface()) {
        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                                    if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                                        if (dbusInterfaceHandlerPath.getInterface() == DBUS_INTERFACE_DBUS_OBJECT_MANAGER) {
                                                                                                            if (dbusInterfaceHandlerPath.getPath() == DBUS_DBUS_OBJECT_MANAGER_PATH) {
                                                                                                                if (dbusInterfaceHandlerPath.getInterface() == DBUS",28.830542517129963,4.7506531908813185,12.555643861765517,36.11111111111111,61.904761904761905
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    if (itsRegisteredObjectsTable.find(ifpath) == itsRegisteredObjectsTable.end()) {
        itsRegisteredObjectsTable[ifpath] = handler;
        return true;
    }
    return false;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    if (itsRegisteredObjectsTable.find(ifpath) == itsRegisteredObjectsTable.end()) {
        itsRegisteredObjectsTable[ifpath] = handler;
        return true;
    }
    return false;
}",24.293541014354062,9.577731084355351,15.40366188872355,48.19277108433735,24.0
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t response[2];
    response[0] = 0x7E;
    response[1] = 0x01;
    send_uds_response(response, 2, reset_type);
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t response[2];
    response[0] = 0x7E;
    response[1] = 0x01;
    send_uds_response(response, 2, reset_type);
}",12.002853500255457,3.1639113655939926,6.344828838636387,9.090909090909092,29.411764705882355
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 1 && data[0] == 0x01) {
        system(""reboot"");
    }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 1 && data[0] == 0x01) {
        system(""/sbin/reboot"");
    }
}",22.00051377118413,16.37082149281363,22.018830491147714,16.27906976744186,33.33333333333333
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x01;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}","void send_request_download_response() {
    uint8_t response[8];
    response[0] = 0x01;
    response[1] = 0x00;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x00;
    send_uds_response(response, 8);
}",7.512858655393967,1.686343832205101,2.115090789370763,6.25,20.0
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[2];
    response[0] = 0x07;
    response[1] = block_sequence_counter;
    send_response(response, 2);
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[2];
    response[0] = 0x07;
    response[1] = block_sequence_counter;
    send_response(response, 2);
}",12.262632286391009,4.328964575265184,9.42744692324003,11.76470588235294,23.52941176470588
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uint8_t payload[2];
    payload[0] = routine_id;
    payload[1] = result;
    iso_tp_send_message(payload, 2);
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uint8_t payload[2];
    payload[0] = (uint8_t)(routine_id & 0xFF);
    payload[1] = result;
    iso_tp_send_message(payload, 2);
}",17.62309040507988,5.514222675590533,11.901215867805897,23.076923076923077,30.0
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x01;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x7D;

    for (i = 0; i < 8; i++) {
        iso_tp_send_byte(response[i]);
    }
}","static void send_transer_exit_positive_response() {
    uint8_t response[8];
    uint8_t i;

    response[0] = 0x7E;
    response[1] = 0x01;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = 0x00;
    response[7] = 0x7D;

    for (i = 0; i < 8; i++) {
        iso_tp_send_byte(response[i]);
    }
}",14.24456053027215,7.367654273937431,7.792406028969355,15.151515151515152,26.666666666666668
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    uint8_t i;
    for (i = 0; i < CAN_ID_MAP_SIZE; i++) {
        if (can_id == can_id_map[i]) {
            return i;
        }
    }
    return 0xFF;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    uint8_t i;
    for (i = 0; i < CAN_ID_MAP_SIZE; i++) {
        if (can_id == can_id_map[i]) {
            return i;
        }
    }
    return 0xFF;
}",47.54349813294199,45.94919221612092,48.98670507755181,52.38095238095239,42.857142857142854
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;
	int i;

	if (filter_id < 0) {
		for (i = 0; i < ARRAY_SIZE(data->rx_filters); i++) {
			if (data->rx_filters[i].callback) {
				data->rx_filters[i].callback = NULL;
			}
		}
	} else {
		if (filter_id < ARRAY_SIZE(data->rx_filters)) {
			if (data->rx_filters[filter_id].callback) {
				data->rx_filters[filter_id].callback = NULL;
			}
		}
	}
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;
	int i;

	if (filter_id < 0) {
		for (i = 0; i < ARRAY_SIZE(data->rx_filters); i++) {
			if (data->rx_filters[i].callback) {
				data->rx_filters[i].callback = NULL;
			}
		}
	} else {
		if (filter_id < ARRAY_SIZE(data->rx_filters)) {
			if (data->rx_filters[filter_id].callback) {
				data->rx_filters[filter_id].callback = NULL;
			}
		}
	}
}",42.879886441136385,33.48946563001698,42.58494555895923,47.61904761904761,47.82608695652174
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct lin_context *ctx = user_data;
    struct list_head *list;
    struct lin_frame *tmp;

    list = &ctx->outgoing_queue;
    list_for_each_entry(tmp, list, list) {
        if (tmp == frame) {
            list_del(&tmp->list);
            tmp->completion_cb(tmp->completion_data);
            return true;
        }
    }

    return false;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct lin_context *ctx = user_data;
    struct list_head *list;
    struct lin_frame *tmp;

    list = &ctx->outgoing_queue;
    list_for_each_entry(tmp, list, list) {
        if (tmp == frame) {
            list_del(&tmp->list);
            tmp->completion_cb(tmp->completion_data);
            return true;
        }
    }

    return false;
}",36.77631306411806,19.351272585262226,21.374669326382442,41.37931034482759,65.0
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    struct can_frame can_frame;
    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    can_frame.data = frame->data;
    can_frame.extended = frame->extended;
    can_frame.rtr = 0;
    can_frame.bitrate = 0;
    can_frame.extended = 0;
    can_frame.remote = 0;
    can_frame.error = 0;
    can_frame.fifo = 0;
    can_frame.length = 0;
    can_frame.id_mask = 0;
    can_frame.id_extended_mask = 0;
    can_frame.id_extended = 0;
    can_frame.id_extended_mask_valid = 0;
    can_frame.id_mask_valid = 0;
    can_frame.bitrate_valid = 0;
    can_frame.fifo_valid = 0;
    can_frame.length_valid = 0;
    can_frame.remote_valid = 0;
    can_frame.error_valid = 0;
    can_frame.extended_valid = 0;
    can_frame.id_valid = 1;
    can_frame.dlc_valid = 1;
    can_frame.data_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_valid = 1;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dl","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    struct can_frame can_frame;
    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    can_frame.data = frame->data;
    can_frame.extended = frame->extended;
    can_frame.rtr = 0;
    can_frame.bitrate = 0;
    can_frame.extended = 0;
    can_frame.remote = 0;
    can_frame.error = 0;
    can_frame.fifo = 0;
    can_frame.length = 0;
    can_frame.id_mask = 0;
    can_frame.id_extended_mask = 0;
    can_frame.id_extended = 0;
    can_frame.id_extended_mask_valid = 0;
    can_frame.id_mask_valid = 0;
    can_frame.bitrate_valid = 0;
    can_frame.fifo_valid = 0;
    can_frame.length_valid = 0;
    can_frame.remote_valid = 0;
    can_frame.error_valid = 0;
    can_frame.extended_valid = 0;
    can_frame.id_valid = 1;
    can_frame.dlc_valid = 1;
    can_frame.data_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid = 1;
    can_frame.data_length = frame->dlc;
    can_frame.data_length_valid",24.391467330953315,5.234806276819611,12.64715500101664,32.18390804597701,47.5
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
    struct hv_shield_data *data = dev->data;

    data->reg = devm_clk_get(&dev->resource, ""hv_shield"", false);
    if (!data->reg) {
        dev_err(dev, ""Failed to get hv_shield clock\n"");
        return -ENODEV;
    }

    data->reg_enable = devm_gpiod_get(dev, ""hv_shield_enable"", GPIOD_OUT_LOW);
    if (!data->reg_enable) {
        dev_err(dev, ""Failed to get hv_shield enable GPIO\n"");
        return -ENODEV;
    }

    data->reg_disable = devm_gpiod_get(dev, ""hv_shield_disable"", GPIOD_OUT_LOW);
    if (!data->reg_disable) {
        dev_err(dev, ""Failed to get hv_shield disable GPIO\n"");
        return -ENODEV;
    }

    data->reg_enable_gpio = gpiod_get_value(data->reg_enable);
    data->reg_disable_gpio = gpiod_get_value(data->reg_disable);

    if (data->reg_enable_gpio != 0) {
        dev_err(dev, ""hv_shield enable GPIO is not low\n"");
        return -ENODEV;
    }

    if (data->reg_disable_gpio != 0) {
        dev_err(dev, ""hv_shield disable GPIO is not low\n"");
        return -ENODEV;
    }

    if (clk_enable(data->reg)) {
        dev_err(dev, ""Failed to enable hv_shield clock\n"");
        return -ENODEV;
    }

    if (gpiod_set_value(data->reg_enable, 1)) {
        dev_err(dev, ""Failed to enable hv_shield enable GPIO\n"");
        return -ENODEV;
    }

    if (gpiod_set_value(data->reg_disable, 1)) {
        dev_err(dev, ""Failed to enable hv_shield disable GPIO\n"");
        return -ENODEV;
    }

    return 0;
}","static int hv_shield_init(const struct device* dev) {
    struct hv_shield_data *data = dev->data;

    data->reg = devm_clk_get(&dev->resource, ""hv_shield"", false);
    if (!data->reg) {
        dev_err(dev, ""Failed to get hv_shield clock\n"");
        return -ENODEV;
    }

    data->reg_enable = devm_gpiod_get(dev, ""hv_shield_enable"", GPIOD_OUT_LOW);
    if (!data->reg_enable) {
        dev_err(dev, ""Failed to get hv_shield enable GPIO\n"");
        return -ENODEV;
    }

    data->reg_disable = devm_gpiod_get(dev, ""hv_shield_disable"", GPIOD_OUT_LOW);
    if (!data->reg_disable) {
        dev_err(dev, ""Failed to get hv_shield disable GPIO\n"");
        return -ENODEV;
    }

    data->reg_enable_gpio = gpiod_get_value(data->reg_enable);
    data->reg_disable_gpio = gpiod_get_value(data->reg_disable);

    if (data->reg_enable_gpio != 0) {
        dev_err(dev, ""hv_shield enable GPIO is not low\n"");
        return -ENODEV;
    }

    if (data->reg_disable_gpio != 0) {
        dev_err(dev, ""hv_shield disable GPIO is not low\n"");
        return -ENODEV;
    }

    if (clk_enable(data->reg)) {
        dev_err(dev, ""Failed to enable hv_shield clock\n"");
        return -ENODEV;
    }

    if (gpiod_set_value(data->reg_enable, 1)) {
        dev_err(dev, ""Failed to enable hv_shield enable GPIO\n"");
        return -ENODEV;
    }

    if (gpiod_set_value(data->reg_disable, 1)) {
        dev_err(dev, ""Failed to enable hv_shield disable GPIO\n"");
        return -ENODEV;
    }

    return 0;
}",25.71091324354121,5.741402668921297,12.810525200054206,39.130434782608695,45.16129032258064
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	struct hv_shield_data *data = dev->data;
	int ret;

	if (dac >= ARRAY_SIZE(data->dac_gain)) {
		dev_err(dev, ""Invalid DAC number %d\n"", dac);
		return -EINVAL;
	}

	if (gain >= ARRAY_SIZE(data->dac_gain[dac].gain_levels)) {
		dev_err(dev, ""Invalid gain level %d\n"", gain);
		return -EINVAL;
	}

	ret = i2c_write_reg_byte(dev, data->dac_reg, data->dac_gain[dac].gain_levels[gain]);
	if (ret)
		return ret;

	return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	struct hv_shield_data *data = dev->data;
	int ret;

	if (dac >= ARRAY_SIZE(data->dac_gain)) {
		dev_err(dev, ""Invalid DAC number %d\n"", dac);
		return -EINVAL;
	}

	if (gain >= ARRAY_SIZE(data->dac_gain[dac].gain_levels)) {
		dev_err(dev, ""Invalid gain level %d\n"", gain);
		return -EINVAL;
	}

	ret = i2c_write_reg_byte(dev, data->dac_reg, data->dac_gain[dac].gain_levels[gain]);
	if (ret)
		return ret;

	return 0;
}",44.28834995131826,24.77972083332877,33.95262634036534,50.0,68.42105263157895
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t reg = enable ? 0x01 : 0x00;
    uint8_t nibble = (reg << 4) | (reg >> 4);
    uint8_t mask = (1 << (index & 0x0F)) | (1 << ((index >> 4) & 0x0F));
    uint8_t val = nibble & mask;
    return hvs_set_gpio_output_enable_raw(dev, val);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t reg = enable ? 0x01 : 0x00;
    uint8_t nibble = (reg << 4) | (reg >> 4);
    uint8_t mask = (1 << (index & 0x0F)) | (1 << ((index >> 4) & 0x0F));
    uint8_t val = nibble & mask;
    return hvs_set_gpio_output_enable_raw(dev, val);
}",27.431391200259153,18.54843538649832,18.928701741582323,26.41509433962264,45.83333333333333
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_frame can_frame;
    struct can_device *can_dev = (struct can_device *)user_data;

    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    memcpy(can_frame.data, frame->data, frame->dlc);

    can_device_send(can_dev->can_dev, &can_frame);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_frame can_frame;
    struct can_device *can_dev = (struct can_device *)user_data;

    can_frame.id = frame->id;
    can_frame.dlc = frame->dlc;
    memcpy(can_frame.data, frame->data, frame->dlc);

    can_device_send(can_dev->can_dev, &can_frame);
}",42.84660252991359,24.267903351370006,27.11850676828435,45.0,75.0
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    int i;
    for (i = 0; i < entry_count; i++) {
        if (can_router_add_entry(entries[i].interface, entries[i].can_id, entries[i].mask, entries[i].target_interface) < 0) {
            return -1;
        }
    }
    return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    int i;
    for (i = 0; i < entry_count; i++) {
        if (can_router_add_entry(entries[i].interface, entries[i].can_id, entries[i].mask, entries[i].target_interface) < 0) {
            return -1;
        }
    }
    return 0;
}",40.52657778536438,28.9885526563602,33.0033420091248,36.95652173913043,63.1578947368421
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
    int i;

    for (i = 0; i < CAN_ROUTER_MAX_STATIC_TABLES; i++) {
        can_router_register_static_table(can_router_static_tables[i].id,
                                         can_router_static_tables[i].routing_table);
    }

    return 0;
}","static int can_router_sysinit() {
    int i;

    for (i = 0; i < CAN_ROUTER_MAX_STATIC_TABLES; i++) {
        can_router_register_static_table(can_router_static_tables[i].id,
                                         can_router_static_tables[i].routing_table);
    }

    return 0;
}",24.4245234415673,15.89532575917518,18.00966455881815,13.793103448275861,50.0
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int i;
	for (i = 0; i < 32; i++) {
		if ((mask >> i) & 1) {
			if ((value >> i) & 1) {
				gpio_set_pin(port, i, GPIO_PIN_SET);
			} else {
				gpio_set_pin(port, i, GPIO_PIN_RESET);
			}
		}
	}
	return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int i;
	for (i = 0; i < 32; i++) {
		if ((mask >> i) & 1) {
			if ((value >> i) & 1) {
				gpio_set_pin(port, i, GPIO_PIN_SET);
			} else {
				gpio_set_pin(port, i, GPIO_PIN_RESET);
			}
		}
	}
	return 0;
}",36.97781172664,29.662320479547443,31.286736074991673,25.423728813559322,61.53846153846154
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (dev == NULL || free_slots == NULL) {
        return -EINVAL;
    }

    if (dev->cb_slots == 0) {
        return -EINVAL;
    }

    *free_slots = dev->free_cb_slots;

    return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (dev == NULL || free_slots == NULL) {
        return -EINVAL;
    }

    if (dev->cb_slots == 0) {
        return -EINVAL;
    }

    *free_slots = dev->free_cb_slots;

    return 0;
}",59.392985018805966,45.734560961434724,55.17071244712245,66.66666666666666,70.0
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_incoming_cb *cb = &dev->incoming_cb[frame_id];
    cb->callback = callback;
    cb->frame_size = frame_size;
    cb->user_data = user_data;
    return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_incoming_cb *cb = &dev->incoming_cb[frame_id];
    cb->callback = callback;
    cb->frame_size = frame_size;
    cb->user_data = user_data;
    return 0;
}",30.424985587321203,18.733937834951227,29.016424682400803,38.23529411764706,35.714285714285715
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_device *device = dev->data;
    struct al_outgoing_cb *cb;

    if (device == NULL) {
        return -EINVAL;
    }

    cb = kzalloc(sizeof(struct al_outgoing_cb), GFP_KERNEL);
    if (cb == NULL) {
        return -ENOMEM;
    }

    cb->callback = callback;
    cb->user_data = user_data;
    cb->frame_id = frame_id;
    cb->frame_size = frame_size;

    list_add_tail(&cb->list, &device->outgoing_cb_list);

    return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    struct al_device *device = dev->data;
    struct al_outgoing_cb *cb;

    if (device == NULL) {
        return -EINVAL;
    }

    cb = kzalloc(sizeof(struct al_outgoing_cb), GFP_KERNEL);
    if (cb == NULL) {
        return -ENOMEM;
    }

    cb->callback = callback;
    cb->user_data = user_data;
    cb->frame_id = frame_id;
    cb->frame_size = frame_size;

    list_add_tail(&cb->list, &device->outgoing_cb_list);

    return 0;
}",37.42347363800347,31.824858746799713,33.835422359836045,41.17647058823529,42.857142857142854
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler,
                                             struct abstract_lin_schedule *schedule)
{
    if (scheduler == NULL || schedule == NULL) {
        return -1;
    }

    scheduler->active_schedule = schedule;
    scheduler->current_position = 0;

    return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler,
                                             struct abstract_lin_schedule *schedule)
{
    if (scheduler == NULL || schedule == NULL) {
        return -1;
    }

    scheduler->active_schedule = schedule;
    scheduler->current_position = 0;

    return 0;
}",19.202178691128648,3.585879147718834,4.275467195743116,28.947368421052634,40.0
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->enabled = 0;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->enabled = 0;
}",19.7648566426521,8.537025563868134,13.855734340073594,40.0,16.666666666666664

id,language,reference,generated,generated_rci,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        raise ValueError(""Unsupported datatype"")","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        raise ValueError(""Unsupported datatype"")",37.65499699406495,9.834867222003856,37.70819767733287,23.076923076923077,80.0
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any, List

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(x, signed, bits) for x in value)
    if not isinstance(value, int):
        return False
    if signed:
        min_val = -(2**(bits-1))
        max_val = 2**(bits-1) - 1
    else:
        min_val = 0
        max_val = 2**bits - 1
    return min_val <= value <= max_val","from typing import Any, List

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(x, signed, bits) for x in value)
    if not isinstance(value, int):
        return False
    if signed:
        min_val = -(2**(bits-1))
        max_val = 2**(bits-1) - 1
    else:
        min_val = 0
        max_val = 2**bits - 1
    return min_val <= value <= max_val",36.605031516255565,18.074813649762895,19.379203449150403,60.317460317460316,48.64864864864865
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.__dataclass_fields__:
        if type_def == datatype:
            return cls.__dataclass_fields__[type_def]
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.__dataclass_fields__:
        if type_def == datatype:
            return cls.__dataclass_fields__[type_def]
    return None",67.56409220109255,52.624397026344624,54.669008815062604,62.96296296296296,100.0
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","```python
def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    fqn_namespaced_datatypes = {
        ""int"": ""int"",
        ""float"": ""float"",
        ""bool"": ""bool"",
        ""str"": ""str"",
        ""bytes"": ""bytes"",
        ""list"": ""list"",
        ""tuple"": ""tuple"",
        ""dict"": ""dict"",
        ""set"": ""set"",
        ""frozenset"": ""frozenset"",
        ""None"": ""None"",
        ""Any"": ""Any"",
        ""Union"": ""Union"",
        ""Literal"": ""Literal"",
        ""Optional"": ""Optional"",
        ""Sequence"": ""Sequence"",
        ""Mapping"": ""Mapping"",
        ""Iterable"": ""Iterable"",
        ""Iterator"": ""Iterator"",
        ""Generator"": ""Generator"",
        ""Coroutine"": ""Coroutine"",
        ""AsyncIterator"": ""AsyncIterator"",
        ""AsyncGenerator"": ""AsyncGenerator"",
        ""Awaitable"": ""Awaitable"",
        ""Callable"": ""Callable"",
        ""TypeVar"": ""TypeVar"",
        ""Generic"": ""Generic"",
        ""Type"": ""Type"",
        ""TypeAlias"": ""TypeAlias"",
        ""TypedDict"": ""TypedDict"",
        ""TypedDictMeta"": ""TypedDictMeta"",
        ""TypedDictMetaV2"": ""TypedDictMetaV2"",
        ""TypedDictMetaV3"": ""TypedDictMetaV3"",
        ""TypedDictMetaV4"": ""TypedDictMetaV4"",
        ""TypedDictMetaV5"": ""TypedDictMetaV5"",
        ""TypedDictMetaV6"": ""TypedDictMetaV6"",
        ""TypedDictMetaV7"": ""TypedDictMetaV7"",
        ""TypedDictMetaV8"": ""TypedDictMetaV8"",
        ""TypedDictMetaV9"": ""TypedDictMetaV9"",
        ""TypedDictMetaV10"": ""TypedDictMetaV10"",
        ""TypedDictMetaV11"": ""TypedDictMetaV11"",
        ""TypedDictMetaV12"": ""TypedDictMetaV12"",
        ""TypedDictMetaV13"": ""TypedDictMetaV13"",
        ""TypedDictMetaV14"": ""TypedDictMetaV14"",
        ""TypedDictMetaV15"": ""TypedDictMetaV15"",
        ""TypedDictMetaV16"": ""TypedDictMetaV16"",
        ""TypedDictMetaV17"": ""TypedDictMetaV17"",
        ""TypedDictMetaV18"": ""TypedDictMetaV18"",
        ""TypedDictMetaV19"": ""TypedDictMetaV19"",
        ""TypedDictMetaV20"": ""TypedDictMetaV20"",
        ""TypedDictMetaV21"": ""TypedDictMetaV21"",
        ""TypedDictMetaV22"": ""TypedDictMetaV22"",
        ""TypedDictMetaV23"": ""TypedDictMetaV23"",
        ""TypedDictMetaV24"": ""TypedDictMetaV24"",
        ""TypedDictMetaV25"": ""TypedDictMetaV25"",
        ""TypedDictMetaV26"": ""TypedDictMetaV26"",
        ""TypedDictMetaV27"": ""TypedDictMetaV27"",
        ""TypedDictMetaV28"": ""TypedDictMetaV28"",
        ""TypedDictMetaV29"": ""TypedDictMetaV29","```python
def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    fqn_namespaced_datatypes = {
        ""int"": ""int"",
        ""float"": ""float"",
        ""bool"": ""bool"",
        ""str"": ""str"",
        ""bytes"": ""bytes"",
        ""list"": ""list"",
        ""tuple"": ""tuple"",
        ""dict"": ""dict"",
        ""set"": ""set"",
        ""frozenset"": ""frozenset"",
        ""None"": ""None"",
        ""Any"": ""Any"",
        ""Union"": ""Union"",
        ""Literal"": ""Literal"",
        ""Optional"": ""Optional"",
        ""Sequence"": ""Sequence"",
        ""Mapping"": ""Mapping"",
        ""Iterable"": ""Iterable"",
        ""Iterator"": ""Iterator"",
        ""Generator"": ""Generator"",
        ""Coroutine"": ""Coroutine"",
        ""AsyncIterator"": ""AsyncIterator"",
        ""AsyncGenerator"": ""AsyncGenerator"",
        ""Awaitable"": ""Awaitable"",
        ""Callable"": ""Callable"",
        ""TypeVar"": ""TypeVar"",
        ""Generic"": ""Generic"",
        ""Type"": ""Type"",
        ""TypeAlias"": ""TypeAlias"",
        ""TypedDict"": ""TypedDict"",
        ""TypedDictMeta"": ""TypedDictMeta"",
        ""TypedDictMetaV2"": ""TypedDictMetaV2"",
        ""TypedDictMetaV3"": ""TypedDictMetaV3"",
        ""TypedDictMetaV4"": ""TypedDictMetaV4"",
        ""TypedDictMetaV5"": ""TypedDictMetaV5"",
        ""TypedDictMetaV6"": ""TypedDictMetaV6"",
        ""TypedDictMetaV7"": ""TypedDictMetaV7"",
        ""TypedDictMetaV8"": ""TypedDictMetaV8"",
        ""TypedDictMetaV9"": ""TypedDictMetaV9"",
        ""TypedDictMetaV10"": ""TypedDictMetaV10"",
        ""TypedDictMetaV11"": ""TypedDictMetaV11"",
        ""TypedDictMetaV12"": ""TypedDictMetaV12"",
        ""TypedDictMetaV13"": ""TypedDictMetaV13"",
        ""TypedDictMetaV14"": ""TypedDictMetaV14"",
        ""TypedDictMetaV15"": ""TypedDictMetaV15"",
        ""TypedDictMetaV16"": ""TypedDictMetaV16"",
        ""TypedDictMetaV17"": ""TypedDictMetaV17"",
        ""TypedDictMetaV18"": ""TypedDictMetaV18"",
        ""TypedDictMetaV19"": ""TypedDictMetaV19"",
        ""TypedDictMetaV20"": ""TypedDictMetaV20"",
        ""TypedDictMetaV21"": ""TypedDictMetaV21"",
        ""TypedDictMetaV22"": ""TypedDictMetaV22"",
        ""TypedDictMetaV23"": ""TypedDictMetaV23"",
        ""TypedDictMetaV24"": ""TypedDictMetaV24"",
        ""TypedDictMetaV25"": ""TypedDictMetaV25"",
        ""TypedDictMetaV26"": ""TypedDictMetaV26"",
        ""TypedDictMetaV27"": ""TypedDictMetaV27"",
        ""TypedDictMetaV28"": ""TypedDictMetaV28"",
        ""TypedDictMetaV29"": ""TypedDictMetaV29",14.947303100763387,6.938214877826448,22.98988641411599,18.75,11.11111111111111
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType(name=""string"", array=False)
    elif t == ""integer"":
        return ApiGearType(name=""integer"", array=False)
    elif t == ""float"":
        return ApiGearType(name=""float"", array=False)
    elif t == ""boolean"":
        return ApiGearType(name=""boolean"", array=False)
    elif t == ""date"":
        return ApiGearType(name=""date"", array=False)
    elif t == ""datetime"":
        return ApiGearType(name=""datetime"", array=False)
    elif t == ""time"":
        return ApiGearType(name=""time"", array=False)
    elif t == ""byte"":
        return ApiGearType(name=""byte"", array=False)
    elif t == ""binary"":
        return ApiGearType(name=""binary"", array=False)
    elif t == ""json"":
        return ApiGearType(name=""json"", array=False)
    elif t == ""object"":
        return ApiGearType(name=""object"", array=False)
    elif t == ""array"":
        return ApiGearType(name=""array"", array=True)
    elif t.endswith(""[]""):
        t = t[:-2]
        return ApiGearType(name=t.replace(""."", ""_""), array=True)
    elif ""."" in t:
        return ApiGearType(name=t.replace(""."", ""_""), array=False)
    else:
        return ApiGearType(name=t, array=False)","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType(name=""string"", array=False)
    elif t == ""integer"":
        return ApiGearType(name=""integer"", array=False)
    elif t == ""float"":
        return ApiGearType(name=""float"", array=False)
    elif t == ""boolean"":
        return ApiGearType(name=""boolean"", array=False)
    elif t == ""date"":
        return ApiGearType(name=""date"", array=False)
    elif t == ""datetime"":
        return ApiGearType(name=""datetime"", array=False)
    elif t == ""time"":
        return ApiGearType(name=""time"", array=False)
    elif t == ""byte"":
        return ApiGearType(name=""byte"", array=False)
    elif t == ""binary"":
        return ApiGearType(name=""binary"", array=False)
    elif t == ""json"":
        return ApiGearType(name=""json"", array=False)
    elif t == ""object"":
        return ApiGearType(name=""object"", array=False)
    elif t == ""array"":
        return ApiGearType(name=""array"", array=True)
    elif t.endswith(""[]""):
        t = t[:-2]
        return ApiGearType(name=t.replace(""."", ""_""), array=True)
    elif ""."" in t:
        return ApiGearType(name=t.replace(""."", ""_""), array=False)
    else:
        return ApiGearType(name=t, array=False)",23.017462716048712,11.173950901186226,15.23508464311888,34.51327433628318,31.147540983606557
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if datatype == ""string"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.STRING,
            description=node.description,
        )
    elif datatype == ""integer"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.INTEGER,
            description=node.description,
        )
    elif datatype == ""float"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.FLOAT,
            description=node.description,
        )
    elif datatype == ""boolean"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.BOOLEAN,
            description=node.description,
        )
    elif datatype == ""array"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.ARRAY,
            description=node.description,
        )
    elif datatype == ""object"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.OBJECT,
            description=node.description,
        )
    else:
        logging.warning(f""Unsupported datatype: {datatype}"")
        return None","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if datatype == ""string"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.STRING,
            description=node.description,
        )
    elif datatype == ""integer"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.INTEGER,
            description=node.description,
        )
    elif datatype == ""float"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.FLOAT,
            description=node.description,
        )
    elif datatype == ""boolean"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.BOOLEAN,
            description=node.description,
        )
    elif datatype == ""array"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.ARRAY,
            description=node.description,
        )
    elif datatype == ""object"":
        return ApiGearProperty(
            name=node.name,
            datatype=ApiGearType.OBJECT,
            description=node.description,
        )
    else:
        logging.warning(f""Unsupported datatype: {datatype}"")
        return None",28.224211063347397,11.39256993166595,23.17094098839031,33.33333333333333,45.0
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path
from vspec.vspec import VSpec
from vspec.parser import parse_vspec
from vspec.exceptions import VSpecError

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    """"""Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded""""""
    vspecs = []
    for spec in specs:
        try:
            vspecs.append(parse_vspec(spec, include_dirs))
        except VSpecError as e:
            raise VSpecError(f""Failed to load {spec}: {e}"")
    if not vspecs:
        raise VSpecError(""No VSpec files loaded"")
    return VSpec.merge(vspecs, identifier)","from pathlib import Path
from vspec.vspec import VSpec
from vspec.parser import parse_vspec
from vspec.exceptions import VSpecError

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    """"""Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded""""""
    vspecs = []
    for spec in specs:
        try:
            vspecs.append(parse_vspec(spec, include_dirs))
        except VSpecError as e:
            raise VSpecError(f""Failed to load {spec}: {e}"")
    if not vspecs:
        raise VSpecError(""No VSpec files loaded"")
    return VSpec.merge(vspecs, identifier)",28.712134911278863,15.818570486912556,21.82066683262151,40.0,37.2093023255814
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict) and k in base and isinstance(base[k], dict):
            deep_update(base[k], v)
        else:
            base[k] = v","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict) and k in base and isinstance(base[k], dict):
            deep_update(base[k], v)
        else:
            base[k] = v",61.09433177212898,35.2397286283442,37.262598460171745,81.25,90.625
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if isinstance(v, str) and len(v) == 10 and v.startswith(""0x"") and v[2:].isdigit():
            return v
    return None","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is not None:
        if isinstance(v, str) and len(v) == 10 and v.startswith(""0x"") and all(c in '0123456789abcdefABCDEF' for c in v[2:]):
            return v
    return None",53.50362680299459,45.30937217439823,46.705135037580135,52.0,70.0
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    if fqn is not None:
        vss_raw = vss_raw.resolve()
    return vss_raw","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    if fqn is not None:
        try:
            vss_raw = vss_raw.resolve()
        except Exception:
            pass
    return vss_raw",45.77190496790071,30.907717844375206,31.346568693894305,47.5,73.33333333333333
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [""int"", ""float"", ""str"", ""bool""]
    for value in values:
        if value not in valid_datatypes:
            raise ValueError(f""Invalid datatype: {value}"")
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [""int"", ""float"", ""str"", ""bool""]
    for value in values:
        if value not in valid_datatypes:
            raise ValueError(f""Invalid datatype: {value}"")
    return values",47.270146323358716,30.096870722978437,38.150381237123135,54.166666666666664,66.66666666666666
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int) -> str:
        result = "" "" * indent + node.name + ""\n""
        for attr in attributes:
            if hasattr(node, attr):
                result += "" "" * (indent + 2) + f""{attr}: {getattr(node, attr)}\n""
        for child in node.children:
            result += render_node(child, indent + 2)
        return result

    return render_node(tree, 0)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int) -> str:
        result = "" "" * indent + node.name + ""\n""
        for attr in attributes:
            if hasattr(node, attr):
                result += "" "" * (indent + 2) + f""{attr}: {getattr(node, attr)}\n""
        for child in node.children:
            result += render_node(child, indent + 2)
        return result

    return render_node(tree, 0)",24.862253356908727,11.983713904037705,15.683923005378581,32.30769230769231,39.473684210526315
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch:
        raise ValueError(""Starting node is not a branch"")
    if self.parent is None:
        return self, depth
    if not self.parent.is_instance:
        return self.parent.get_instance_root(depth + 1)
    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.is_branch:
        raise ValueError(""Starting node is not a branch"")
    if self.parent is None:
        return self, depth
    if not self.parent.is_instance:
        return self.parent.get_instance_root(depth + 1)
    return self, depth",60.68681332920322,47.764000100121415,58.535884795638815,57.49999999999999,78.94736842105263
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    if not self.children:
        return 0
    for child in self.children:
        if isinstance(child, VSSDataBranch) and child.is_instance:
            return 1 + count_instance_children_depth(child)
    return 0","def count_instance_children_depth(self) -> int:
    if not self.children:
        return 0
    for child in self.children:
        if isinstance(child, VSSDataBranch) and child.is_instance:
            return 1 + count_instance_children_depth(child)
    return 0",47.76287801690429,32.077142814517714,42.825300930118075,30.434782608695656,85.71428571428571
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.split('_')[1] == name:
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        parts = node_id.split('_')
        if len(parts) > 1 and parts[1] == name:
            children_ids.append(node_id)
    return children_ids",65.24065932875062,43.03767738122004,44.591626600449125,73.33333333333333,100.0
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        return getattr(o, name)
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default",42.338134767853695,36.67473999422677,37.67779907718803,41.66666666666667,53.333333333333336
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""complex"":
        fd.write(f""import {tree.name} from '{tree.module}.proto'\n"")
    if tree.type == ""branch"":
        fd.write(f""{tree.name} = "")
        if add_optional:
            fd.write(""optional("")
        fd.write(f""{tree.name}("")
        if static_uid:
            fd.write(f""static_uid='{tree.static_uid}'"")
        traverse_signal_tree(tree.children[0], fd, static_uid, add_optional)
        fd.write("")"")
        if add_optional:
            fd.write(""?"")
        fd.write(""\n"")","def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""complex"":
        fd.write(f""import {tree.name} from '{tree.module}.proto'\n"")
    if tree.type == ""branch"":
        fd.write(f""{tree.name} = "")
        if add_optional:
            fd.write(""optional("")
        fd.write(f""{tree.name}("")
        if static_uid:
            fd.write(f""static_uid='{tree.static_uid}'"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write("")"")
        if add_optional:
            fd.write(""?"")
        fd.write(""\n"")",21.887126527542105,12.282122517327156,14.097998713116189,27.835051546391753,33.33333333333333
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    def traverse(node: VSSNode, path: list[str]):
        if node.is_terminal():
            instances[path[-1]] = instances.get(path[-1], []) + [node.name]
        else:
            for child in node.children:
                traverse(child, path + [child.name])
    traverse(root, [])
    return instances","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances = {}
    def traverse(node: VSSNode, path: list[str]):
        if node.is_terminal():
            instances[path[-1]] = instances.get(path[-1], []) + [node.name]
        else:
            for child in node.children:
                traverse(child, path + [child.name])
    traverse(root, [])
    return instances",24.607050847743057,9.949319039303774,11.514305416646176,40.229885057471265,36.734693877551024
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)","def is_VSS_leaf(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataDatatype)",53.95251422009305,34.1077254951379,31.7023313852343,50.0,100.0
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and not node.is_instance",38.92121923202306,27.429553970075617,26.150059800121895,42.10526315789473,60.0
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and node.is_instance","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return isinstance(node.data, VSSDataBranch) and node.is_instance",39.917796197724655,28.641904579795412,26.584835766658777,44.44444444444444,60.0
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    fnv_prime = 0x01000193
    hash = 0x811c9dc5
    for byte in identifier:
        hash = (hash * fnv_prime) ^ byte
    return hash","def fnv1_32_hash(identifier: bytes) -> int:
    fnv_prime = 0x01000193
    hash = 0x811c9dc5
    for byte in identifier:
        hash ^= byte
        hash *= fnv_prime
    return hash",31.417028049627127,28.489318277723964,30.33668865762665,36.84210526315789,30.0
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    TextView title = (TextView) root.findViewById(R.id.card_title);
    ImageView icon = (ImageView) root.findViewById(R.id.card_icon);
    return root;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View root = inflater.inflate(R.layout.card_fragment, container, false);
    TextView title = (TextView) root.findViewById(R.id.card_title);
    ImageView icon = (ImageView) root.findViewById(R.id.card_icon);
    return root;
}",59.35648188024886,39.34927644549873,49.591802590648214,66.66666666666666,81.81818181818183
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent == null) {
        buttonView.setVisibility(View.GONE);
    } else {
        buttonView.setImageDrawable(buttonContent.getDrawable());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent == null) {
        buttonView.setVisibility(View.GONE);
    } else {
        buttonView.setImageDrawable(buttonContent.getDrawable());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    }
}",76.78865729191429,59.69491792019645,60.36293705391236,87.09677419354838,100.0
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    ViewStub stub = (ViewStub) findViewById(R.layout.descriptive_text_only);
    View inflated = stub.inflate();
    TextView title = (TextView) findViewById(R.id.title);
    TextView subtitle = (TextView) findViewById(R.id.subtitle);
    ImageView image = (ImageView) findViewById(R.id.image);
    return inflated;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    ViewStub stub = (ViewStub) findViewById(R.layout.descriptive_text_only);
    View inflated = stub.inflate();
    TextView title = (TextView) findViewById(R.id.title);
    TextView subtitle = (TextView) findViewById(R.id.subtitle);
    ImageView image = (ImageView) findViewById(R.id.image);
    return inflated;
}",29.61588793274801,18.278976827567597,19.435911801820165,45.45454545454545,35.294117647058826
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    headerView.getRootView().setVisibility(View.VISIBLE);
    headerView.setTitle(header.getTitle());
    headerView.setIcon(header.getIcon());
}","public void updateHeaderView(CardHeader header) {
    headerView.getRootView().setVisibility(View.VISIBLE);
    headerView.setTitle(header.getTitle());
    headerView.setIcon(header.getIcon());
}",55.068900543077916,29.95197100101508,33.18077402843942,57.14285714285714,100.0
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = LayoutInflater.from(getContext()).inflate(R.layout.text_block, this, false);
        mTextViews = new TextView[]{
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text1),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text2),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text3),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text4),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text5)
        };
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = LayoutInflater.from(getContext()).inflate(R.layout.text_block, this, false);
        mTextViews = new TextView[]{
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text1),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text2),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text3),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text4),
                (TextView) mTextBlockLayoutView.findViewById(R.id.text_block_text5)
        };
    }
    return mTextBlockLayoutView;
}",48.36950555200438,33.313765767911605,44.823347349196794,56.25,59.09090909090909
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
    Intent intent = new Intent(MediaBrowserService.SERVICE_INTERFACE);
    intent.setPackage(packageName);
    List<ResolveInfo> resolveInfos = packageManager.queryBroadcastReceiver(intent, null);
    if (resolveInfos == null || resolveInfos.isEmpty()) {
        return null;
    }
    return resolveInfos.get(0).activityInfo.componentName;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
    Intent intent = new Intent(MediaBrowserService.SERVICE_INTERFACE);
    intent.setPackage(packageName);
    List<ResolveInfo> resolveInfos = packageManager.queryBroadcastReceiver(intent, null);
    if (resolveInfos == null || resolveInfos.isEmpty()) {
        return null;
    }
    return resolveInfos.get(0).activityInfo.componentName;
}",39.0538891015768,29.045646832593835,31.078265368861608,60.37735849056604,35.714285714285715
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
                (componentAppType & AppTypes.MEDIA_SERVICE) != 0 &&
                customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        return true;
    }","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if ((appTypesToShow & AppTypes.LAUNCHABLE) != 0 &&
                (componentAppType & AppTypes.MEDIA_SERVICE) != 0 &&
                customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        return true;
    }",61.86418183533259,48.03984716340054,50.21053097158059,63.49206349206349,85.71428571428571
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
    carMediaManager.setMediaSource(componentName);
    if (context instanceof Activity) {
        try {
            ((Activity) context).finish();
        } catch (CarNotConnectedException e) {
            Log.e(""CarMediaManager"", ""Car service unavailable"", e);
        }
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
    carMediaManager.setMediaSource(componentName);
    if (context instanceof Activity) {
        try {
            ((Activity) context).finish();
        } catch (CarNotConnectedException e) {
            Log.e(""CarMediaManager"", ""Car service unavailable"", e);
        }
    }
}",68.83066265444376,61.305689871011005,62.40405752095758,51.61290322580645,100.0
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","boolean isOptimized = false;
    try {
        isOptimized = carPackageManager.isActivityDistractionOptimized(packageName, activityName);
    } catch (CarNotConnectedException e) {
        Log.e(""CarPackageManager"", ""Car not connected: "" + e.getMessage());
        return false;
    } catch (NullPointerException e) {
        Log.e(""CarPackageManager"", ""CarPackageManager is null: "" + e.getMessage());
        return false;
    }
    return isOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
    if (carPackageManager == null) {
        Log.e(""CarPackageManager"", ""CarPackageManager is null"");
        return false;
    }
    try {
        return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
    } catch (CarNotConnectedException e) {
        Log.e(""CarPackageManager"", ""Car not connected: "" + e.getMessage());
        return false;
    }
}",34.5557367898174,21.324172756659596,21.82488277699427,37.93103448275862,57.14285714285714
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
    Intent mapsIntent = null;
    for (Intent intent : mapsIntents) {
        if (intent.getStringExtra(MapsActivity.MAPS_INTENT_PACKAGE).equals(defaultMapPackage)) {
            mapsIntent = intent;
            break;
        }
    }
    if (mapsIntent == null) {
        mapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=maps""));
    }
    return mapsIntent;
}","private Intent getMapsIntent() {
    Intent mapsIntent = null;
    for (Intent intent : mapsIntents) {
        if (intent.getStringExtra(MapsActivity.MAPS_INTENT_PACKAGE).equals(defaultMapPackage)) {
            mapsIntent = intent;
            break;
        }
    }
    if (mapsIntent == null) {
        mapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=maps""));
    }
    return mapsIntent;
}",10.870214904147016,6.238556009119386,8.6708750360401,16.666666666666664,11.904761904761903
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    for (String className : homeCardModuleClassNames) {
        try {
            Class<?> clazz = Class.forName(className);
            HomeCardModule module = (HomeCardModule) clazz.getDeclaredConstructor().newInstance();
            addCardView(module.getCardView());
        } catch (ClassNotFoundException e) {
            Log.e(TAG, ""Could not find class: "" + className);
        } catch (InstantiationException e) {
            Log.e(TAG, ""Could not instantiate class: "" + className);
        } catch (IllegalAccessException e) {
            Log.e(TAG, ""Could not access class: "" + className);
        } catch (NoSuchMethodException e) {
            Log.e(TAG, ""Could not find constructor: "" + className);
        } catch (InvocationTargetException e) {
            Log.e(TAG, ""Could not invoke constructor: "" + className);
        }
    }
}","private void initializeCards() {
    for (String className : homeCardModuleClassNames) {
        try {
            Class<?> clazz = Class.forName(className);
            HomeCardModule module = (HomeCardModule) clazz.getDeclaredConstructor().newInstance();
            addCardView(module.getCardView());
        } catch (ClassNotFoundException e) {
            Log.e(TAG, ""Could not find class: "" + className);
        } catch (InstantiationException e) {
            Log.e(TAG, ""Could not instantiate class: "" + className);
        } catch (IllegalAccessException e) {
            Log.e(TAG, ""Could not access class: "" + className);
        } catch (NoSuchMethodException e) {
            Log.e(TAG, ""Could not find constructor: "" + className);
        } catch (InvocationTargetException e) {
            Log.e(TAG, ""Could not invoke constructor: "" + className);
        }
    }
}",17.546683939500383,7.225978646812681,7.290427440859175,29.67032967032967,26.0
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        if (taskAppearedInfo.isMultiWindow()) {
            ActivityTaskManager.get().removeTask(taskAppearedInfo.taskId);
            Log.d(""TaskAppearedInfo"", ""Removing dangling task: "" + taskAppearedInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        if (taskAppearedInfo.isMultiWindow()) {
            ActivityTaskManager.get().removeTask(taskAppearedInfo.taskId);
            Log.d(""TaskAppearedInfo"", ""Removing dangling task: "" + taskAppearedInfo.taskId);
        }
    }
}",35.56623056327538,26.443806118509777,30.46758078105638,44.44444444444444,40.909090909090914
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    String mode = CarIntent.getIntent(this).getStringExtra(Intent.EXTRA_MODE);
    if (mode != null) {
        int modeResourceId = getResources().getIdentifier(mode, ""string"", getPackageName());
        if (modeResourceId != 0) {
            setTitle(getString(modeResourceId));
            ((CarUiToolbar) findViewById(R.id.toolbar)).setTitle(getString(modeResourceId));
        }
    }
}","private void updateMode() {
    String mode = CarIntent.getIntent(this).getStringExtra(Intent.EXTRA_MODE);
    if (mode != null) {
        int modeResourceId = getResources().getIdentifier(mode, ""string"", getPackageName());
        if (modeResourceId != 0) {
            setTitle(getString(modeResourceId));
            ((CarUiToolbar) findViewById(R.id.toolbar)).setTitle(getString(modeResourceId));
        }
    }
}",34.1117209757151,8.60132510739358,31.02016197006999,52.38095238095239,44.44444444444444
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    Chronometer chronometer = findViewById(R.id.chronometer);
    View separator = findViewById(R.id.separator);
    chronometer.setSeparatorView(separator);
    return chronometer;
}","private Chronometer getChronometer() {
    Chronometer chronometer = findViewById(R.id.chronometer);
    View separator = findViewById(R.id.separator);
    chronometer.setSeparatorView(separator);
    return chronometer;
}",32.88185198179086,13.320564393651892,14.360689687357706,34.61538461538461,69.23076923076923
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    ViewStub stub = (ViewStub) findViewById(R.id.media_layout_stub);
    View inflatedView = stub.inflate();
    TextView titleView = (TextView) inflatedView.findViewById(R.id.media_layout_title);
    TextView subtitleView = (TextView) inflatedView.findViewById(R.id.media_layout_subtitle);
    MediaPlaybackControlsBarPresenter presenter = new MediaPlaybackControlsBarPresenter(this);
    MediaPlaybackControlsBar controlsBar = (MediaPlaybackControlsBar) inflatedView.findViewById(R.id.media_layout_controls_bar);
    controlsBar.setPresenter(presenter);
    return inflatedView;
}","private View getMediaLayoutView() {
    ViewStub stub = (ViewStub) findViewById(R.id.media_layout_stub);
    View inflatedView = stub.inflate();
    TextView titleView = (TextView) inflatedView.findViewById(R.id.media_layout_title);
    TextView subtitleView = (TextView) inflatedView.findViewById(R.id.media_layout_subtitle);
    MediaPlaybackControlsBarPresenter presenter = new MediaPlaybackControlsBarPresenter(this);
    MediaPlaybackControlsBar controlsBar = (MediaPlaybackControlsBar) inflatedView.findViewById(R.id.media_layout_controls_bar);
    controlsBar.setPresenter(presenter);
    return inflatedView;
}",38.663620449678895,15.17249576563017,18.150791165402993,55.81395348837209,65.51724137931035
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    int cardWidth = card.getWidth();
    int cardHeight = card.getHeight();
    int maxDim = Math.max(cardWidth, cardHeight);
    Bitmap scaledBitmap = Bitmap.createScaledBitmap(image.getBitmap(), maxDim, maxDim, true);
    Bitmap blurredBitmap = scaledBitmap.copy(Bitmap.Config.ARGB_8888, true).blur(8);
    card.setBackground(new BitmapDrawable(blurredBitmap));
}","private void updateBackgroundImage(Drawable image) {
    int cardWidth = card.getWidth();
    int cardHeight = card.getHeight();
    int maxDim = Math.max(cardWidth, cardHeight);
    Bitmap scaledBitmap = Bitmap.createScaledBitmap(image.getBitmap(), maxDim, maxDim, true);
    Bitmap blurredBitmap = scaledBitmap.copy(Bitmap.Config.ARGB_8888, true).blur(8);
    card.setBackground(new BitmapDrawable(blurredBitmap));
}",27.332462980502196,9.996554539432886,11.085434134712651,32.69230769230769,55.55555555555556
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaLayout.setVisibility(View.VISIBLE);
    mediaLayout.setTitle(title);
    mediaLayout.setSubtitle(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    mediaLayout.setVisibility(View.VISIBLE);
    mediaLayout.setTitle(title);
    mediaLayout.setSubtitle(subtitle);
}",70.842490254843,59.004687263928076,61.207379018601806,63.1578947368421,100.0
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        chronometer.setVisibility(View.VISIBLE);
        separator.setVisibility(View.VISIBLE);
        chronometer.setBase(content.getStartTime());
        chronometer.start();
    } else {
        chronometer.setVisibility(View.GONE);
        separator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        chronometer.setVisibility(View.VISIBLE);
        separator.setVisibility(View.VISIBLE);
        chronometer.setBase(content.getStartTime());
        chronometer.start();
    } else {
        chronometer.setVisibility(View.GONE);
        separator.setVisibility(View.GONE);
    }
}",67.04280743393774,53.0071451291718,55.164084606579166,60.0,100.0
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.addCallback(this);
    }
}","public void onCallAdded(Call call) {
    if (call != null) {
        call.addCallback(this);
    }
}",74.36357747171822,79.10665071754359,79.88612070779082,38.46153846153847,100.0
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
    call.clearCurrentCall();
    call.clearCardContent();
    presenter.onModelChanged();
    call.unregisterCallback(this);
}","public void onCallRemoved(Call call) {
    call.clearCurrentCall();
    call.clearCardContent();
    presenter.onModelChanged();
    call.unregisterCallback(this);
}",27.14916922548058,15.124760523215706,20.61477352156375,30.0,42.857142857142854
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(number);
    presenter.onModelUpdated(view);
}","void updateModelWithPhoneNumber(String number) {
    DescriptiveTextWithControlsView view = new DescriptiveTextWithControlsView(number);
    presenter.onModelUpdated(view);
}",14.306789336892923,11.682950752097785,15.6830954843628,11.11111111111111,18.75
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
    muteButton.setIcon(muteIcon);
    muteButton.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            toggleMute();
        }
    });

    endCallButton.setIcon(endCallIcon);
    endCallButton.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            endCall();
        }
    });

    dialpadButton.setIcon(dialpadIcon);
    dialpadButton.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            showDialpad();
        }
    });
}","private void initializeAudioControls() {
    muteButton.setIcon(muteIcon);
    muteButton.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            toggleMute();
        }
    });

    endCallButton.setIcon(endCallIcon);
    endCallButton.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            endCall();
        }
    });

    dialpadButton.setIcon(dialpadIcon);
    dialpadButton.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            showDialpad();
        }
    });
}",19.14334584104017,5.992026878339571,8.950340443040359,20.454545454545457,41.17647058823529
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (dbusConnectionStatus_.isActive()) {
        _listener.notify(AVAILABLE);
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (dbusConnectionStatus_.isActive()) {
        _listener.notify(AVAILABLE);
    }
}",55.51627611083381,54.37427682227519,61.16908849062524,56.52173913043478,50.0
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lk(join_mutex_);
    if (conn_to_thread_.count(conn) > 0 && conn_to_thread_[conn] == &t) {
        if (conn_to_thread_[conn]->joinable()) {
            conn_to_thread_[conn]->detach();
        }
        conn_to_thread_.erase(conn);
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lk(join_mutex_);
    if (conn_to_thread_.count(conn) > 0 && conn_to_thread_[conn] == &t) {
        if (conn_to_thread_[conn]->joinable()) {
            conn_to_thread_[conn]->detach();
        }
        conn_to_thread_.erase(conn);
    }
}",29.457106719325722,19.0590415702383,21.446282152759384,42.028985507246375,35.294117647058826
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        libdbusWatch->stopMonitoring();
        libdbusWatch->disown();
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch) {
        libdbusWatch->stopMonitoring();
        libdbusWatch->disown();
    }
}",21.275726049621056,9.838815023000661,19.658028569422953,28.333333333333332,27.27272727272727
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    DBusWatchWrapper* wrapper = reinterpret_cast<DBusWatchWrapper*>(data);
    if (wrapper->isReady()) {
        libdbus_connection_signal_watch(connection, libdbusWatch, wrapper, wrapper->getCallback());
    } else {
        libdbus_connection_unwatch(connection, libdbusWatch);
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    DBusWatchWrapper* wrapper = reinterpret_cast<DBusWatchWrapper*>(data);
    if (wrapper->isReady()) {
        libdbus_connection_signal_watch(connection, libdbusWatch, wrapper, wrapper->getCallback());
    } else {
        libdbus_connection_unwatch(connection, libdbusWatch);
    }
}",26.337631010382594,5.60987938749209,10.968305881699512,46.464646464646464,42.30769230769231
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (dbusObjectManager_ == nullptr) {
        std::lock_guard<std::mutex> lock(dbusObjectManagerMutex_);
        if (dbusObjectManager_ == nullptr) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(dbusConnection_);
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (dbusObjectManager_ == nullptr) {
        std::lock_guard<std::mutex> lock(dbusObjectManagerMutex_);
        if (dbusObjectManager_ == nullptr) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(dbusConnection_);
        }
    }
    return dbusObjectManager_;
}",60.06940171338564,37.283992459416574,46.583357983869604,56.41025641025641,100.0
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsServiceNames.find(serviceName);
    if (it != itsServiceNames.end()) {
        if (--it->second == 0) {
            itsServiceNames.erase(it);
            return true;
        }
        return true;
    }
    return false;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsServiceNames.find(serviceName);
    if (it != itsServiceNames.end()) {
        if (--it->second == 0) {
            itsServiceNames.erase(it);
            return true;
        }
        return true;
    }
    return false;
}",28.669651152063746,9.94317337275267,12.592574092645176,57.14285714285714,35.0
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (_libdbusPendingCall == nullptr) {
        return DBusMessage();
    }

    DBusMessage reply;
    reply.setReply(_libdbusPendingCall);
    return reply;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (_libdbusPendingCall == nullptr) {
        return DBusMessage();
    }

    DBusMessage reply = DBusMessage::createReply(_libdbusPendingCall);
    return reply;
}",32.93339615896016,14.745376109454458,17.629234167411813,41.02564102564102,58.333333333333336
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusAsyncHandler*> handlers;
    {
        std::lock_guard<std::mutex> lock(m_asyncHandlersMutex);
        handlers = std::move(m_asyncHandlers);
    }
    for (auto handler : handlers) {
        delete handler;
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusAsyncHandler*> handlers;
    {
        std::lock_guard<std::mutex> lock(m_asyncHandlersMutex);
        handlers = std::move(m_asyncHandlers);
    }
    for (auto handler : handlers) {
        delete handler;
    }
}",17.310956307441835,5.695611126053232,6.065220906435207,40.816326530612244,16.666666666666664
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex);
    for (auto it = signalHandlers.begin(); it != signalHandlers.end(); ++it) {
        auto& signalHandler = it->second;
        if (signalHandler.onSpecificError) {
            signalHandler.onSpecificError(signalHandler.signalTag, DBusError::SUCCESS);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex);
    for (auto it = signalHandlers.begin(); it != signalHandlers.end(); ++it) {
        auto& signalHandler = it->second;
        if (signalHandler.onSpecificError) {
            signalHandler.onSpecificError(signalHandler.signalTag, DBusError::SUCCESS);
        }
    }
}",30.53494785242874,6.842480839516567,7.145136657154906,45.65217391304348,62.5
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsConnections.find(_connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsConnections.find(_connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}",59.67147183230757,24.94174717700826,26.244140152221984,100.0,87.5
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getMember() == ""InterfacesAdded"") {
        onInterfacesAdded(dbusMessage);
    } else if (dbusMessage.getMember() == ""InterfacesRemoved"") {
        onInterfacesRemoved(dbusMessage);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getMember() == ""InterfacesAdded"") {
        onInterfacesAdded(dbusMessage);
    } else if (dbusMessage.getMember() == ""InterfacesRemoved"") {
        onInterfacesRemoved(dbusMessage);
    }
}",47.81387645409231,32.28213880040185,42.09025013285051,45.45454545454545,71.42857142857143
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances.clear();

    if (m_availableServiceInstances.size() > 0) {
        for (auto &serviceInstance : m_availableServiceInstances) {
            _availableServiceInstances.push_back(serviceInstance);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances.clear();

    if (m_availableServiceInstances.size() > 0) {
        for (auto &serviceInstance : m_availableServiceInstances) {
            _availableServiceInstances.push_back(serviceInstance);
        }
    }
}",38.46789773432778,14.908960803395843,20.780811952097086,68.18181818181817,50.0
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    std::string dbusAddress = getDBusAddress(_instance);
    if (dbusAddress.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceName = getServiceName(dbusAddress);
    if (serviceName.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string servicePath = getServicePath(dbusAddress);
    if (servicePath.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceInterface = getServiceInterface(dbusAddress);
    if (serviceInterface.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceMethod = getServiceMethod(dbusAddress);
    if (serviceMethod.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    _callStatus = CallStatus::CALL_STATUS_SUCCESS;
    _availabilityStatus = AvailabilityStatus::AVAILABLE;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    std::string dbusAddress = getDBusAddress(_instance);
    if (dbusAddress.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceName = getServiceName(dbusAddress);
    if (serviceName.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string servicePath = getServicePath(dbusAddress);
    if (servicePath.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceInterface = getServiceInterface(dbusAddress);
    if (serviceInterface.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceMethod = getServiceMethod(dbusAddress);
    if (serviceMethod.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    _callStatus = CallStatus::CALL_STATUS_SUCCESS;
    _availabilityStatus = AvailabilityStatus::AVAILABLE;
}",39.01607924466715,12.66408849086649,28.694346134860915,64.70588235294117,50.0
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusMessage message = _message;
    DBusError error;
    DBusMessage reply;
    DBusConnection connection;
    DBusError error2;

    if (message.getType() != DBUS_MESSAGE_TYPE_SIGNAL) {
        return;
    }

    if (message.getArgs().size() < 3) {
        return;
    }

    DBusObjectPath objectPath = message.getArgs()[0];
    DBusSignature signature = message.getArgs()[1];
    DBusMessage replyMessage = message.getArgs()[2];

    if (objectPath.isEmpty() || signature.isEmpty() || replyMessage.isEmpty()) {
        return;
    }

    DBusMessage replyMessage2;
    DBusMessage replyMessage3;
    DBusMessage replyMessage4;
    DBusMessage replyMessage5;
    DBusMessage replyMessage6;
    DBusMessage replyMessage7;
    DBusMessage replyMessage8;
    DBusMessage replyMessage9;
    DBusMessage replyMessage10;
    DBusMessage replyMessage11;
    DBusMessage replyMessage12;
    DBusMessage replyMessage13;
    DBusMessage replyMessage14;
    DBusMessage replyMessage15;
    DBusMessage replyMessage16;
    DBusMessage replyMessage17;
    DBusMessage replyMessage18;
    DBusMessage replyMessage19;
    DBusMessage replyMessage20;
    DBusMessage replyMessage21;
    DBusMessage replyMessage22;
    DBusMessage replyMessage23;
    DBusMessage replyMessage24;
    DBusMessage replyMessage25;
    DBusMessage replyMessage26;
    DBusMessage replyMessage27;
    DBusMessage replyMessage28;
    DBusMessage replyMessage29;
    DBusMessage replyMessage30;
    DBusMessage replyMessage31;
    DBusMessage replyMessage32;
    DBusMessage replyMessage33;
    DBusMessage replyMessage34;
    DBusMessage replyMessage35;
    DBusMessage replyMessage36;
    DBusMessage replyMessage37;
    DBusMessage replyMessage38;
    DBusMessage replyMessage39;
    DBusMessage replyMessage40;
    DBusMessage replyMessage41;
    DBusMessage replyMessage42;
    DBusMessage replyMessage43;
    DBusMessage replyMessage44;
    DBusMessage replyMessage45;
    DBusMessage replyMessage46;
    DBusMessage replyMessage47;
    DBusMessage replyMessage48;
    DBusMessage replyMessage49;
    DBusMessage replyMessage50;
    DBusMessage replyMessage51;
    DBusMessage replyMessage52;
    DBusMessage replyMessage53;
    DBusMessage replyMessage54;
    DBusMessage replyMessage55;
    DBusMessage replyMessage56;
    DBusMessage replyMessage57;
    DBusMessage replyMessage58;
    DBusMessage replyMessage59;
    DBusMessage replyMessage60;
    DBusMessage replyMessage61;
    DBusMessage replyMessage62;
    DBusMessage replyMessage63;
    DBusMessage","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusMessage message = _message;
    DBusError error;
    DBusMessage reply;
    DBusConnection connection;
    DBusError error2;

    if (message.getType() != DBUS_MESSAGE_TYPE_SIGNAL) {
        return;
    }

    if (message.getArgs().size() < 3) {
        return;
    }

    DBusObjectPath objectPath = message.getArgs()[0];
    DBusSignature signature = message.getArgs()[1];
    DBusMessage replyMessage = message.getArgs()[2];

    if (objectPath.isEmpty() || signature.isEmpty() || replyMessage.isEmpty()) {
        return;
    }

    DBusMessage replyMessage2;
    DBusMessage replyMessage3;
    DBusMessage replyMessage4;
    DBusMessage replyMessage5;
    DBusMessage replyMessage6;
    DBusMessage replyMessage7;
    DBusMessage replyMessage8;
    DBusMessage replyMessage9;
    DBusMessage replyMessage10;
    DBusMessage replyMessage11;
    DBusMessage replyMessage12;
    DBusMessage replyMessage13;
    DBusMessage replyMessage14;
    DBusMessage replyMessage15;
    DBusMessage replyMessage16;
    DBusMessage replyMessage17;
    DBusMessage replyMessage18;
    DBusMessage replyMessage19;
    DBusMessage replyMessage20;
    DBusMessage replyMessage21;
    DBusMessage replyMessage22;
    DBusMessage replyMessage23;
    DBusMessage replyMessage24;
    DBusMessage replyMessage25;
    DBusMessage replyMessage26;
    DBusMessage replyMessage27;
    DBusMessage replyMessage28;
    DBusMessage replyMessage29;
    DBusMessage replyMessage30;
    DBusMessage replyMessage31;
    DBusMessage replyMessage32;
    DBusMessage replyMessage33;
    DBusMessage replyMessage34;
    DBusMessage replyMessage35;
    DBusMessage replyMessage36;
    DBusMessage replyMessage37;
    DBusMessage replyMessage38;
    DBusMessage replyMessage39;
    DBusMessage replyMessage40;
    DBusMessage replyMessage41;
    DBusMessage replyMessage42;
    DBusMessage replyMessage43;
    DBusMessage replyMessage44;
    DBusMessage replyMessage45;
    DBusMessage replyMessage46;
    DBusMessage replyMessage47;
    DBusMessage replyMessage48;
    DBusMessage replyMessage49;
    DBusMessage replyMessage50;
    DBusMessage replyMessage51;
    DBusMessage replyMessage52;
    DBusMessage replyMessage53;
    DBusMessage replyMessage54;
    DBusMessage replyMessage55;
    DBusMessage replyMessage56;
    DBusMessage replyMessage57;
    DBusMessage replyMessage58;
    DBusMessage replyMessage59;
    DBusMessage replyMessage60;
    DBusMessage replyMessage61;
    DBusMessage replyMessage62;
    DBusMessage replyMessage63;
    DBusMessage",21.32860681797083,2.43958812979212,7.233813501065556,25.64102564102564,50.0
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::string commonApiAddress = CommonAPI::getCommonAPIAddress(_objectPath, _interfaceName);
    notifyListeners(commonApiAddress, _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::string commonApiAddress = CommonAPI::getCommonAPIAddress(_objectPath, _interfaceName);
    notifyListeners(commonApiAddress, _availability);
}",48.31804753801761,38.84003550778209,40.24146728286929,41.46341463414634,72.72727272727273
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto listener_added_event = std::make_shared<ListenerAddedEvent>(_listener, _subscription);
    dispatch(listener_added_event);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto listener_added_event = std::make_shared<ListenerAddedEvent>(_listener, _subscription);
    dispatch(listener_added_event);
}",51.78914937554786,37.58943020766713,39.567167294524296,55.00000000000001,75.0
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = std::remove_if(listeners_.begin(), listeners_.end(),
                             [&_listener, &_subscription](const Listener& listener) {
                                 return listener == _listener && listener.subscription == _subscription;
                             });
    listeners_.erase(it, listeners_.end());
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = std::remove_if(listeners_.begin(), listeners_.end(),
                             [&_listener, &_subscription](const Listener& listener) {
                                 return listener == _listener && listener.subscription == _subscription;
                             });
    listeners_.erase(it, listeners_.end());
}",44.78762305374118,23.715535229161464,27.756385557231823,56.25,71.42857142857143
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    if (_handler) {
        _handler->setSubscription(_subscription);
        _handler->setProxy(shared_from_this());
        _connection->addSignalStateHandler(_handler, _subscription);
    }
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    if (_handler) {
        _handler->setSubscription(_subscription);
        _handler->setProxy(shared_from_this());
        _connection->addSignalStateHandler(_handler, _subscription);
    }
}",63.45984508168472,27.22589423069702,43.28015276270854,83.33333333333334,100.0
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> availableServiceInstances;
        for (const auto &_serviceInstance : _availableServiceInstances) {
            availableServiceInstances.push_back(_serviceInstance.toString());
        }
        _call(CommonAPI::CallStatus::SUCCESS, availableServiceInstances);
    } else {
        _call(_status, {});
    }
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> availableServiceInstances;
        for (const auto &_serviceInstance : _availableServiceInstances) {
            availableServiceInstances.push_back(_serviceInstance.toString());
        }
        _call(CommonAPI::CallStatus::SUCCESS, availableServiceInstances);
    } else {
        _call(_status, {});
    }
}",61.87957606350095,35.69762632124721,51.265122377201045,68.88888888888889,91.66666666666666
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.isMethodCall()) {
        const std::string interface = dbusMessage.getInterface();
        const std::string objectPath = dbusMessage.getObjectPath();
        auto it = handlers_.find(objectPath);
        if (it != handlers_.end()) {
            auto handler = it->second.find(interface);
            if (handler != it->second.end()) {
                return handler->second(dbusMessage);
            }
        }
    } else if (dbusMessage.isMethodReturn()) {
        auto it = handlers_.find(dbusMessage.getObjectPath());
        if (it != handlers_.end()) {
            auto handler = it->second.find(dbusMessage.getInterface());
            if (handler != it->second.end()) {
                handler->second.second(dbusMessage);
            }
        }
    } else if (dbusMessage.isSignal()) {
        auto it = handlers_.find(dbusMessage.getObjectPath());
        if (it != handlers_.end()) {
            auto handler = it->second.find(dbusMessage.getInterface());
            if (handler != it->second.end()) {
                handler->second.second(dbusMessage);
            }
        }
    } else if (dbusMessage.isError()) {
        auto it = handlers_.find(dbusMessage.getObjectPath());
        if (it != handlers_.end()) {
            auto handler = it->second.find(dbusMessage.getInterface());
            if (handler != it->second.end()) {
                handler->second.second(dbusMessage);
            }
        }
    } else if (dbusMessage.isMethodCall(""Introspect.Introspect"") || dbusMessage.isMethodCall(""Introspect.Introspect"")) {
        return handleIntrospectionRequest(dbusMessage);
    }
    return false;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.isMethodCall()) {
        const std::string interface = dbusMessage.getInterface();
        const std::string objectPath = dbusMessage.getObjectPath();
        auto it = handlers_.find(objectPath);
        if (it != handlers_.end()) {
            auto handler = it->second.find(interface);
            if (handler != it->second.end()) {
                return handler->second(dbusMessage);
            }
        }
    } else if (dbusMessage.isMethodReturn()) {
        auto it = handlers_.find(dbusMessage.getObjectPath());
        if (it != handlers_.end()) {
            auto handler = it->second.find(dbusMessage.getInterface());
            if (handler != it->second.end()) {
                handler->second.second(dbusMessage);
            }
        }
    } else if (dbusMessage.isSignal()) {
        auto it = handlers_.find(dbusMessage.getObjectPath());
        if (it != handlers_.end()) {
            auto handler = it->second.find(dbusMessage.getInterface());
            if (handler != it->second.end()) {
                handler->second.second(dbusMessage);
            }
        }
    } else if (dbusMessage.isError()) {
        auto it = handlers_.find(dbusMessage.getObjectPath());
        if (it != handlers_.end()) {
            auto handler = it->second.find(dbusMessage.getInterface());
            if (handler != it->second.end()) {
                handler->second.second(dbusMessage);
            }
        }
    } else if (dbusMessage.isMethodCall(""Introspect.Introspect"")) {
        return handleIntrospectionRequest(dbusMessage);
    }
    return false;
}",25.716447649868456,6.168009306604414,10.597395192483319,42.857142857142854,43.24324324324324
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerPath.interface == DBusInterface::ObjectManager) {
        if (objectManagerHandler_) {
            return false;
        }
        objectManagerHandler_ = dbusInterfaceHandler;
        return true;
    } else if (dbusInterfaceHandlerPath.interface == DBusInterface::Properties) {
        if (propertiesHandler_) {
            return false;
        }
        propertiesHandler_ = dbusInterfaceHandler;
        return true;
    } else {
        auto it = handlers_.find(dbusInterfaceHandlerPath);
        if (it != handlers_.end()) {
            return false;
        }
        handlers_[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
        return true;
    }
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerPath.interface == DBusInterface::ObjectManager) {
        if (objectManagerHandler_) {
            return false;
        }
        objectManagerHandler_ = dbusInterfaceHandler;
        return true;
    } else if (dbusInterfaceHandlerPath.interface == DBusInterface::Properties) {
        if (propertiesHandler_) {
            return false;
        }
        propertiesHandler_ = dbusInterfaceHandler;
        return true;
    } else {
        auto it = handlers_.find(dbusInterfaceHandlerPath);
        if (it != handlers_.end()) {
            return false;
        }
        handlers_[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
        return true;
    }
}",34.31054859291613,16.9355185681984,19.31461231140262,48.61111111111111,52.38095238095239
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.find(ifpath) == registeredObjectsTable_.end()) {
        registeredObjectsTable_[ifpath] = handler;
        return true;
    }
    return false;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (registeredObjectsTable_.find(ifpath) == registeredObjectsTable_.end()) {
        registeredObjectsTable_[ifpath] = handler;
        return true;
    }
    return false;
}",24.004124372569876,8.420064517218607,15.40366188872355,48.19277108433735,24.0
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t ecu_reset_response[2];
    ecu_reset_response[0] = 0x7E;
    ecu_reset_response[1] = reset_type;

    if (iso_tp_send(ecu_reset_response, 2) != 0) {
        printf(""Error sending ECU reset response\n"");
    }
}","void send_positive_reset_response(uint8_t reset_type) {
    uint8_t ecu_reset_response[2];
    ecu_reset_response[0] = 0x7E;
    ecu_reset_response[1] = reset_type;

    if (iso_tp_send(ecu_reset_response, 2) != 0) {
        printf(""Error sending ECU reset response\n"");
    }
}",12.463691607443945,6.362372418971438,7.841770124886338,12.121212121212121,23.52941176470588
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len != 2) {
        send_negative_response();
        return;
    }

    uint8_t sub_function = data[1];

    if (sub_function == 0x01) {
        send_positive_response();
        system_reboot();
    } else {
        send_negative_response();
    }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len != 2) {
        send_negative_response();
        return;
    }

    uint8_t sub_function = data[1];

    if (sub_function == 0x01) {
        send_positive_response();
        system_reboot();
    } else {
        send_negative_response();
    }
}",43.786582690981376,40.61398531981548,42.28428342860616,25.581395348837212,66.66666666666666
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
    uint8_t ecu_response[4] = {0x00, 0x00, 0x00, 0x00};
    ecu_response[0] = 0x00;
    ecu_response[1] = 0x00;
    ecu_response[2] = 0x0D;
    ecu_response[3] = 0x20;

    if (iso_tp_send(ecu_response, 4) != 0) {
        printf(""Error sending request download response\n"");
    }
}","void send_request_download_response() {
    uint8_t ecu_response[4] = {0x00, 0x00, 0x0D, 0x20};

    if (iso_tp_send(ecu_response, 4) != 0) {
        printf(""Error sending request download response\n"");
    }
}",10.249012910382481,2.254794110968569,2.6995908638946866,9.375,26.666666666666668
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t positive_sid = 0x7E;
    uint8_t response[2];
    response[0] = positive_sid;
    response[1] = block_sequence_counter;

    if (iso_tp_send(response, 2) != 0) {
        printf(""Error sending transfer data response\n"");
    }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t positive_sid = 0x7E;
    uint8_t response[2];
    response[0] = positive_sid;
    response[1] = block_sequence_counter;

    if (iso_tp_send(response, 2) != 0) {
        printf(""Error sending transfer data response\n"");
    }
}",17.386942215507922,12.00072903895539,13.429392764252757,14.705882352941178,29.411764705882355
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uint8_t buffer[5];
    buffer[0] = 0x01;
    buffer[1] = (uint8_t)(routine_id >> 8);
    buffer[2] = (uint8_t)routine_id;
    buffer[3] = 0x01;
    buffer[4] = result;

    if (iso_tp_send(buffer, 5) != 0) {
        printf(""Error sending routine control result\n"");
    }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uint8_t buffer[5];
    buffer[0] = 0x01;
    buffer[1] = (uint8_t)(routine_id >> 8);
    buffer[2] = (uint8_t)routine_id;
    buffer[3] = 0x01;
    buffer[4] = result;

    if (iso_tp_send(buffer, 5) != 0) {
        printf(""Error sending routine control result\n"");
    }
}",24.138277404318643,12.223742058642719,13.688341917606209,25.64102564102564,45.0
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
    uint8_t response[1];
    response[0] = request_sid + 0x40;
    iso_tp_send(response, 1);
    if (iso_tp_status() != ISO_TP_OK) {
        printf(""Error sending transfer exit positive response\n"");
    }
}","static void send_transer_exit_positive_response() {
    uint8_t response[1];
    response[0] = request_sid + 0x40;
    iso_tp_send(response, 1);
    if (iso_tp_status() != ISO_TP_OK) {
        printf(""Error sending transfer exit positive response\n"");
    }
}",11.147963443306782,7.308985893675148,8.798019394703497,15.151515151515152,13.333333333333334
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    uint8_t i;
    for (i = 0; i < sizeof(id_mapping) / sizeof(id_mapping[0]); i++) {
        if (id_mapping[i] == can_id) {
            return i;
        }
    }
    return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    uint8_t i;
    for (i = 0; i < sizeof(id_mapping) / sizeof(id_mapping[0]); i++) {
        if (id_mapping[i] == can_id) {
            return i;
        }
    }
    return 0xff;
}",62.38283718567769,65.82199215756273,74.18554706133851,66.66666666666666,42.857142857142854
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;
	int i;

	if (filter_id == -1) {
		for (i = 0; i < ARRAY_SIZE(data->rx_filters); i++) {
			data->rx_filters[i].cb = NULL;
		}
	} else if (filter_id >= 0 && filter_id < ARRAY_SIZE(data->rx_filters)) {
		data->rx_filters[filter_id].cb = NULL;
	}
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;
	int i;

	if (filter_id == -1) {
		for (i = 0; i < ARRAY_SIZE(data->rx_filters); i++) {
			data->rx_filters[i].cb = NULL;
		}
	} else if (filter_id >= 0 && filter_id < ARRAY_SIZE(data->rx_filters)) {
		data->rx_filters[filter_id].cb = NULL;
	}
}",45.3303336572536,40.44098207773214,45.43521797571291,47.61904761904761,47.82608695652174
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct list_head *queue = (struct list_head *)user_data;
    struct lin_frame *frame_copy;

    if (list_empty(queue)) {
        return false;
    }

    frame_copy = list_first_entry(queue, struct lin_frame, list);
    memcpy(frame, frame_copy, sizeof(struct lin_frame));
    list_del(queue->next);

    frame->completion_callback(frame);

    return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
    struct list_head *queue = (struct list_head *)user_data;
    struct lin_frame *frame_copy;

    if (list_empty(queue)) {
        return false;
    }

    frame_copy = list_first_entry(queue, struct lin_frame, list);
    memcpy(frame, frame_copy, sizeof(struct lin_frame));
    list_del(queue->next);

    frame->completion_callback(frame);

    return true;
}",38.6143865709477,22.107979772834437,24.246118235094304,43.103448275862064,65.0
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    uint16_t can_id = (uint16_t)frame->data[0] >> 6;
    uint8_t payload_size = frame->data_len - 1;
    uint8_t *payload = frame->data + 1;
    uint8_t *can_payload = malloc(payload_size);
    uint8_t i;

    for (i = 0; i < payload_size; i++) {
        can_payload[i] = payload[i];
    }

    struct can_frame can_frame = {
        .id = can_id,
        .dlc = payload_size,
        .data = can_payload
    };

    struct can_handler_data *handler_data = (struct can_handler_data *)user_data;
    handler_data->handler(can_frame);
    free(can_payload);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
    uint16_t can_id = (uint16_t)frame->data[0] >> 6;
    uint8_t payload_size = frame->data_len - 1;
    uint8_t *payload = frame->data + 1;
    uint8_t *can_payload = malloc(payload_size);
    uint8_t i;

    for (i = 0; i < payload_size; i++) {
        can_payload[i] = payload[i];
    }

    struct can_frame can_frame = {
        .id = can_id,
        .dlc = payload_size,
        .data = can_payload
    };

    struct can_handler_data *handler_data = (struct can_handler_data *)user_data;
    handler_data->handler(can_frame);
    free(can_payload);
}",31.92666082253265,17.269293104746517,17.90861455320017,42.5287356321839,50.0
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
    int ret;
    struct hv_shield_data *data = dev->data;

    ret = gpio_request(data->oe_gpio, ""hv_shield_oe"");
    if (ret) {
        dev_err(dev, ""Failed to request OE GPIO: %d\n"", ret);
        return ret;
    }

    ret = gpio_direction_output(data->oe_gpio, 0);
    if (ret) {
        dev_err(dev, ""Failed to set OE GPIO direction: %d\n"", ret);
        gpio_free(data->oe_gpio);
        return ret;
    }

    memset(data->hw_reg, 0, sizeof(data->hw_reg));

    ret = hv_shield_write_reg(dev, data->hw_reg, sizeof(data->hw_reg));
    if (ret) {
        dev_err(dev, ""Failed to write zeroed state to hardware registers: %d\n"", ret);
        gpio_free(data->oe_gpio);
        return ret;
    }

    ret = gpio_set_value(data->oe_gpio, 1);
    if (ret) {
        dev_err(dev, ""Failed to set OE pin high: %d\n"", ret);
        gpio_free(data->oe_gpio);
        return ret;
    }

    return 0;
}","static int hv_shield_init(const struct device* dev) {
    int ret;
    struct hv_shield_data *data = dev->data;

    ret = gpio_request(data->oe_gpio, ""hv_shield_oe"");
    if (ret) {
        dev_err(dev, ""Failed to request OE GPIO: %d\n"", ret);
        return ret;
    }

    ret = gpio_direction_output(data->oe_gpio, 0);
    if (ret) {
        dev_err(dev, ""Failed to set OE GPIO direction: %d\n"", ret);
        gpio_free(data->oe_gpio);
        return ret;
    }

    memset(data->hw_reg, 0, sizeof(data->hw_reg));

    ret = hv_shield_write_reg(dev, data->hw_reg, sizeof(data->hw_reg));
    if (ret) {
        dev_err(dev, ""Failed to write zeroed state to hardware registers: %d\n"", ret);
        gpio_free(data->oe_gpio);
        return ret;
    }

    ret = gpio_set_value(data->oe_gpio, 1);
    if (ret) {
        dev_err(dev, ""Failed to set OE pin high: %d\n"", ret);
        gpio_free(data->oe_gpio);
        return ret;
    }

    return 0;
}",28.436368931307843,8.686861327446465,13.520512481001365,46.3768115942029,45.16129032258064
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
    if (dac > 1) {
        return -EINVAL;
    }

    struct hv_shield_dac_gains_data* data = dev->data;
    data->gains[dac] = gain;
    hvs_update_dac_gains(dev, data);

    return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
    if (dac > 1) {
        return -EINVAL;
    }

    struct hv_shield_dac_gains_data* data = dev->data;
    data->gains[dac] = gain;
    hvs_update_dac_gains(dev, data);

    return 0;
}",47.14204358606305,40.79442890358265,42.86943922057387,52.27272727272727,52.63157894736842
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t nibble;
    uint8_t bit;
    uint8_t mask;
    uint8_t reg;

    if (index >= 32) {
        return -EINVAL;
    }

    nibble = (index / 4);
    bit = (index % 4);
    mask = (1 << bit);
    reg = (nibble << 4) | (bit << 1);

    if (enable) {
        dev->gpio_output_enable_cache[nibble] |= mask;
    } else {
        dev->gpio_output_enable_cache[nibble] &= ~mask;
    }

    hvs_write_gpio_output_enable(dev, reg);

    return 0;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
    uint8_t nibble;
    uint8_t bit;
    uint8_t mask;
    uint8_t reg;

    if (index >= 32) {
        return -EINVAL;
    }

    nibble = (index / 4);
    bit = (index % 4);
    mask = (1 << bit);
    reg = (nibble << 4) | (bit << 1);

    if (enable) {
        dev->gpio_output_enable_cache[nibble] |= mask;
    } else {
        dev->gpio_output_enable_cache[nibble] &= ~mask;
    }

    hvs_write_gpio_output_enable(dev, reg);

    return 0;
}",32.49312633789756,22.251456429554064,26.824822506941842,43.39622641509434,37.5
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_device *can_dev = user_data;

    if (can_dev && can_device_can_send(can_dev)) {
        int ret = can_device_send(can_dev, frame, 0);
        if (ret == 0) {
            dev_dbg(&dev->dev, ""CAN frame forwarded to %s\n"", can_dev->name);
        } else {
            dev_warn(&dev->dev, ""Failed to forward CAN frame to %s\n"", can_dev->name);
        }
    }
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
    struct can_device *can_dev = user_data;

    if (can_dev && can_device_can_send(can_dev)) {
        int ret = can_device_send(can_dev, frame, 0);
        if (ret == 0) {
            dev_dbg(&dev->dev, ""CAN frame forwarded to %s\n"", can_dev->name);
        } else {
            dev_warn(&dev->dev, ""Failed to forward CAN frame to %s\n"", can_dev->name);
        }
    }
}",48.25891085906774,23.721919820131017,30.14705694947329,47.5,91.66666666666666
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    int i;
    for (i = 0; i < entry_count; i++) {
        if (can_filter_register(entries[i].source_if, entries[i].filter, entries[i].callback, entries[i].userdata)) {
            return -1;
        }
    }
    return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    int i;
    for (i = 0; i < entry_count; i++) {
        if (can_filter_register(entries[i].source_if, entries[i].filter, entries[i].callback, entries[i].userdata)) {
            return -1;
        }
    }
    return 0;
}",40.33719343472117,28.231015253787373,33.0033420091248,36.95652173913043,63.1578947368421
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
    int i;
    uint32_t *ptr;
    uint32_t *endptr;
    uint32_t *startptr;
    uint32_t *tmp;
    uint32_t ret;

    startptr = (uint32_t *)__start_can_routing_tables;
    endptr = (uint32_t *)__end_can_routing_tables;

    for (ptr = startptr; ptr < endptr; ptr++) {
        tmp = ptr;
        ret = can_router_register_routing_table(tmp);
        if (ret != 0) {
            return ret;
        }
    }

    return 0;
}","static int can_router_sysinit() {
    int i;
    uint32_t *ptr;
    uint32_t *endptr;
    uint32_t *startptr;
    uint32_t ret;

    startptr = (uint32_t *)__start_can_routing_tables;
    endptr = (uint32_t *)__end_can_routing_tables;

    for (ptr = startptr; ptr < endptr; ptr++) {
        ret = can_router_register_routing_table(*ptr);
        if (ret != 0) {
            return ret;
        }
    }

    return 0;
}",21.906183341983148,13.16205653265512,23.887964191599316,17.24137931034483,33.33333333333333
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
    int i;
    int ret;

    for (i = 0; i < 32; i++) {
        if ((mask >> i) & 1) {
            ret = gpio_set_pin(port, i, ((value >> i) & 1));
            if (ret) {
                LOG_ERR(""Failed to set GPIO %d\n"", i);
                return ret;
            }
        }
    }

    return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
    int i;
    int ret;

    for (i = 0; i < 32; i++) {
        if ((mask >> i) & 1) {
            ret = gpio_set_pin(port, i, ((value >> i) & 1));
            if (ret) {
                LOG_ERR(""Failed to set GPIO %d\n"", i);
                return ret;
            }
        }
    }

    return 0;
}",38.470096711495366,33.7925141262121,35.27692095966506,27.11864406779661,57.692307692307686
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (free_slots == NULL) {
        return -EINVAL;
    }

    *free_slots = dev->cb_max - dev->cb_used;

    return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
    if (free_slots == NULL) {
        return -EINVAL;
    }

    *free_slots = dev->cb_max - dev->cb_used;

    return 0;
}",63.9293444834293,60.562229523054434,61.82181507732941,73.33333333333333,60.0
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
        return -EINVAL;
    }

    if (dev->incoming_cb_count >= dev->incoming_cb_max) {
        return -ENOMEM;
    }

    dev->incoming_cb_count++;
    dev->incoming_cb[frame_id].callback = callback;
    dev->incoming_cb[frame_id].frame_size = frame_size;
    dev->incoming_cb[frame_id].user_data = user_data;

    return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
        return -EINVAL;
    }

    if (dev->incoming_cb_count >= dev->incoming_cb_max) {
        return -ENOMEM;
    }

    dev->incoming_cb_count++;
    dev->incoming_cb[frame_id].callback = callback;
    dev->incoming_cb[frame_id].frame_size = frame_size;
    dev->incoming_cb[frame_id].user_data = user_data;

    return 0;
}",50.50385702359462,43.716152259429734,47.234850064640625,70.58823529411765,40.476190476190474
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
        return -EINVAL;
    }

    if (dev->outgoing_cb_count >= dev->outgoing_cb_max) {
        return -ENOMEM;
    }

    dev->outgoing_cb_count++;
    dev->outgoing_cb[frame_id].callback = callback;
    dev->outgoing_cb[frame_id].frame_size = frame_size;
    dev->outgoing_cb[frame_id].user_data = user_data;

    return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
    if (frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
        return -EINVAL;
    }

    if (dev->outgoing_cb_count >= dev->outgoing_cb_max) {
        return -ENOMEM;
    }

    dev->outgoing_cb_count++;
    dev->outgoing_cb[frame_id].callback = callback;
    dev->outgoing_cb[frame_id].frame_size = frame_size;
    dev->outgoing_cb[frame_id].user_data = user_data;

    return 0;
}",50.50385702359462,43.716152259429734,47.234850064640625,70.58823529411765,40.476190476190474
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler, int index)
{
    if (index < 0 || index >= scheduler->num_tables) {
        return -1;
    }

    sem_wait(&scheduler->sem);
    scheduler->active_table = index;
    scheduler->entry_ptr = scheduler->tables[index];
    sem_post(&scheduler->sem);

    return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler, int index)
{
    if (index < 0 || index >= scheduler->num_tables) {
        return -1;
    }

    sem_wait(&scheduler->sem);
    scheduler->active_table = index;
    scheduler->entry_ptr = scheduler->tables[index];
    sem_post(&scheduler->sem);

    return 0;
}",27.396668648355714,3.4379242105857544,4.04348722494239,42.10526315789473,60.0
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    if (sched->is_stopped) {
        return;
    }

    sem_wait(&sched->sem);
    sched->active_schedule_table_index = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    if (sched->is_stopped) {
        return;
    }

    sem_wait(&sched->sem);
    sched->active_schedule_table_index = -1;
}",52.37532189425481,26.06799576171155,28.433291815307683,55.00000000000001,100.0

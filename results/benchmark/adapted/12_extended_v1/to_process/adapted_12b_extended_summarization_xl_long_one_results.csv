id,language,reference,generated,generated_rci
1,python,"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes","""Determines if a given type is a subtype of another type by checking if it is present in the subtype list of the base type or if it is equal to the base type.""","""Determines if a given type is a subtype of another type by checking if it is present in the subtype list of the base type or if it is equal to the base type."""
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Checks if a given value conforms to a specified datatype by retrieving the corresponding type object and applying it to the value.""","""Validates if a value matches a specified datatype by retrieving its type object and checking if the value is an instance of that type."""
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a given integer or list of integers falls within a specified range, considering whether it is signed or unsigned and the number of bits.""","""Checks if a given integer or list of integers falls within a specified range, considering whether it is signed or unsigned and the number of bits."""
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Retrieves a type definition (name, constructor, and allowed values) from a class's types attribute based on a given datatype string, or returns None if no match is found.""","""Retrieves a type definition (name, constructor, and allowed values) from a class's `types` attribute based on a given datatype string, or returns None if no match is found."""
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN) prefix, excluding the exact FQN itself.""","""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN) prefix, excluding the exact FQN itself and any datatypes that exactly match the FQN."""
6,python,Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name,"""Recursively populates a dictionary with unique node names and their fully qualified names (FQNs) from a VSSNode tree, incrementing a counter for each occurrence and storing the FQNs in a list.""","""Recursively populates a dictionary with unique node names and their fully qualified names (FQNs) from a VSSNode tree, incrementing a counter for each occurrence and storing the FQNs in a list."""
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') to an ApiGearType object, handling basic types, floating-point types, booleans, strings, and arrays.""","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') to an ApiGearType object, handling basic types, floating-point types, booleans, strings, and arrays, while also replacing '.' with '_' in the type name."""
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Generates an `ApiGearProperty` object from a `VSSNode` and a specified datatype, populating its type and description if available.""","""Generates an `ApiGearProperty` object from a `VSSNode` and a specified datatype, populating its type and description if available, or returning `None` if the datatype is unsupported."""
9,python,"Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects","""Recursively gathers a list of VSpec objects by resolving and processing includes specified in a given VSpec, starting from a root VSpec and its includes, and extending the list with the resolved VSpecs.""","""Recursively gathers a list of VSpec objects by resolving and processing includes specified in a given VSpec, starting from a root VSpec and its includes, and extending the list with the resolved VSpecs."""
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges multiple VSpec files from specified paths, optionally applying an identifier, and returns a single combined VSpec object after logging the process and handling potential errors.""","""Loads and merges multiple VSpec files from specified paths, optionally applying an identifier, and returns a single combined VSpec object after logging the process and raising an exception if no specs are loaded."""
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively updates a dictionary by merging the contents of another dictionary, handling nested dictionaries by recursively calling itself to update nested structures.""","""Recursively updates a dictionary by merging the contents of another dictionary, handling nested dictionaries by recursively calling itself to update nested structures and overwriting non-dictionary values."""
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates if a given string is a valid hexadecimal constant UID (format: 0x followed by 8 hexadecimal characters) and returns the string if valid, otherwise returns None.""","""Validates if a given string is a valid hexadecimal constant UID (format: 0x followed by 8 hexadecimal characters) and returns the string if valid, otherwise returns None."""
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Creates a VSSRaw object from input data, attempts to resolve it using `resolve_vss_raw`, and returns the resolved object or the original if resolution fails.""","""Creates a VSSRaw object from input data, attempts to resolve it using `resolve_vss_raw`, and returns the resolved object or the original if resolution fails, logging a debug message in case of failure."""
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Validates a list of datatypes against a predefined set of allowed datatypes, raising an assertion error if any invalid datatypes are found.""","""Validates a list of datatypes against a predefined set of allowed datatypes, raising an assertion error if any invalid datatypes are found and returning the validated list."""
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Generates a string representation of a VSSNode tree structure, including specified attributes, by traversing the tree and formatting each node's name and attribute values into a hierarchical string format.""","""Generates a string representation of a VSSNode tree structure, including specified attributes, by traversing the tree and formatting each node's name and attribute values into a hierarchical string format."""
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Recursively traverses up the tree to find the root node of an instance, returning the root node and its depth from the current node.""","""Recursively traverses up the tree to find the root node of an instance, raising an exception if no instance root exists and returning the root node and its depth from the current node."""
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a VSSDataBranch tree structure by traversing the children and incrementing the count if an instance child is found.""","""Recursively counts the depth of instance children within a VSSDataBranch tree structure by traversing the children and incrementing the count if an instance child is found."""
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Identifies child node IDs within a list by filtering for those whose expected parent matches a specified name.""","""Identifies child node IDs within a list by filtering for those whose expected parent matches a specified name."""
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Retrieves an attribute from an object, returning a default value if the attribute is not found or is None.""","""Retrieves an attribute from an object, returning a default value if the attribute is not found or is None."""
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Generates a Protocol Buffer definition file from a VSS signal tree by recursively traversing the tree and writing message definitions for each branch node, including optional fields if specified.""","""Generates a Protocol Buffer definition file from a VSS signal tree by recursively traversing the tree and writing message definitions for each branch node, optionally including optional fields."""
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Extracts a dictionary mapping instance root fully qualified names to lists of their child instance names by traversing the VSS tree and filtering for instance branches.""","""Extracts a dictionary mapping instance root fully qualified names to lists of their child instance names by traversing the VSS tree and filtering for instance branches with no further instance children."""
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Checks if a given VSSNode is a leaf node by verifying if its data attribute is an instance of the VSSDataDatatype class.""","""Determines if a VSSNode is a leaf node by checking if its data attribute is an instance of the VSSDataDatatype class."""
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a VSSNode represents a branch with a non-instance VSSDataBranch data type.""","""Checks if a VSSNode represents a branch with a non-instance VSSDataBranch data type."""
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a VSSNode represents an instance of a VSSDataBranch by verifying if its data attribute is a VSSDataBranch and if that branch's is_instance attribute is True.""","""Determines if a VSSNode represents an instance of a VSSDataBranch by checking if its data attribute is a VSSDataBranch and if that branch's is_instance attribute is True."""
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string by iteratively multiplying the hash by a prime and XORing it with each byte of the input.""","""Calculates a 32-bit FNV-1a hash value for a given byte string by iteratively multiplying the hash by a prime and XORing it with each byte of the input, ensuring the result remains within 32 bits."""
26,java,"Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with both a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`","""Retrieves a CardPresenter for displaying audio-related information, initializing it with either a MediaViewModel or a fallback InCallModel if a ViewModelProvider is not available.""","""Retrieves a CardPresenter for displaying audio-related information, initializing it with a MediaViewModel if available, otherwise falling back to an InCallModel."""
27,java,"Lazily initializes and returns an `AudioFragment`, bidirectionally linking it with its presenter upon first creation","""Returns a HomeCardFragment (AudioFragment) instance, creating it if it doesn't exist, and sets up presenter bindings for the fragment.""","""Returns a HomeCardFragment (AudioFragment) instance, creating it if it doesn't exist, and sets up presenter bindings for the fragment."""
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates a layout for a card-like fragment, retrieving references to its title and icon views.""","""Inflates a layout for a card-like fragment, retrieving references to its title and icon views to be used for displaying card data."""
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and content of an ImageButton based on the presence and properties of a DescriptiveTextWithControlsView.Control object.""","""Updates an ImageButton's visibility and content (icon and click listener) based on whether a corresponding DescriptiveTextWithControlsView.Control object is present."""
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily initializes and returns a ViewStub-inflated layout containing descriptive text elements (title, subtitle, optional image, and tap-for-more text) for reuse.""","""Lazily initializes and returns a ViewStub-inflated layout containing descriptive text elements (title, subtitle, optional image, and tap-for-more text) for reuse, caching the inflated view for subsequent calls."""
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the UI elements of a card header view by setting the card title and icon within the main thread of the application.""","""Updates the UI elements of a card header view by setting the card title and icon on the main thread."""
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Retrieves a ViewStub inflated layout for displaying text blocks, caching it for reuse and obtaining references to its child views.""","""Retrieves or lazily inflates a ViewStub layout for displaying text blocks, caching the inflated view and obtaining references to its child views."""
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Retrieves the default MediaBrowserService component name for a given package by querying the PackageManager for services matching the MediaBrowserService interface.""","""Retrieves the default MediaBrowserService component name for a given package by querying the PackageManager for services matching the MediaBrowserService interface, returning null if no service is found."""
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a component should be added to the launchables list based on its package name, app type, and custom media component status.""","""Determines whether a component should be added to the launchables list based on its package name, app type, and whether it's a custom media component."""
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Selects a media source and finishes the current activity, handling potential CarNotConnectedException errors.""","""Selects a media source and finishes the current activity, handling potential CarNotConnectedException errors and logging them."""
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a given activity within a specified package is optimized for distraction by querying the CarPackageManager, handling potential CarNotConnectedException.""","""Checks if a given activity within a specified package is optimized for distraction by querying the CarPackageManager, handling potential CarNotConnectedException and logging errors."""
37,java,"Initializes a `TaskViewManager` to asynchronously create a `TaskView`, which upon creation is configured with a listener, added to the parent `ViewGroup`, and stored as a member variable","""Creates and adds a TaskView to the parent ViewGroup, setting up a listener to handle its events via a HandlerExecutor and TaskViewManager.""","""Creates and adds a TaskView to the parent ViewGroup, setting up a listener to handle its events via a HandlerExecutor and TaskViewManager, ensuring UI updates are performed on the main thread."""
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Retrieves the preferred intent for launching maps, prioritizing user-defined preferences from a resource array while falling back to the default maps activity if no preferred activity is found or valid.""","""Retrieves the preferred intent for launching maps, prioritizing user-defined preferences from a resource array, and returning the default maps activity if no preferred activity is found or valid."""
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Initializes and displays HomeCardModule fragments by dynamically creating instances of classes specified in a resource array, adding them to a set, and replacing corresponding resource IDs with their views in the fragment manager.""","""Initializes and displays HomeCardModule fragments by dynamically creating instances of classes specified in a resource array, adding them to a set, and replacing corresponding resource IDs with their views in the fragment manager."""
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Removes dangling tasks with multi-window mode from the ActivityTaskManager by iterating through a list of TaskAppearedInfo objects and removing tasks that have a windowing mode of WINDOWING_MODE_MULTI_WINDOW.""","""Removes dangling multi-window tasks from the ActivityTaskManager by iterating through a list of TaskAppearedInfo objects and removing tasks with a windowing mode of WINDOWING_MODE_MULTI_WINDOW."""
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Parses the application mode from the intent, sets the activity title, and updates the toolbar title accordingly.""","""Parses the application mode from the intent and updates the activity and toolbar titles based on the parsed mode."""
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Retrieves a Chronometer view from the layout, initializing it if it's null, and returns it along with a separator view.""","""Retrieves a Chronometer view from the layout, initializing it if it's null, and returns it along with a separator view for display."""
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Retrieves or inflates a view containing media playback controls and title/subtitle text, initializing the controls action bar with the presenter.""","""Retrieves or inflates a view containing media playback controls and title/subtitle text, initializing the controls action bar with the presenter and caching the view for reuse."""
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Updates the card's background image by scaling a provided drawable to a maximum dimension, blurring it, and setting it as the card's background image with a visual transition.""","""Updates the card's background image by scaling a provided drawable to a maximum dimension, blurring it, and setting it as the card's background image."""
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Updates the visibility and text content of a media layout view with a given title and subtitle.""","""Updates the visibility and text content of a media layout view with a given title and subtitle."""
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Updates the visibility and state of a chronometer and separator based on the start time of a descriptive text view, displaying it if the start time is positive and hiding it otherwise.""","""Updates the visibility and state of a chronometer and separator based on the start time of a descriptive text view, displaying the chronometer if the start time is positive and hiding it otherwise."""
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback to a newly added call object, ensuring the call object is not null before registration.""","""Registers a callback to a newly added call object if the call object is not null."""
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes a call from the current call state, clears associated data, updates the presenter, and unregisters the callback for the removed call.""","""Removes a call from the current call state, clears associated data, updates the presenter, and unregisters the callback for the removed call."""
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number and updates the UI model with the formatted number, subtitle, elapsed time, and call control buttons, then notifies the presenter of the update.""","""Formats a phone number, updates the UI model with the formatted number, subtitle, elapsed time, and call control buttons, and notifies the presenter of the update."""
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes the mute, end call, and dialpad buttons for an in-call UI by setting their icons and associated actions to control call muting, disconnection, and dialpad access respectively.""","""Initializes the mute, end call, and dialpad buttons for an in-call UI by setting their icons and associated actions to control call muting, disconnection, and dialpad access respectively."""
51,cpp,"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails","""Sends a DBus message via the connection, returning true if successful and false otherwise, with error logging if the message is null or the connection is not active.""","""Sends a DBus message via the connection, returning true if successful and false otherwise, with error logging if the message is null or the connection is not active."""
52,cpp,"Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID","""Creates a DBus signal message with the specified object path, interface name, signal name, and destination ID.""","""Creates a DBus signal message with the specified object path, interface name, signal name, and destination ID."""
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a listener of the availability status (AVAILABLE) if the DBus connection is connected.""","""Notifies a listener of the availability status (AVAILABLE) if the DBus connection is connected, ignoring the subscription information."""
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Registers a thread to be joined upon program exit, ensuring it is joined before the program terminates, by adding it to a vector of threads associated with a connection.""","""Registers a thread to be joined upon program exit, ensuring it is joined before the program terminates, by adding it to a vector of threads associated with a connection."""
55,cpp,Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method,"""Wakes up a main loop context by calling its wakeup method, ensuring thread safety through a weak pointer and lock.""","""Wakes up a main loop context by calling its wakeup method, ensuring thread safety through a weak pointer and lock."""
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Removes a DBus watch by stopping its monitoring if it's ready and clearing its associated data from the libdbus watch object.""","""Removes a DBus watch by stopping its monitoring if it's ready and clearing its associated data from the libdbus watch object, handling potential null pointers."""
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Manages DBus watch state by either starting or stopping the watch based on its readiness and whether it's already associated with a DBusWatch object.""","""Manages DBus watch state by either starting or stopping the watch based on its readiness and whether it's already associated with a DBusWatch object, creating a new one if needed."""
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Lazily initializes and returns a shared pointer to a DBusObjectManager instance, ensuring thread-safe creation using a mutex.""","""Lazily initializes and returns a shared pointer to a DBusObjectManager instance, ensuring thread-safe creation using a mutex and caching the result for subsequent calls."""
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a service name from the D-Bus connection, decrementing its count or releasing it if the count reaches zero, while handling potential D-Bus errors and ensuring thread safety.""","""Releases a service name from the D-Bus connection by decrementing its count or releasing it if the count reaches zero, handling D-Bus errors and ensuring thread safety."""
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a libdbus pending call to a DBusMessage object by stealing the reply from the pending call and creating a DBusMessage instance.""","""Converts a libdbus pending call to a DBusMessage object by stealing the reply from the pending call and creating a DBusMessage instance, without increasing the reference count of the libdbus message."""
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all pending asynchronous message reply handlers by moving them from a temporary vector to a vector of pointers and then iterating through the vector to delete each handler.""","""Deletes all pending asynchronous message reply handlers by moving them from a temporary vector to a vector of pointers and then iterating through the vector to delete each handler."""
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through signal handlers and their associated error tags, calling the onSpecificError method for each handler to signal successful completion of a specific error state.""","""Iterates through signal handlers and their associated error tags, calling the onSpecificError method for each handler to signal successful completion of a specific error state."""
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Removes a connection from the factory's connection map, ensuring thread-safe access using a recursive mutex.""","""Removes a connection from the factory's connection map, ensuring thread-safe access using a recursive mutex and handling the case where the connection does not exist."""
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Handles DBus messages related to instance availability status changes, dispatching the appropriate signal based on whether interfaces were added or removed.""","""Handles DBus messages indicating changes in instance availability status, dispatching the appropriate signal to an event handler based on whether interfaces were added or removed."""
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves a list of available service instances from a DBus proxy and populates a vector with their DBus addresses, returning a success status if the operation completes successfully.""","""Retrieves a list of available service instances from a DBus proxy and populates a vector with their DBus addresses, returning a success status if the operation completes successfully."""
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Retrieves the availability status of a DBus service instance by translating a CommonAPI address to a DBus address and checking if the service instance is alive in the DBus registry.""","""Retrieves the availability status of a DBus service instance by translating a CommonAPI address to a DBus address and checking if the service instance is alive in the DBus registry, setting the call status accordingly."""
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Handles the DBus signal indicating the removal of interfaces from a DBus object, updating the local availability status of the observed interface if it was removed.""","""Handles the DBus signal indicating the removal of interfaces from a DBus object, updating the local availability status of the observed interface if it was removed and notifying listeners."""
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Notifies listeners of a change in the availability status of a DBus interface by translating the DBus address to a CommonAPI address and then invoking the listener notification function.""","""Notifies listeners of a change in the availability status of a DBus interface by translating the DBus address to a CommonAPI address and then invoking the listener notification function."""
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Registers a listener with a DBus proxy, pushing a function to the main loop to notify the listener when specific subscription events occur.""","""Registers a listener with a DBus proxy, pushing a function to the main loop to notify the listener when specific subscription events occur."""
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a listener from the internal list of listeners associated with a specific subscription, ensuring thread-safe access using a recursive mutex.""","""Removes a listener from the internal list of listeners associated with a specific subscription, ensuring thread-safe access using a recursive mutex and an iterator."""
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a signal handler and its associated subscription to the connection's signal state management.""","""Adds a signal handler and its associated subscription to the connection's signal state management."""
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function.""","""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function."""
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles incoming DBus messages by looking up the corresponding interface handler, calling its message handling function, or handling the Introspectable interface if no handler is found.""","""Handles incoming DBus messages by looking up the corresponding interface handler, calling its message handling function, or handling the Introspectable interface if no handler is found, returning whether the message was handled."""
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a DBus interface handler to a table of registered objects, checking for duplicates and handling special cases for ObjectManager and Properties interfaces.""","""Adds a DBus interface handler to a table of registered objects, preventing duplicates and handling special cases for ObjectManager and Properties interfaces."""
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a DBusInterfaceHandler to a table of registered objects, keyed by interface path, ensuring no duplicates are added.""","""Adds a DBusInterfaceHandler to a table of registered objects, keyed by interface path, and returns true if the handler was successfully added, false otherwise."""
76,c,"Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a negative response message to a specific CAN ID using the isotp protocol, logging an error if the transmission fails.""","""Sends a negative response message to a specific CAN ID using the isotp protocol, logging an error if the transmission fails."""
77,c,"Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails","""Sends a diagnostic session control response message to a specified CAN ID, including session type and timeout values, using the isotp protocol.""","""Sends a diagnostic session control response message to a specified CAN ID, including session type and timeout values, using the isotp protocol and logging any errors."""
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a positive response to an ECU reset request by transmitting a UDS message with a specific SID and reset type using the isotp_send function.""","""Sends a positive response to an ECU reset request by transmitting a UDS message with a specific SID and reset type using the isotp_send function."""
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles a UDS ECU reset request, responding with an error if the message length is incorrect, performing a hard reset if the reset type is hard, and returning a negative response if the reset type is unsupported.""","""Handles a UDS ECU reset request, responding with an error if the message length is incorrect, performing a hard reset if the reset type is hard, and returning a negative response if the reset type is unsupported."""
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Sends a positive response to a download request via ISOTP, including a block size of 258 bytes, to a specified CAN ID.""","""Sends a positive response to a download request via ISOTP, including a block size of 258 bytes, to a specified CAN ID, logging an error if the transmission fails."""
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a transfer data response message with a specified block sequence counter to a CAN ID using the isotp protocol.""","""Sends a transfer data response message with a specified block sequence counter to a CAN ID using the isotp protocol, logging errors if the transmission fails."""
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Sends a routine control result message to a specified CAN ID using the ISOTP protocol, logging any errors encountered during transmission.""","""Sends a routine control result message to a specified CAN ID using the ISOTP protocol, logging any errors encountered during transmission."""
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a positive response to a request transfer exit message using the isotp protocol, logging an error if the transmission fails.""","""Sends a positive response to a request transfer exit message using the isotp protocol, logging an error if the transmission fails."""
84,c,"Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input","""Converts a raw gain value to a corresponding gain enum value and stores it in a pointer, returning 0 on success or -ENOTSUP if the gain value is unsupported.""","""Converts a raw gain value to a corresponding gain enum value and stores it in a pointer, returning 0 on success or -ENOTSUP if the gain value is unsupported."""
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Maps a CAN identifier to a corresponding index within a predefined mapping table, returning the index if found or a default value if not.""","""Maps a CAN identifier to a corresponding index within a predefined mapping table, returning the index if found or 0xff if not."""
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a callback function associated with a specific filter ID from a list of incoming callbacks, or clears all callbacks if the filter ID is equal to the length of the list.""","""Removes a callback function associated with a specific filter ID from a list of incoming callbacks, or clears all callbacks if the filter ID is equal to the length of the list."""
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a queue, copies it to a CAN frame, and calls a user-defined callback function to transmit the frame via CAN.""","""Retrieves a LIN frame from a queue, copies it to a CAN frame, and invokes a user-provided callback function to transmit the frame over CAN."""
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Translates incoming LIN frames to CAN frames and calls a registered callback function with the translated frame and user data for each mapped LIN ID.""","""Translates incoming LIN frames to CAN frames and invokes a registered callback function with the translated frame and user data for each mapped LIN ID."""
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device data structure, updating the shield registers, and enabling the output.""","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device data structure, updating the shield registers, and enabling the output."""
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the digital-to-analog converter (DAC) gain for a given device and DAC channel by updating the corresponding register and triggering an update function.""","""Sets the digital-to-analog converter (DAC) gain for a given device and DAC channel by updating the corresponding register and triggering an update function, returning an error if the DAC channel is invalid."""
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Enables or disables a GPIO output pin by setting or clearing the corresponding bit in the `gpio_output` register of the HV shield device, after adjusting the index to match the register layout.""","""Enables or disables a GPIO output pin by setting or clearing the corresponding bit in the `gpio_output` register of the HV shield device, after adjusting the index to match the register layout and updating the device's registers."""
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes CAN frames received on a device to another device using the `can_send` function and logs debug and warning messages for success and failure respectively.""","""Routes CAN frames received on a device to another device using the `can_send` function, logging debug messages for successful routing and warning messages for failures."""
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a set of CAN router entries by adding corresponding receive filters for each entry, returning an error if any registration fails.""","""Registers a set of CAN router entries by adding corresponding receive filters for each entry, returning an error if any registration fails."""
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Initializes the CAN router by registering each CAN router table entry, returning an error if registration fails.""","""Initializes the CAN router by registering each CAN router table entry, returning an error if any registration fails."""
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Sets the specified GPIO pins to a given value, iterating through a configuration structure to apply the value to each pin based on a provided mask.""","""Sets the specified GPIO pins to a given value, iterating through a configuration structure to apply the value to each pin based on a provided mask, and returning an error code if any pin setting fails."""
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Retrieves the number of available callback slots for a given device by subtracting the number of used callbacks from the maximum number of callbacks allowed.""","""Calculates and returns the number of free callback slots for a given device by subtracting the number of used callbacks from the maximum allowed number of callbacks."""
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a LIN incoming message with a specific frame ID and size is received, storing the callback and associated data in a device-specific data structure.""","""Registers a callback function to be invoked when a LIN incoming message with a specific frame ID and size is received, storing the callback and associated data in a device-specific data structure, and returning an error code if the input parameters are invalid."""
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers an outgoing callback function for a specific LIN frame ID and size, storing it in a data structure associated with a device, and returning an error code if the input is invalid or memory allocation fails.""","""Registers an outgoing callback function for a specific LIN frame ID and size within a device's data structure, returning an error code if the input is invalid or memory allocation fails."""
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a given abstract linear scheduler, ensuring exclusive access via a semaphore and resetting the current entry index to zero.""","""Sets the active table index for a given abstract linear scheduler, ensuring exclusive access via a semaphore and resetting the current entry index to zero, returning an error if the table index is out of bounds."""
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a linear scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active.""","""Disables a linear scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active, ensuring no further messages are processed."""

id,language,reference,generated,generated_rci
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Checks if a given value conforms to a specified datatype by retrieving the corresponding type object and applying it to the value.”","""Validates if a given value matches a specified datatype by retrieving the corresponding type object and checking if the value is an instance of that type.”"
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a given value or list of values are within the specified range for a signed or unsigned integer of a given bit size.”","""Checks if a given value or list of values are valid integers within the specified range for a signed or unsigned integer of a given bit size.”"
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Retrieves a tuple containing the type name, constructor, and list of valid values for a given datatype from a class's `types` attribute, or returns `None` if the datatype is not found.”","""Retrieves a tuple containing the type name, constructor, and list of valid values for a given datatype from a class's `types` attribute, returning `None` if the datatype is not found.”"
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN) prefix, excluding the FQN itself.”","""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN) prefix.”"
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type (e.g., 'int32', 'string[]') into an `ApiGearType` object, handling basic types, floating-point types, booleans, strings, and arrays.”","""Converts a string representation of a data type (e.g., 'int32', 'string[]') into an `ApiGearType` object, handling basic types, floating-point types, booleans, strings, and array types.”"
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Creates an `ApiGearProperty` object from a `VSSNode`'s data and a specified datatype, setting the property's type and description if available.”","""Creates an `ApiGearProperty` object from a `VSSNode`'s data and a specified datatype, setting the property's type and description if available, or returning `None` if the datatype is unsupported.”"
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges multiple VSpec files (and their included files) into a single VSpec object, logging the process and raising an exception if no specs are loaded.”","""Loads and merges multiple VSpec files (and their included files) into a single VSpec object, logging the process and raising an exception if no specs are loaded or if there are any errors during the process.”"
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively updates a dictionary `base` with the contents of another dictionary `update`, merging nested dictionaries while overwriting non-dictionary values.”","""Recursively updates a dictionary `base` with the contents of another dictionary `update`, merging nested dictionaries and overwriting non-dictionary values.”"
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates if a given string `v` is a valid constant UID (hexadecimal string starting with '0x' and containing 8 hexadecimal characters) and returns the string if valid, otherwise returns None.”","""Validates if a given string `v` is a valid constant UID (hexadecimal string starting with '0x' and containing 8 hexadecimal characters) and returns the string if valid, otherwise returns None.”"
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Creates a `VSSRaw` object from a dictionary, attempts to resolve it, and returns the object (or the initialized incomplete object if resolution fails).""","""Creates a `VSSRaw` object from a dictionary, attempts to resolve it, and returns the object, logging a debug message if resolution fails."""
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Validates a list of datatypes against a predefined set of allowed datatypes, raising an assertion error if an invalid datatype is encountered.”","""Validates a list of datatypes against a predefined set of allowed datatypes, raising an assertion error if an invalid datatype is encountered.”"
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Generates a string representation of a VSSNode tree, including specified attributes, by recursively traversing the tree and formatting each node's name and attribute values.”","""Generates a formatted string representation of a VSSNode tree, including specified attributes, by recursively traversing the tree and formatting each node's name and attribute values.”"
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Recursively traverses up the tree to find the root node of an instance, raising an exception if no instance root is found.”","""Recursively traverses up the tree to find the root node of an instance, returning the root node and its depth, or raising an exception if no instance root is found.”"
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a VSSDataBranch tree structure.”",Recursively counts the depth of instance children within a VSSDataBranch tree structure.
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Identifies the IDs of all nodes whose expected parent is a specified name by iterating through a list of node IDs and filtering based on the `get_expected_parent` function.”","""Identifies the IDs of all nodes whose expected parent is a specified name by iterating through a list of node IDs and filtering based on the `get_expected_parent` function.”"
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Retrieves an attribute from an object, returning a default value if the attribute is not found or is None.”","""Retrieves an attribute from an object, returning a default value if the attribute is not found or is None.”"
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Generates a Protocol Buffer definition from a VSS signal tree by recursively traversing the tree, extracting data types, writing imports, and creating message structures with fields based on the tree's structure.”","""Generates a Protocol Buffer definition from a VSS signal tree by recursively traversing the tree, extracting data types, writing imports, and creating message structures with fields based on the tree's structure and specified options.”"
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Collects the fully qualified names of all instances that are direct children of a VSSDataBranch node and are not themselves instance roots, grouping them by their instance root.”","""Collects the fully qualified names of all instances that are direct children of a VSSDataBranch node and are not themselves instance roots, grouping them by their instance root.”"
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Checks if a given node in a VSS tree is a leaf node by verifying if its data is an instance of the VSSDataDatatype class.”","""Determines if a given node in a VSS tree is a leaf node by checking if its data is an instance of the VSSDataDatatype class.”"
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a given node in a VSS tree represents a branch with a non-instance data type.”","""Checks if a given node in a VSS tree represents a branch with a non-instance data type.”"
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a VSSNode represents an instance of a VSSDataBranch by verifying if the node's data is a VSSDataBranch and if that branch is marked as an instance.”","""Determines if a VSSNode represents an instance of a VSSDataBranch by checking if its data is a VSSDataBranch and if that branch's `is_instance` attribute is True.”"
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string using a bitwise XOR and multiplication with a prime number.”","""Calculates a 32-bit FNV-1a hash value for a given byte string by iteratively multiplying by a prime number and XORing with each byte.”"
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates a layout file to create a view for a card-like fragment, retrieving references to the title and icon elements within the layout.”","""Inflates a layout file to create a view for a card-like fragment, retrieving references to the title and icon elements within the layout.”"
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and content of an ImageButton based on the presence and properties of a DescriptiveTextWithControlsView’s control element.”","""Updates the visibility and content of an ImageButton based on the presence and properties of a DescriptiveTextWithControlsView’s control element, setting its icon and click listener if present.”"
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily inflates and caches a descriptive text-only layout view, retrieving its title, subtitle, optional image, and tap-for-more text elements for later use.”","""Lazily inflates and caches a descriptive text-only layout view, retrieving its title, subtitle, optional image, and tap-for-more text elements for later use.”"
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the UI elements of a card header view by setting the card title and icon within the main thread to ensure UI consistency.”","""Updates the card header view's title and icon in the main thread to ensure UI consistency.”"
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Retrieves or creates a `View` for displaying text blocks, including a tap-for-more indicator, by inflating a `ViewStub` if it doesn't already exist.”","""Retrieves or creates a `View` for displaying text blocks, including a tap-for-more indicator, by inflating a `ViewStub` if it doesn't already exist and caching the result.”"
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Retrieves the default media browsing service component name for a given package by querying the package manager for services that implement the MediaBrowserService interface.”","""Retrieves the default media browsing service component name for a given package by querying the package manager for services that implement the MediaBrowserService interface.”"
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a component should be added to the launchables list based on its package name, app type, and custom media component settings.”","""Determines whether a component should be added to the launchables list based on its package name, app type, and custom media component settings, returning false if the package is hidden or if it's a custom media service that shouldn't be shown.”"
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Sets the media source of a specified component to browse mode and finishes the current activity if it is an activity, handling potential CarNotConnectedException.”","""Sets the media source of a specified component to browse mode and finishes the current activity if it is an activity, handling potential CarNotConnectedException.”"
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a specified activity within a given package is optimized for distraction by querying the car package manager, handling potential connection errors.”","""Determines if a specified activity within a given package is optimized for distraction by querying the car package manager, returning false if the car is not connected.”"
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Retrieves the preferred intent for launching maps applications, prioritizing those specified in the configuration, while falling back to the default maps activity if no preferred activity is found or if the preferred activity is invalid.”","""Retrieves the preferred intent for launching maps applications, prioritizing those specified in the configuration and ensuring the preferred activity is valid before returning it.”"
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Initializes and adds HomeCardModule instances, dynamically created via reflection from a list of class names, to a FragmentTransaction to be displayed in the UI.”","""Initializes and adds HomeCardModule instances, dynamically created via reflection from a list of class names, to a FragmentTransaction to be displayed in the UI, logging the reflection time for each module.”"
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Removes dangling tasks from a list of task appeared information if they are in multi-window mode, using the ActivityTaskManager to remove them.”","""Removes dangling multi-window tasks from a list of task appeared information using the ActivityTaskManager.”"
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Updates the application's mode based on the intent data, setting the title of the activity and toolbar accordingly.”","""Updates the application's mode based on the intent data, setting the title of the activity and toolbar accordingly.”"
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Retrieves a Chronometer view from the layout, creating it if it doesn't already exist, and also retrieves a separator view associated with the Chronometer.”","""Retrieves a Chronometer view from the layout, creating it if it doesn't already exist, and also retrieves a separator view associated with the Chronometer.”"
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Retrieves or inflates a ViewStub to create a layout for displaying media information, including title, subtitle, and playback controls, and initializes the controls action bar.”","""Retrieves or inflates a ViewStub to create a layout for displaying media information, including title, subtitle, and playback controls, and initializes the controls action bar using the presenter.”"
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Updates the card's background image by scaling, blurring, and setting it to the card's background view, ensuring the image is visible and blurred with a specified radius.”","""Updates the card's background image by scaling, blurring, and setting it to the card's background view, ensuring the image is visible and blurred with a specified radius if the image and card size are valid.”"
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Updates the visibility and text content of a media layout view with a given title and subtitle.”","""Updates the visibility and text content of a media layout view with a given title and subtitle.”"
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Updates the visibility and state of a chronometer and separator based on the start time of a descriptive text view, displaying the chronometer if the start time is positive.”","""Updates the visibility and state of a chronometer and separator based on the start time of a descriptive text view, showing the chronometer if the start time is positive and starting it with the specified base.”"
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback to a given `Call` object if it is not null, enabling asynchronous notifications related to the call.”","""Registers a callback to a given `Call` object if it is not null, enabling asynchronous notifications related to the call.”"
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes a call from the current call state, clears associated data, updates the presenter, and unregisters the callback for the removed call.”","""Removes a call from the current call state, clears associated data, updates the presenter, and unregisters the callback for the removed call.”"
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number and updates a descriptive text view with the formatted number, call duration, and call control buttons, then notifies the presenter of the model update.”","Formats a phone number using a utility function, updates a descriptive text view with the formatted number, call duration, and call control buttons, and then notifies the presenter of the model update."
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes the mute, end call, and dialpad buttons for an in-call UI by setting their icons and associated actions.”","""Initializes the mute, end call, and dialpad buttons for an in-call UI by setting their icons and associated actions, using a descriptive text view with controls.”"
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a listener of an available status if the DBus connection is connected.”","""Notifies a listener with an available status if the DBus connection is connected.”"
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Registers a connection and its associated thread to be joined upon program exit, ensuring proper thread cleanup.”","""Registers a connection and its associated thread to be joined upon program exit, ensuring proper thread cleanup and preventing resource leaks.”"
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Removes a DBus watch by stopping its monitoring and clearing its associated data, ensuring proper cleanup when a watch is no longer needed.”","Removes a DBus watch by stopping its monitoring and clearing its associated data, ensuring proper cleanup when a watch is no longer needed."
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Toggles the DBus watch state (start/stop) based on the provided DBus watch object and associated context, managing the watch's readiness and dispatch source dependencies.”","""Toggles the DBus watch state (start/stop) based on the provided DBus watch object and associated context, managing the watch's readiness and dispatch source dependencies, and potentially creating a new watch if one doesn't exist.”"
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Lazily creates and returns a shared pointer to a DBusObjectManager instance, ensuring thread-safe initialization using a mutex.”","""Lazily creates and returns a shared pointer to a DBusObjectManager instance, ensuring thread-safe initialization using a mutex and memoization.”"
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a service name from the D-Bus connection, decrementing its count or removing it if the count reaches zero, and returning true if the release was successful.”","""Releases a service name from the D-Bus connection, decrementing its count or removing it if the count reaches zero, and returning true if the release was successful or false if the service name was not found.”"
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a libdbus pending call to a DBusMessage object by extracting the reply from the pending call and creating a DBusMessage instance.”","""Converts a libdbus pending call to a DBusMessage object by extracting the reply from the pending call and creating a DBusMessage instance, without increasing the reference count of the libdbus message.”"
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all pending asynchronous message reply handlers by moving them from a temporary vector to a vector for deletion and then iterating through the vector to delete each handler.”","""Deletes all pending asynchronous message reply handlers by moving them from a temporary vector to a vector for deletion and then iterating through the vector to delete each handler.”"
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through signal handlers and calls their `onSpecificError` method with a success status and a set of error tags for each handler.”","""Iterates through signal handlers and calls their `onSpecificError` method with a success status and a set of error tags for each handler, effectively clearing the error state for those signals.”"
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Removes a connection from a map of connections using a mutex to ensure thread safety.”","""Removes a connection from a map of connections, using a mutex to ensure thread safety during concurrent access.”"
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Handles DBus messages related to instance availability status changes by routing them to the appropriate signal handler methods within the instance availability status event object.”","""Routes DBus messages indicating the addition or removal of interfaces to the corresponding signal handler methods within the instance availability status event object.”"
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves a list of available service instances from a DBus proxy and populates a vector with their DBus addresses, returning a success status if successful.”","""Retrieves a list of available service instances from a DBus proxy and populates a vector with their DBus addresses, returning a success status if successful.”"
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Retrieves the availability status of a DBus service instance by checking if it's alive in the DBus registry and updates the provided status and call status accordingly.”","""Determines the availability status of a DBus service instance by querying the DBus registry and updating the provided status and call status.”"
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Handles the DBus signal indicating the removal of interfaces from a DBus object, updating the availability status of observed interfaces if they were removed.”","""Handles the DBus signal indicating the removal of interfaces from a DBus object, updating the availability status of observed interfaces if they were removed and notifying listeners.”"
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Notifies listeners of a change in the availability status of a DBus interface by translating the DBus address to a CommonAPI address and then invoking the listener notification method.”","""Notifies listeners of a change in the availability status of a DBus interface by translating the DBus address to a CommonAPI address and then invoking the listener notification method.”"
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Registers a listener with a DBus proxy to receive specific events via a subscription, pushing the notification function to the main loop for asynchronous execution.”","""Registers a listener with a DBus proxy to receive specific events via a subscription, pushing the notification function to the main loop for asynchronous execution.”"
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a listener from a set of listeners associated with a specific subscription by iterating through the set and erasing the matching listener.”","""Removes a listener from a set of listeners associated with a specific subscription by iterating through the set and erasing the matching listener.”"
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a signal handler to the DBus proxy connection for a specific subscription.”","""Registers a signal handler with the DBus proxy connection for a given subscription.”"
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function.”","""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function.”"
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles incoming DBus messages by looking up the corresponding DBusInterfaceHandler, calling its onInterfaceDBusMessage method, or handling introspectable interface messages if no handler is found.”","""Handles incoming DBus messages by looking up the corresponding DBusInterfaceHandler, calling its onInterfaceDBusMessage method, or handling introspectable interface messages if no handler is found, returning true if the message was handled.”"
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a DBus interface handler to a table of registered objects, checking for duplicates and handling special cases for the ObjectManager and Properties interfaces.”","""Adds a DBus interface handler to a table of registered objects, preventing duplicates and handling special cases for the ObjectManager and Properties interfaces.”"
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a DBusInterfaceHandler to a table of registered objects, keyed by interface path, ensuring no duplicates are added.”","""Adds a DBusInterfaceHandler to a table of registered objects, keyed by interface path, and prevents duplicate handlers for the same path.”"
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a positive response to a reset request by transmitting a specific UDS SID and reset type via the CAN bus using the isotp protocol.”","""Sends a positive response to a reset request by transmitting a specific UDS SID and reset type via the CAN bus using the isotp protocol, logging any errors encountered during transmission.”"
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles an ECU reset request by validating the message length, processing a hard reset request by sending a positive response and rebooting the system, and returning a negative response for unsupported reset types.”","""Handles an ECU reset request by validating the message length, processing a hard reset request by sending a positive response and rebooting the system, and returning a negative response for unsupported reset types or incorrect message format.”"
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Sends a positive response to a download request via ISOTP by constructing a message with a specific SID, response code, and block size, and then transmitting it to a specified CAN ID.”","""Sends a positive response to a download request via ISOTP by constructing a message with a specific SID, response code, and block size, and then transmitting it to a specified CAN ID.”"
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a transfer data response message to a specified CAN ID using the isotp protocol, including a positive SID and the provided block sequence counter.”","""Sends a transfer data response message to a specified CAN ID using the isotp protocol, including a positive SID and the provided block sequence counter, and logs an error if the transmission fails.”"
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Sends a routine control result message to a specified CAN ID using the isotp protocol, encapsulating the routine ID and result within a positive SID message.”","""Sends a routine control result message to a specified CAN ID using the isotp protocol, encapsulating the routine ID and result within a positive SID message.”"
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a positive response to a transfer exit request by transmitting a specific UDS SID via the isotp protocol.”","""Sends a positive response to a transfer exit request by transmitting a specific UDS SID via the isotp protocol to a specified CAN ID.”"
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Maps a CAN identifier to a corresponding index within a lookup table if it exists, otherwise returns 0xff.”","""Maps a CAN identifier to a corresponding index within a lookup table if it exists, otherwise returns 0xff.”"
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a callback function associated with a specific filter ID from a list of incoming callbacks for a LIN2CAN device, or clears all callbacks if the filter ID is TRANSLATABLE_ADDRESSES_LEN.”","Removes a callback function associated with a specific filter ID from a list of incoming callbacks for a LIN2CAN device, or clears all callbacks if the filter ID is TRANSLATABLE_ADDRESSES_LEN."
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a message queue, copies its data into a CAN frame, and then calls a user-defined callback function to transmit the frame via CAN.”","""Retrieves a LIN frame from a message queue, copies its data into a CAN frame, and then invokes a user-provided callback function to handle the transmission of the frame via CAN.”"
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Handles incoming CAN frames by translating the LIN ID to a CAN ID, extracting the relevant data, and invoking a user-defined callback function with the translated CAN frame.”","""Handles incoming CAN frames by translating the LIN ID to a CAN ID, extracting the relevant data, and invoking a user-defined callback function with the translated CAN frame.”"
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device data structure, updating the shield registers, and enabling the output pin.”","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device data structure, updating the shield registers, and enabling the output pin to activate the shield.”"
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the digital-to-analog converter (DAC) gain for a given device, updating the device's internal registers and triggering a register update function.”","""Sets the digital-to-analog converter (DAC) gain for a specified device, updating the corresponding register and triggering a register update function.”"
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Configures the output enable bit for a specific GPIO pin on the HV shield device by setting or clearing the corresponding bit in the `gpio_output` register.”","""Configures the output enable bit for a specific GPIO pin on the HV shield device by setting or clearing the corresponding bit in the `gpio_output` register, after adjusting the index to account for the device's internal register layout.”"
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes a CAN frame received on a device to another device by sending it using `can_send` and logging the routing action.”","""Routes a CAN frame received on a device to another device by sending it using `can_send` and logging the routing action, handling potential send failures.”"
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a set of CAN router entries by adding corresponding receive filters for each entry, returning an error code if any registration fails.”","""Registers a set of CAN router entries by adding corresponding receive filters for each entry, returning an error code if any registration fails.”"
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Registers all CAN router entries defined in the statically allocated `can_router_table_t` structures by iterating through them and calling `can_router_register` for each.”","""Registers all CAN router entries defined in the statically allocated `can_router_table_t` structures by iterating through them and calling `can_router_register` for each, returning an error if registration fails.”"
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Sets the specified bits of a GPIO mask to a given value by iterating through the configured GPIO pins and using the `gpio_pin_set` function to update each pin.”","""Sets the specified bits of a GPIO mask to a given value by iterating through the configured GPIO pins and using the `gpio_pin_set` function to update each pin.”"
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Calculates the number of free callback slots available for a given device by subtracting the number of used callbacks from the maximum number of callbacks supported.”","""Calculates the number of free callback slots for a given device by subtracting the number of used callbacks from the maximum number of callbacks supported.”"
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a specific frame ID of a given size is received by the abstract LIN device, storing the callback and associated data for future use.”","""Registers a callback function to be invoked when a specific frame ID of a given size is received by the abstract LIN device, storing the callback and associated data for future use.”"
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers an outgoing callback function for a specific frame ID and size within a device's abstract LIN data structure, handling invalid inputs and allocating a free callback slot.”","""Registers an outgoing callback function for a specific frame ID and size within a device's abstract LIN data structure, returning an error code if the input is invalid or if no free callback slot is available.”"
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a given abstract linear scheduler and resets the current entry index to 0, ensuring exclusive access via a semaphore.”","""Sets the active table index for a given abstract linear scheduler and resets the current entry index to 0, ensuring exclusive access via a semaphore and handling the case where a table was previously active.”"
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a linear scheduler by setting its current table to -1 and blocking until the scheduler is no longer active.”","""Disables a linear scheduler by setting its current table to -1 and blocking until the scheduler is no longer active, ensuring no further messages are processed.”"

id,language,reference,generated,generated_rci
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Validates that 'datatype' is a supported type, then returns true if the 'value' is of the specified 'datatype' using the type checker function associated with that datatype.""","""Validates that 'datatype' is a supported type, then returns true if the 'value' is of the specified 'datatype' using the type checker function associated with that datatype."""
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a value or a list of values are all integers within a specified range, considering whether the integer is signed or unsigned and the number of bits.""","""Checks if a value or a list of values are all integers within a specified range, considering whether the integer is signed or unsigned and the number of bits."""
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Returns a tuple containing the datatype name, a callable, and a list of subtypes if the provided 'datatype' matches a known type within the 'cls.types' list, otherwise returns None.""","""Returns a tuple containing the datatype name, a callable, and a list of subtypes if the provided 'datatype' matches a known type within the 'cls.types' list, otherwise returns None."""
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN), excluding the FQN itself, by iterating through a predefined list of datatypes and checking for partial matches.""","""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN), excluding the FQN itself, by iterating through a predefined list of datatypes and checking for partial matches."""
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') into an ApiGearType object, handling arrays and mapping primitive types to their corresponding ApiGearBasicType values.""","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') into an ApiGearType object, handling arrays and mapping primitive types to their corresponding ApiGearBasicType values."""
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Generates an `ApiGearProperty` object from a `VSSNode` and a datatype string, returning `None` if the datatype is unsupported, otherwise populating the property with the node's description if available.""","""Generates an `ApiGearProperty` object from a `VSSNode` and a datatype string, returning `None` if the datatype is unsupported, otherwise populating the property with the node's description if available."""
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges multiple VSpec files from a list of paths, optionally including specified include directories, and returns a single combined VSpec object after logging the loaded specifications.""","""Loads and merges multiple VSpec files from a list of paths, optionally including specified include directories, and returns a single combined VSpec object after logging the loaded specifications and raising an exception if no specifications are loaded."""
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively updates a dictionary 'base' with the contents of another dictionary 'update', merging nested dictionaries while overwriting non-dictionary values.""","""Recursively updates a dictionary 'base' with the contents of another dictionary 'update', merging nested dictionaries and overwriting non-dictionary values."""
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates that the input 'v' is a valid 'constUID' by checking if it matches the hexadecimal pattern '0x[0-9A-Fa-f]{8}' and returns the input if it is valid, otherwise returns None.""","""Validates that the input 'v' is a valid 'constUID' by checking if it matches the hexadecimal pattern '0x[0-9A-Fa-f]{8}' and returns the input if it is valid, otherwise returns None."""
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Creates a VSSRaw object from a dictionary, attempts to resolve it using `resolve_vss_raw`, and returns the resolved object or the original if resolution fails, logging a debug message in case of failure.""","""Creates a VSSRaw object from a dictionary, attempts to resolve it using `resolve_vss_raw`, and returns the resolved object or the original if resolution fails, logging a debug message in case of failure."""
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Validates that all values in the input list are valid datatypes by checking against a predefined list of datatypes, raising an assertion error if an invalid datatype is found.""","""Validates that all values in the input list are valid datatypes by checking against a predefined list of datatypes, raising an assertion error if an invalid datatype is found and returning the original list if all values are valid."""
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Recursively traverses a VSSNode tree, extracting specified attributes from each node and formatting them into a string representation suitable for rendering a tree-like structure.""","""Recursively traverses a VSSNode tree, extracting specified attributes from each node and formatting them into a string representation suitable for rendering a tree-like structure with indentation."""
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Recursively traverses up the parent chain of a VSSNode until an instance root is found, returning the root node and the depth of the traversal, or raising a NoInstanceRootException if no instance root exists.""","""Recursively traverses up the parent chain of a VSSNode until an instance root is found, returning the root node and the depth of the traversal, raising a NoInstanceRootException if no instance root exists."""
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a VSSDataBranch object, returning 1 if an instance child is found and 0 otherwise.""","""Recursively counts the depth of instance children within a VSSDataBranch object, returning 1 plus the depth of the first instance child found, or 0 if no instance children are found."""
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Iterates through a list of node IDs, identifies those whose expected parent matches a given name, and returns a list of those node IDs.""","""Iterates through a list of node IDs, identifies those whose expected parent matches a given name, and returns a list of those node IDs."""
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Retrieves the value of an attribute from an object, returning a default value if the attribute is not found or is None.""","""Retrieves the value of an attribute from an object, returning a default value if the attribute is not found or is None."""
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Traverses a VSS signal tree, extracts and writes proto imports based on data types, and then writes proto messages to a file, recursively processing branches and printing their fields with optional static UIDs and optional fields.""","""Traverses a VSS signal tree, extracts and writes proto imports based on data types, and then writes proto messages to a file, recursively processing branches and printing their fields with optional static UIDs and optional fields."""
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Traverses a VSS tree to identify and group all instances of VSSDataBranch nodes that are marked as instances, returning a dictionary mapping instance root fully qualified names to lists of their corresponding instance names.""","""Traverses a VSS tree to identify and group all instances of VSSDataBranch nodes marked as instances, returning a dictionary mapping instance root fully qualified names to lists of their corresponding instance names."""
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Checks if a given VSSNode has a data attribute that is an instance of the VSSDataDatatype class, returning True if it is a leaf node and False otherwise.""","""Determines if a given VSSNode is a leaf node by checking if its 'data' attribute is an instance of the VSSDataDatatype class."""
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a given VSSNode represents a VSS branch by verifying if its data is a VSSDataBranch and if the branch is not an instance.""","""Checks if a given VSSNode represents a VSS branch by verifying if its data is a VSSDataBranch and if the branch is not an instance."""
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a given VSSNode's data is a VSSDataBranch and if that branch is marked as an instance.""","""Checks if a given VSSNode's data is a VSSDataBranch and if that branch is marked as an instance."""
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string using a prime number multiplier and XOR operation.""","""Calculates a 32-bit FNV-1a hash value for a given byte string by iterating through each byte, multiplying the hash by a prime number, applying a bitwise AND with 0xFFFFFFFF, and XORing with the current byte."""
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates a layout (`card_fragment`) to create a view, finds the `card_name` and `card_icon` views within it, and returns the inflated view.""","""Inflates a layout (`card_fragment`) to create a view, and finds the `card_name` and `card_icon` views within it."""
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button.""","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button."""
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its title, subtitle, optional image, and tap-for-more text elements.""","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its title, subtitle, optional image, and tap-for-more text elements."""
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the visibility of the root view and sets the text and icon of the card title view with the provided `CardHeader` data within the main thread.""","""Updates the visibility of the root view and sets the text and icon of the card title view with the provided `CardHeader` data on the main thread."""
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Lazily initializes and returns a `View` representing a text block layout, inflating it from a `ViewStub` and retrieving references to its `text_block` and `tap_for_more_text` child views.""","""Lazily initializes and returns a `View` representing a text block layout, inflating it from a `ViewStub` and retrieving references to its `text_block` and `tap_for_more_text` child views."""
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Queries the package manager for a `MediaBrowserService` within a given package and returns its `ComponentName` if found, otherwise returning `null`.""","""Queries the package manager for a `MediaBrowserService` within a given package and returns its `ComponentName` if found, otherwise returning `null`."""
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a given component should be added to the launchables list based on its package name, app type, and whether it's a custom media component, returning false if the package is hidden or if it's a custom media component that shouldn't be shown.""","""Determines whether a given component should be added to the launchables list based on its package name, app type, and whether it's a custom media component, returning false if the package is hidden or if it's a custom media component that shouldn't be shown."""
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Selects a media source and finishes the current activity if it is an activity, handling `CarNotConnectedException` if the car is not connected.""","""Selects a media source and finishes the current activity if it is an activity, handling `CarNotConnectedException` if the car is not connected."""
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a given activity within a specified package is distraction optimized using the `CarPackageManager`, handling potential `CarNotConnectedException` and returning a boolean indicating the optimization status.""","""Checks if a given activity within a specified package is distraction optimized using the `CarPackageManager`, returning `true` if it is, `false` otherwise, and logging an error if a `CarNotConnectedException` occurs."""
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Retrieves a preferred `Intent` for launching maps, prioritizing activities specified in `config_homeCardPreferredMapActivities` while falling back to the default maps activity if no preferred activity is found or if the preferred activity is invalid.""","""Retrieves a preferred `Intent` for launching maps, prioritizing activities specified in `config_homeCardPreferredMapActivities` and returning the default maps activity if no preferred activity is found or if the preferred activity is invalid."""
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding them to the fragment manager to be displayed in their respective card resource IDs.""","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding them to the fragment manager to be displayed in their respective card resource IDs."""
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Removes dangling tasks from the ActivityTaskManager that are in multi-window mode, iterating through a list of `TaskAppearedInfo` objects and removing tasks if they meet the criteria.""","""Removes dangling multi-window tasks from the ActivityTaskManager by iterating through a list of `TaskAppearedInfo` objects and removing tasks that are in multi-window mode."""
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Parses the application mode from the intent, sets the activity title, and updates the toolbar title accordingly.""","""Parses the application mode from the intent and updates both the activity title and the toolbar title with the corresponding title string ID."""
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Lazily initializes and returns a `Chronometer` and its separator view from the layout, if they haven't been initialized already.""","""Lazily initializes and returns a `Chronometer` and its separator view from the layout, if they haven't been initialized already."""
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Lazily initializes and returns a `View` representing the media layout, inflating it from a `ViewStub`, setting up the title and subtitle views, and initializing the media playback controls action bar with the presenter.""","""Lazily initializes and returns a `View` representing the media layout, inflating it from a `ViewStub`, setting up the title and subtitle views, and initializing the media playback controls action bar using the presenter."""
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the background image with a transition animation if the card size is valid.""","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the background image with a transition animation if the card size is valid and the image is not null."""
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Sets the visibility of the media layout view to visible and updates the text of the title and subtitle views with the provided title and subtitle strings.""","""Sets the visibility of the media layout view to visible and updates the title and subtitle text views with the provided title and subtitle strings."""
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Conditionally displays a chronometer and separator based on the provided `DescriptiveTextWithControlsView`'s start time, initializing and starting the chronometer if the start time is positive.""","""Conditionally displays a chronometer and separator based on the provided `DescriptiveTextWithControlsView`'s start time, initializing and starting the chronometer if the start time is positive and hiding it otherwise."""
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback to a given `Call` object to receive updates about its state, if the `Call` object is not null.""","""Registers a callback to a given `Call` object to receive updates about its state, handling the case where the `Call` object is null."""
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback from the removed call.""","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback from the removed call."""
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and other call-related UI elements, and then notifies the presenter that the model has been updated.""","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and other call-related UI elements, and then notifies the presenter that the model has been updated."""
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes the mute, end call, and dialpad buttons for the audio controls view, setting their icons and click listeners to manage call muting, disconnection, and dialpad access respectively.""","""Initializes the mute, end call, and dialpad buttons for the audio controls view, setting their icons and click listeners to manage call muting, disconnection, and dialpad access respectively."""
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a newly added listener with an `AvailabilityStatus::AVAILABLE` event if the D-Bus connection is currently connected.""","""Notifies a newly added listener with an `AvailabilityStatus::AVAILABLE` event if the D-Bus connection is currently connected, ignoring the subscription information."""
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Associates a given thread with a D-Bus connection, adding the thread to a list of threads to be joined upon program exit if the connection is already registered.""","""Associates a given thread with a D-Bus connection, adding the thread to a list of threads to be joined upon program exit if the connection is already registered."""
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Removes a D-Bus watch by stopping its associated `DBusWatch` object if it's ready and clearing the watch's data, handling null pointers and ensuring proper cleanup.""","""Removes a D-Bus watch by stopping its associated `DBusWatch` object if it's ready and clearing the watch's data, handling null pointers and ensuring proper cleanup."""
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Handles D-Bus watch events by either initializing a `DBusWatch` object and starting its monitoring or stopping the watch and removing its associated data if it's already initialized and ready.""","""Handles D-Bus watch events by either initializing a `DBusWatch` object and starting its monitoring or stopping the watch and removing its associated data if it's already initialized and ready."""
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Retrieves a shared pointer to a `DBusObjectManager` instance, lazily creating one if it doesn't already exist, and ensuring thread-safe access via a mutex.""","""Retrieves a shared pointer to a `DBusObjectManager` instance, lazily creating one if it doesn't already exist, and ensuring thread-safe access via a mutex."""
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a D-Bus service name by decrementing its reference count, and if the count reaches zero, calls `dbus_bus_release_name` to unregister the service name, returning `true` on success and `false` if the service name was not found or the release operation failed.""","""Releases a D-Bus service name by decrementing its reference count, and if the count reaches zero, calls `dbus_bus_release_name` to unregister the service name, returning `true` if the service name was successfully released and `false` otherwise."""
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a `DBusPendingCall` to a `DBusMessage` by extracting the reply from the pending call and returning a `DBusMessage` object, returning an empty `DBusMessage` if the input is null.""","""Converts a `DBusPendingCall` to a `DBusMessage` by extracting the reply from the pending call and returning a `DBusMessage` object, returning an empty `DBusMessage` if the input is null or the extraction fails."""
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector, ensuring proper cleanup of asynchronous handlers.""","""Deletes all `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector, ensuring proper cleanup of asynchronous handlers."""
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through all registered D-Bus signal handlers, and for each handler, calls its `onSpecificError` method with a `SUCCESS` status for each signal tag associated with that handler, effectively notifying the handler that all signals it was waiting for have completed successfully.""","""Iterates through all registered D-Bus signal handlers, and for each handler, calls its `onSpecificError` method with a `SUCCESS` status for each signal tag associated with that handler, effectively notifying the handler that all signals it was waiting for have completed successfully."""
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Removes a `ConnectionId_t` from the `connections_` map, releasing the associated connection if it exists, while ensuring thread safety via a recursive mutex.""","""Removes a `ConnectionId_t` from the `connections_` map, releasing the associated connection if it exists, and ensuring thread safety via a recursive mutex."""
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Handles D-Bus messages received on a D-Bus connection, routing them to the appropriate handler function within the `instanceAvblStatusEvent_` object based on whether the message contains ""InterfacesAdded"" or ""InterfacesRemoved"" members.""","""Handles D-Bus messages received on a D-Bus connection, routing them to the appropriate handler function within the `instanceAvblStatusEvent_` object based on whether the message contains ""InterfacesAdded"" or ""InterfacesRemoved"" members."""
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves a list of available service instances for a given D-Bus service and object path, populating the provided `_availableServiceInstances` vector and setting the `_status` to `SUCCESS` if successful.""","""Retrieves a list of available service instances for a given D-Bus service and object path, populating the provided `_availableServiceInstances` vector and setting the `_status` to `SUCCESS` if successful, or `ERROR` otherwise."""
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Retrieves the availability status of a given DBus service instance, translating a CommonAPI address to a DBus address and checking if the instance is alive in the DBus registry, setting the `AvailabilityStatus` and `CallStatus` accordingly.""","""Retrieves the availability status of a given DBus service instance, translating a CommonAPI address to a DBus address and checking if the instance is alive in the DBus registry, setting the `AvailabilityStatus` and `CallStatus` accordingly."""
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Processes a DBus signal indicating the removal of interfaces, iterating through the removed interfaces and notifying the application if the removed interface matches the observed interface and the removal was successful.""","""Processes a DBus signal indicating the removal of interfaces, iterating through the removed interfaces and notifying the application if the removed interface matches the observed interface and the removal was successful."""
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Translates a D-Bus address to a CommonAPI address and notifies listeners of an interface's availability status change for a given object path and interface name.""","""Translates a D-Bus address to a CommonAPI address and notifies listeners of an interface's availability status change for a given object path and interface name."""
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Adds a listener to the DBusProxyStatusEvent, registering a function to be called in the main loop to notify the listener when the DBusProxy status changes, using a weak pointer to avoid dangling references.""","""Adds a listener to the DBusProxyStatusEvent, registering a function to be called in the main loop to notify the listener when the DBusProxy status changes, using a weak pointer to avoid dangling references and passing the listener and subscription details."""
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a `Listener` from the `listeners_` map associated with a given `Subscription`, ensuring thread safety via a mutex.""","""Removes a `Listener` from the `listeners_` map associated with a given `Subscription`, ensuring thread safety via a mutex and iterating through the map to find and remove the matching listener."""
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a signal handler to the connection for a specific subscription, allowing the handler to receive notifications for that signal.""","""Adds a signal handler to the connection for a specific subscription, allowing the handler to receive notifications for that signal."""
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available instances of a D-Bus proxy, translating the D-Bus addresses to strings and passing the status and instances to the provided callback function.""","""Handles the asynchronous callback for retrieving available instances of a D-Bus proxy, translating the D-Bus addresses to strings and passing the status and instances to the provided callback function."""
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles incoming D-Bus messages by looking up the corresponding interface handler in a table, calling the handler's `onInterfaceDBusMessage` method if found, or handling introspectable interface messages if no handler is registered.""","""Handles incoming D-Bus messages by looking up the corresponding interface handler in a table, calling the handler's `onInterfaceDBusMessage` method if found, or handling introspectable interface messages if no handler is registered, returning `true` if the message was handled and `false` otherwise."""
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, returning `true` if successful or if the handler is already registered for the specified path (except for `org.freedesktop.DBus.ObjectManager` and `org.freedesktop.DBus.Properties` interfaces), and `false` otherwise.""","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, returning `true` if successful or if the handler is already registered for the specified path (except for `org.freedesktop.DBus.ObjectManager` and `org.freedesktop.DBus.Properties` interfaces), and `false` otherwise."""
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, ensuring that the handler is not already registered for that path and returning `true` on success or `false` if the handler already exists.""","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, returning `true` on success and `false` if the handler is already registered for that path."""
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS positive reset response message (containing a positive reset SID and the reset type) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS positive reset response message (containing a positive reset SID and the reset type) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles a UDS ECU reset request by validating the message length, determining the reset type (hard or soft), sending a positive or negative response accordingly, and initiating a hard reset or logging an error if the reset type is unsupported.""","""Handles a UDS ECU reset request by validating the message length, determining the reset type (hard or soft), sending a positive or negative response accordingly, and initiating a hard reset or logging an error if the reset type is unsupported or the message length is invalid."""
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Constructs and sends a UDS positive response message (containing a positive response code and a block size of 258 bytes) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a UDS positive response message (containing a positive response code and a block size of 258 bytes) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS transfer data response message (containing a positive transfer data SID and a block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS transfer data response message (containing a positive transfer data SID and a block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Constructs and sends a 5-byte UDS routine control result message (containing a positive SID, a sub-function code, the routine ID, and the result) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 5-byte UDS routine control result message (containing a positive SID, a sub-function code, the routine ID, and the result) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a 1-byte UDS positive response message (specifically, a request transfer exit positive response) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails.”","""Sends a 1-byte UDS positive response message (specifically, a request transfer exit positive response) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails.”"
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Maps a CAN identifier to an index within a lookup table (id_mapping) and returns the index if found, otherwise returns 0xff to indicate that the identifier is not mapped.”","""Maps a CAN identifier to an index within a lookup table (id_mapping) and returns the index if found, otherwise returns 0xff to indicate that the identifier is not mapped.”"
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a specified CAN filter ID from the incoming callback list of a LIN2CAN device, either clearing all callbacks if the filter ID is TRANSLATABLE_ADDRESSES_LEN or clearing the callback for the specified filter ID if it is within the valid range.""","""Removes a specified CAN filter ID from the incoming callback list of a LIN2CAN device, clearing the callback function associated with that filter ID if it is within the valid range, or clearing all callbacks if the filter ID is TRANSLATABLE_ADDRESSES_LEN."""
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a kernel message queue, copies its data into a provided `lin_frame` structure, and then calls a user-defined callback function to transmit the frame via CAN, logging debug information during the process.""","""Retrieves a LIN frame from a kernel message queue, copies its data into a provided `lin_frame` structure, and then calls a user-defined callback function to transmit the frame via CAN."""
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, populating the CAN frame with the LIN data, and then invoking a registered callback function with the translated CAN frame and associated user data.""","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, populating the CAN frame with the LIN data, and then invoking a registered callback function with the translated CAN frame and associated user data, logging debug information for each step."""
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device's registers, updating the shield state, and enabling the output, logging errors if any of these steps fail.""","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device's registers, updating the shield state, and enabling the output, returning an error code if any of these steps fail."""
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the gain value of a specified DAC channel (0 or 1) within the HV shield device's registers and then updates the device's configuration, returning an error if the DAC channel is invalid.""","""Sets the gain value of a specified DAC channel (0 or 1) within the HV shield device's registers and then updates the device's configuration, returning an error if the DAC channel is invalid or if the update fails."""
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Enables or disables a GPIO output pin on an HV shield device by manipulating a bitfield in a register, after validating the index and updating the device's register map.""","""Enables or disables a GPIO output pin on an HV shield device by manipulating a bitfield in a register, after validating the index and updating the device's register map."""
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes a received CAN frame from one device to another by sending it to the specified destination device using the `can_send` function, logging a warning if the transmission fails and a debug message upon successful routing.""","""Routes a received CAN frame from one device to another by sending it to the specified destination device using the `can_send` function, logging a warning if the transmission fails and a debug message upon successful routing."""
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a set of CAN router entries by adding corresponding receive filters to the CAN driver, associating each filter with a callback function and a destination pointer, and logging errors if any registration fails.""","""Registers a set of CAN router entries by adding corresponding receive filters to the CAN driver, associating each filter with a callback function and a destination pointer, and logging errors if any registration fails."""
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Initializes the CAN router by iterating through a predefined table of routing entries and registering each entry with the CAN router subsystem, returning an error if registration fails.""","""Initializes the CAN router by iterating through a predefined table of routing entries and registering each entry with the CAN router subsystem, returning an error if registration fails."""
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Iterates through a configuration of GPIO pins, setting the specified pins to the given value if the corresponding bit in the mask is set, and returning an error if any GPIO setting fails.""","""Iterates through a configuration of GPIO pins, setting the specified pins to the given value if the corresponding bit in the mask is set, and returning an error if any GPIO setting fails."""
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Retrieves the number of available callback slots in the abstract LIN driver by subtracting the number of used callbacks from the maximum number of callbacks, returning an error if the provided pointer is NULL.""","""Calculates and returns the number of free callback slots in the abstract LIN driver by subtracting the number of used callbacks from the maximum number of callbacks, returning an error if the provided pointer is NULL."""
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a specific LIN frame (identified by its ID and size) is received, storing the callback and associated data in a lookup table for later execution, returning an error if the input parameters are invalid or if the callback table is full.""","""Registers a callback function to be invoked when a specific LIN frame (identified by its ID and size) is received, storing the callback and associated data in a lookup table for later execution, returning an error if the input parameters are invalid or if the callback table is full."""
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a specific outgoing LIN frame with a given ID and size is transmitted, storing the callback and associated data in a lookup table, and returning an error if the input parameters are invalid or if the table is full.""","""Registers a callback function to be invoked when a specific outgoing LIN frame with a given ID and size is transmitted, storing the callback and associated data in a lookup table, and returning an error if the input parameters are invalid or if the table is full."""
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a given abstract LIN scheduler, ensuring exclusive access via a semaphore and resetting the current table entry to the beginning of the table.""","""Sets the active table index for a given abstract LIN scheduler, ensuring exclusive access via a semaphore and resetting the current table entry to the beginning of the table, returning an error if the table index is out of bounds."""
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a given abstract LIN scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active.""","""Disables a given abstract LIN scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active, ensuring it is not currently processing a message."""

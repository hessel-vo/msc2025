id,language,reference,generated,generated_rci
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        return False","from typing import Any

def is_datatype(cls, value: Any, datatype: str) -> bool:
    if datatype == ""int"":
        return isinstance(value, int)
    elif datatype == ""float"":
        return isinstance(value, float)
    elif datatype == ""str"":
        return isinstance(value, str)
    elif datatype == ""bool"":
        return isinstance(value, bool)
    elif datatype == ""list"":
        return isinstance(value, list)
    elif datatype == ""tuple"":
        return isinstance(value, tuple)
    elif datatype == ""dict"":
        return isinstance(value, dict)
    elif datatype == ""set"":
        return isinstance(value, set)
    else:
        return False"
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(v, signed, bits) for v in value)
    if isinstance(value, int):
        if signed:
            return -2**(bits - 1) <= value < 2**(bits - 1)
        else:
            return 0 <= value < 2**bits
    return False","from typing import Any

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(is_xintx(v, signed, bits) for v in value)
    if isinstance(value, int):
        if signed:
            return -2**(bits - 1) <= value < 2**(bits - 1)
        else:
            return 0 <= value < 2**bits
    return False"
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_name, type_func, type_args in cls.__dict__.get(""_types"", []):
        if type_name == datatype:
            return type_name, type_func, type_args
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_name, type_func, type_args in cls.__dict__.get(""_types"", []):
        if type_name == datatype:
            return type_name, type_func, type_args
    return None"
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","```python
def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    """"""Finds all datatypes within the current namespace and any parent namespaces of a given FQN""""""
    if fqn is None:
        fqn = get_fqn()
    fqn_parts = fqn.split(""."")
    fqn_parts.pop()
    fqn_parts.reverse()
    fqn_parts.pop()
    fqn_parts.reverse()
    fqn_parts_str = ""."".join(fqn_parts)
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_","```python
def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    """"""Finds all datatypes within the current namespace and any parent namespaces of a given FQN""""""
    if fqn is None:
        fqn = get_fqn()
    fqn_parts = fqn.split(""."")
    fqn_parts.pop()
    fqn_parts.reverse()
    fqn_parts.pop()
    fqn_parts.reverse()
    fqn_parts_str = ""."".join(fqn_parts)
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_parts_str.replace(""::"", ""."")
    fqn_parts_str = fqn_"
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","import typing
from dataclasses import dataclass, field
from enum import Enum

class ApiGearType(Enum):
    STRING = ""string""
    INTEGER = ""integer""
    FLOAT = ""float""
    BOOLEAN = ""boolean""
    ARRAY = ""array""
    OBJECT = ""object""
    ANY = ""any""

@dataclass(frozen=True)
class ApiGearType:
    type: str
    items: typing.Optional[ApiGearType] = field(default=None)
    properties: typing.Optional[typing.Dict[str, ApiGearType]] = field(default=None)

def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""float"":
        return ApiGearType.FLOAT
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    elif t == ""any"":
        return ApiGearType.ANY
    else:
        return None","import typing
from dataclasses import dataclass, field
from enum import Enum

class ApiGearType(Enum):
    STRING = ""string""
    INTEGER = ""integer""
    FLOAT = ""float""
    BOOLEAN = ""boolean""
    ARRAY = ""array""
    OBJECT = ""object""
    ANY = ""any""

@dataclass(frozen=True)
class ApiGearType:
    type: str
    items: typing.Optional[ApiGearType] = field(default=None)
    properties: typing.Optional[typing.Dict[str, ApiGearType]] = field(default=None)

def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType.STRING
    elif t == ""integer"":
        return ApiGearType.INTEGER
    elif t == ""float"":
        return ApiGearType.FLOAT
    elif t == ""boolean"":
        return ApiGearType.BOOLEAN
    elif t == ""array"":
        return ApiGearType.ARRAY
    elif t == ""object"":
        return ApiGearType.OBJECT
    elif t == ""any"":
        return ApiGearType.ANY
    else:
        return None"
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","```python
def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    """"""Generates an ApiGear property from a VSS (Vehicle Signal Specification) node""""""
    if node.type == ""SIGNAL"":
        return ApiGearProperty(
            name=node.name,
            datatype=datatype,
            bit_length=node.bit_length,
            is_array=node.is_array,
            is_multidimensional=node.is_multidimensional,
            is_signed=node.is_signed,
            is_little_endian=node.is_little_endian,
            is_unsigned=node.is_unsigned,
            is_constant=node.is_constant,
            is_volatile=node.is_volatile,
            is_static=node.is_static,
            is_external=node.is_external,
            is_internal=node.is_internal,
            is_constant_value_known=node.is_constant_value_known,
            is_constant_value_valid=node.is_constant_value_valid,
            is_constant_value_valid_range=node.is_constant_value_valid_range,
            is_constant_value_valid_range_min=node.is_constant_value_valid_range_min,
            is_constant_value_valid_range_max=node.is_constant_value_valid_range_max,
            is_constant_value_valid_range_min_inclusive=node.is_constant_value_valid_range_min_inclusive,
            is_constant_value_valid_range_max_inclusive=node.is_constant_value_valid_range_max_inclusive,
            is_constant_value_valid_range_min_exclusive=node.is_constant_value_valid_range_min_exclusive,
            is_constant_value_valid_range_max_exclusive=node.is_constant_value_valid_range_max_exclusive,
            is_constant_value_valid_range_min_exclusive_min=node.is_constant_value_valid_range_min_exclusive_min,
            is_constant_value_valid_range_min_exclusive_max=node.is_constant_value_valid_range_min_exclusive_max,
            is_constant_value_valid_range_max_exclusive_min=node.is_constant_value_valid_range_max_exclusive_min,
            is_constant_value_valid_range_max_exclusive_max=node.is_constant_value_valid_range_max_exclusive_max,
            is_constant_value_valid_range_min_inclusive_min=node.is_constant_value_valid_range_min_inclusive_min,
            is_constant_value_valid_range_min_inclusive_max=node.is_constant_value_valid_range_min_inclusive_max,
            is_constant_value_valid_range_max_inclusive_min=node.is_constant_value_valid_range_max_inclusive_min,
            is_constant_value_valid_range_max_inclusive_max=node.is_constant_value_valid_range_max_inclusive_max,
            is_constant_value_valid_range_min_exclusive_min_inclusive=node.is_constant_value_valid_range_min_exclusive_min_inclusive,
            is_constant_value_valid_","```python
def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    """"""Generates an ApiGear property from a VSS (Vehicle Signal Specification) node""""""
    if node.type == ""SIGNAL"":
        return ApiGearProperty(
            name=node.name,
            datatype=datatype,
            bit_length=node.bit_length,
            is_array=node.is_array,
            is_multidimensional=node.is_multidimensional,
            is_signed=node.is_signed,
            is_little_endian=node.is_little_endian,
            is_unsigned=node.is_unsigned,
            is_constant=node.is_constant,
            is_volatile=node.is_volatile,
            is_static=node.is_static,
            is_external=node.is_external,
            is_internal=node.is_internal,
            is_constant_value_known=node.is_constant_value_known,
            is_constant_value_valid=node.is_constant_value_valid,
            is_constant_value_valid_range=node.is_constant_value_valid_range,
            is_constant_value_valid_range_min=node.is_constant_value_valid_range_min,
            is_constant_value_valid_range_max=node.is_constant_value_valid_range_max,
            is_constant_value_valid_range_min_inclusive=node.is_constant_value_valid_range_min_inclusive,
            is_constant_value_valid_range_max_inclusive=node.is_constant_value_valid_range_max_inclusive,
            is_constant_value_valid_range_min_exclusive=node.is_constant_value_valid_range_min_exclusive,
            is_constant_value_valid_range_max_exclusive=node.is_constant_value_valid_range_max_exclusive,
            is_constant_value_valid_range_min_exclusive_min=node.is_constant_value_valid_range_min_exclusive_min,
            is_constant_value_valid_range_min_exclusive_max=node.is_constant_value_valid_range_min_exclusive_max,
            is_constant_value_valid_range_max_exclusive_min=node.is_constant_value_valid_range_max_exclusive_min,
            is_constant_value_valid_range_max_exclusive_max=node.is_constant_value_valid_range_max_exclusive_max,
            is_constant_value_valid_range_min_inclusive_min=node.is_constant_value_valid_range_min_inclusive_min,
            is_constant_value_valid_range_min_inclusive_max=node.is_constant_value_valid_range_min_inclusive_max,
            is_constant_value_valid_range_max_inclusive_min=node.is_constant_value_valid_range_max_inclusive_min,
            is_constant_value_valid_range_max_inclusive_max=node.is_constant_value_valid_range_max_inclusive_max,
            is_constant_value_valid_range_min_exclusive_min_inclusive=node.is_constant_value_valid_range_min_exclusive_min_inclusive,
            is_constant_value_valid_"
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path
from vspec.vspec import VSpec
from vspec.vspec_loader import VSpecLoader


def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    loader = VSpecLoader(include_dirs)
    vspec = VSpec(identifier)
    for spec in specs:
        vspec.load(spec, loader)
    return vspec","from pathlib import Path
from vspec.vspec import VSpec
from vspec.vspec_loader import VSpecLoader


def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    loader = VSpecLoader(include_dirs)
    vspec = VSpec(identifier)
    for spec in specs:
        vspec.load(spec, loader)
    return vspec"
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","from typing import Any

def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict):
            base[k] = deep_update(base.get(k, {}), v)
        else:
            base[k] = v","from typing import Any

def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict):
            if k not in base:
                base[k] = {}
            base[k] = deep_update(base[k], v)
        else:
            base[k] = v"
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 8:
        return None
    try:
        int(v, 16)
    except ValueError:
        return None
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        return None
    if len(v) != 8:
        return None
    try:
        int(v, 16)
    except ValueError:
        return None
    return v"
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","from typing import Any

from vss.raw_model import VSSRaw


def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    return VSSRaw(data, fqn)","from typing import Any

from vss.raw_model import VSSRaw


def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    return VSSRaw(data, fqn)"
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [str(cls), ""int"", ""float"", ""bool"", ""list"", ""tuple"", ""dict"", ""set""]
    return [value for value in values if value in valid_datatypes]","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_datatypes = [str(type(cls)), ""int"", ""float"", ""bool"", ""list"", ""tuple"", ""dict"", ""set""]
    return [value for value in values if value in valid_datatypes]"
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int) -> str:
        rendered = """"
        rendered += "" "" * indent + f""{{{{{{{node.name}}}}}\n""
        for attribute in attributes:
            if attribute in node.attributes:
                rendered += "" "" * (indent + 2) + f""{{{attribute}: {node.attributes[attribute]}}}\n""
        for child in node.children:
            rendered += render_node(child, indent + 2)
        rendered += "" "" * indent + ""}\n""
        return rendered

    return render_node(tree, 0)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int) -> str:
        rendered = """"
        rendered += "" "" * indent + f""{{{node.name}}}\n""
        for attribute in attributes:
            if attribute in node.attributes:
                rendered += "" "" * (indent + 2) + f""{{{attribute}: {node.attributes[attribute]}}}\n""
        for child in node.children:
            rendered += render_node(child, indent + 2)
        rendered += "" "" * indent + ""}\n""
        return rendered

    return render_node(tree, 0)"
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if self.parent is None:
        return self, depth
    else:
        return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if self.parent is None:
        return self, depth
    else:
        return self.parent.get_instance_root(depth + 1)"
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    count = 0
    while self.children:
        self = self.children[0]
        count += 1
    return count","def count_instance_children_depth(self) -> int:
    count = 0
    if not self.children:
        return 0
    while self.children:
        self = self.children[0]
        count += 1
    return count"
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + '_'):
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + '_'):
            children_ids.append(node_id)
    return children_ids"
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        return getattr(o, name)
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default"
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""signal"":
        fd.write(f""message {tree.name} {{\n"")
        for child in tree.children:
            if child.type == ""signal_type"":
                fd.write(f""  {child.name} = {child.value};\n"")
            elif child.type == ""signal_unit"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_length"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_bit_length"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_endianness"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_offset"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiplier"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_divisor"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_min"":
                fd.write(f""  int32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_max"":
                fd.write(f""  int32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_value"":
                fd.write(f""  int32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_id"":
                fd.write(f""  uint32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_static_uid"":
                fd.write(f""  uint32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_optional"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_description"":
                fd.write(f""  string {child.name} = {child.value};\n"")
            elif child.type == ""signal_context"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiline_description"":
                fd.write(f""  string {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiline_description_en"":
                fd.write(f""  string {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiline_description_de"":
                fd.write(f""  string {child.name} = {child.value};\n"")","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""signal"":
        fd.write(f""message {tree.name} {{\n"")
        for child in tree.children:
            if child.type == ""signal_type"":
                fd.write(f""  {child.name} = {child.value};\n"")
            elif child.type == ""signal_unit"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_length"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_bit_length"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_endianness"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_offset"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiplier"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_divisor"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_min"":
                fd.write(f""  int32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_max"":
                fd.write(f""  int32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_value"":
                fd.write(f""  int32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_id"":
                fd.write(f""  uint32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_static_uid"":
                fd.write(f""  uint32_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_optional"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_description"":
                fd.write(f""  string {child.name} = {child.value};\n"")
            elif child.type == ""signal_context"":
                fd.write(f""  uint8_t {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiline_description"":
                fd.write(f""  string {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiline_description_en"":
                fd.write(f""  string {child.name} = {child.value};\n"")
            elif child.type == ""signal_multiline_description_de"":
                fd.write(f""  string {child.name} = {child.value};\n"")"
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for child in root.children:
        if isinstance(child, VSSBranch):
            instances_meta[child.fqn] = [
                instance.fqn for instance in child.instances
            ]
    return instances_meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for child in root.children:
        if isinstance(child, VSSBranch):
            instances_meta[child.fqn] = [
                instance.fqn for instance in child.instances
            ]
    return instances_meta"
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type == ""leaf""","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type == ""leaf"""
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return node.type == ""branch"" and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return node.type == ""branch"" and not node.is_instance"
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.type == ""branch""","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.type == ""branch"""
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    offset_basis = 0x811C9DC5
    hash = offset_basis
    for byte in identifier:
        hash ^= byte
        hash *= FNV_PRIME
        hash &= 0xFFFFFFFF
    return hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    offset_basis = 0x811C9DC5
    hash = offset_basis
    for byte in identifier:
        hash ^= byte
        hash *= FNV_PRIME
        hash &= 0xFFFFFFFF
    return hash"
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_card, container, false);
    }","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_card, container, false);
    }"
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent != null) {
            buttonView.setImage(buttonContent.getImage());
            buttonView.setOnClickListener(buttonContent.getOnClickListener());
            buttonView.setVisibility(View.VISIBLE);
        } else {
            buttonView.setVisibility(View.GONE);
        }
    }","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent != null) {
            buttonView.setImage(buttonContent.getImage());
            buttonView.setOnClickListener(buttonContent.getOnClickListener());
            buttonView.setVisibility(View.VISIBLE);
        } else {
            buttonView.setVisibility(View.GONE);
        }
    }"
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    return mDescriptiveTextOnlyLayoutView;
}"
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(""New Title"");
    header.setIcon(R.drawable.new_icon);
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(""New Title"");
    header.setIcon(R.drawable.new_icon);
}"
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    return LayoutInflater.from(this).inflate(R.layout.text_block_layout, null);
}","private View getTextBlockLayoutView() {
    return LayoutInflater.from(this).inflate(R.layout.text_block_layout, null);
}"
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","import android.content.ComponentName;
import android.content.pm.PackageManager;

import org.jetbrains.annotations.NotNull;

public class MediaBrowserService {

    @NotNull
    public static ComponentName getMediaSource(@NotNull PackageManager packageManager, @NotNull String packageName) {
        return packageManager.getService(packageName, MediaBrowserService.class);
    }
}","import android.content.ComponentName;
import android.content.pm.PackageManager;

import org.jetbrains.annotations.NotNull;

public class MediaBrowserService {

    @NotNull
    public static ComponentName getMediaSource(@NotNull PackageManager packageManager, @NotNull String packageName) {
        return packageManager.getService(packageName, MediaBrowserService.class);
    }
}"
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if (customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        return true;
    }","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if (customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        return true;
    }"
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(context, componentName);
        ((Activity) context).finish();
    }","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(context, componentName);
        ((Activity) context).finish();
    }"
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        try {
            return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        } catch (Exception e) {
            Log.e(TAG, ""Error checking if activity is distraction optimized: "" + e.getMessage());
            return false;
        }
    }","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        try {
            return carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        } catch (Exception e) {
            Log.e(TAG, ""Error checking if activity is distraction optimized: "" + e.getMessage());
            return false;
        }
    }"
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=123""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }
        intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }
        return null;
    }","private Intent getMapsIntent() {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=123""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }
        intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0""));
        if (intent.resolveActivity(getPackageManager()) != null) {
            return intent;
        }
        return null;
    }"
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
    for (String cardName : cardNames) {
        try {
            Class<?> cardClass = Class.forName(cardName);
            Object cardInstance = cardClass.getDeclaredConstructor().newInstance();
            cards.add((HomeCard) cardInstance);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }
}","private void initializeCards() {
    for (String cardName : cardNames) {
        try {
            Class<?> cardClass = Class.forName(cardName);
            Object cardInstance = cardClass.getDeclaredConstructor().newInstance();
            if (HomeCard.class.isAssignableFrom(cardClass)) {
                cards.add((HomeCard) cardInstance);
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }
}"
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
        return;
    }

    List<TaskAppearedInfo> toRemove = new ArrayList<>();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        if (taskAppearedInfo.isMultiWindow()) {
            toRemove.add(taskAppearedInfo);
        }
    }

    taskAppearedInfos.removeAll(toRemove);
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
        return;
    }

    taskAppearedInfos.removeIf(TaskAppearedInfo::isMultiWindow);
}"
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    String mode = intent.getStringExtra(""mode"");
    if (mode != null) {
        mode = mode.toUpperCase();
        switch (mode) {
            case ""TRAIN"":
                mode = ""Training"";
                break;
            case ""TEST"":
                mode = ""Testing"";
                break;
            case ""VALIDATE"":
                mode = ""Validation"";
                break;
            case ""DEPLOY"":
                mode = ""Deployment"";
                break;
            default:
                mode = ""Unknown"";
                break;
        }
        title.setText(mode);
    }
}","private void updateMode() {
    String mode = intent.getStringExtra(""mode"");
    if (mode != null) {
        mode = mode.toUpperCase();
        switch (mode) {
            case ""TRAIN"":
                mode = ""Training"";
                break;
            case ""TEST"":
                mode = ""Testing"";
                break;
            case ""VALIDATE"":
                mode = ""Validation"";
                break;
            case ""DEPLOY"":
                mode = ""Deployment"";
                break;
            default:
                mode = ""Unknown"";
                break;
        }
        title.setText(mode);
    }
}"
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    return (Chronometer) findViewById(R.id.chronometer);
}","private Chronometer getChronometer() {
    return (Chronometer) findViewById(R.id.chronometer);
}"
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
        Bitmap blurredBitmap = Bitmap.createScaledBitmap(
                BitmapFactory.decodeResource(getResources(), R.drawable.background_image),
                (int) getResources().getDimension(R.dimen.media_layout_width),
                (int) getResources().getDimension(R.dimen.media_layout_height),
                false);
        ImageView imageView = new ImageView(this);
        imageView.setImageBitmap(blurredBitmap);
        return imageView;
    }","private View getMediaLayoutView() {
        Bitmap blurredBitmap = Bitmap.createScaledBitmap(
                BitmapFactory.decodeResource(getResources(), R.drawable.background_image),
                (int) getResources().getDimension(R.dimen.media_layout_width),
                (int) getResources().getDimension(R.dimen.media_layout_height),
                true);
        ImageView imageView = new ImageView(this);
        imageView.setImageBitmap(blurredBitmap);
        return imageView;
    }"
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    image.setAlpha(100);
    image.setColorFilter(0x80000000);
    image.setBounds(0, 0, getWidth(), getHeight());
    image.draw(getCanvas());
}","private void updateBackgroundImage(Drawable image) {
    image.setAlpha(100);
    image.setColorFilter(0x80000000);
    image.setBounds(0, 0, getWidth(), getHeight());
    image.draw(getCanvas());
}"
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
}"
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
        if (content.getStartTime() > 0) {
            content.startChronometer();
            content.showChronometer();
        } else {
            content.hideChronometer();
        }
    }","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
        if (content.getStartTime() > 0) {
            content.startChronometer();
            content.showChronometer();
        } else {
            content.hideChronometer();
        }
    }"
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>","public void onCallAdded(Call call) {
}"
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>","public void onCallRemoved(Call call) {
}"
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
}","void updateModelWithPhoneNumber(String number) {
}"
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
    muteButton = (ImageButton) findViewById(R.id.mute_button);
    endCallButton = (ImageButton) findViewById(R.id.end_call_button);
    dialpadButton = (ImageButton) findViewById(R.id.dialpad_button);
}","private void initializeAudioControls() {
    muteButton = (ImageButton) findViewById(R.id.mute_button);
    endCallButton = (ImageButton) findViewById(R.id.end_call_button);
    dialpadButton = (ImageButton) findViewById(R.id.dialpad_button);
}"
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (isAvailable()) {
        _listener.onAvailable();
    }
}
docs/cpp/dbus-cpp/dbus-cpp-api-reference.md
# DBus-CPP API Reference

## Overview

The DBus-CPP library provides a set of C++ classes and functions that allow you to interact with the D-Bus system. It provides a simple and easy-to-use API for both clients and servers.

## Classes

### `DBusConnection`

The `DBusConnection` class is the main class for interacting with the D-Bus system. It provides methods for connecting to a D-Bus session, sending and receiving messages, and managing connections.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3, const std::string &_methodName4)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3, const std::string &_methodName4, const std::string &_methodName5)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3, const std::string &_methodName4, const std::string &_methodName5, const std::string &_methodName6)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (isAvailable()) {
        _listener.onAvailable();
    }
}
docs/cpp/dbus-cpp/dbus-cpp-api-reference.md
# DBus-CPP API Reference

## Overview

The DBus-CPP library provides a set of C++ classes and functions that allow you to interact with the D-Bus system. It provides a simple and easy-to-use API for both clients and servers.

## Classes

### `DBusConnection`

The `DBusConnection` class is the main class for interacting with the D-Bus system. It provides methods for connecting to a D-Bus session, sending and receiving messages, and managing connections.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3, const std::string &_methodName4)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3, const std::string &_methodName4, const std::string &_methodName5)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2, const std::string &_methodName3, const std::string &_methodName4, const std::string &_methodName5, const std::string &_methodName6)`

Constructor for the `DBusConnection` class.

#### `DBusConnection(const std::string &_address, const std::string &_path, const std::string &_interface, const std::string &_objectPath, const std::string &_serviceName, const std::string &_methodName, const std::string &_methodName2"
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lk(exit_threads_mutex_);
    if (exit_threads_.find(conn) == exit_threads_.end()) {
        exit_threads_[conn].push_back(&t);
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lk(exit_threads_mutex_);
    if (exit_threads_.find(conn) == exit_threads_.end()) {
        exit_threads_[conn].push_back(&t);
    }
}"
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    auto it = std::find_if(watches_.begin(), watches_.end(),
                           [libdbusWatch](const auto& watch) {
                               return watch.first == libdbusWatch;
                           });
    if (it != watches_.end()) {
        auto& watch = it->second;
        if (watch.data == data) {
            watch.remove_callback();
            watches_.erase(it);
        }
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Find the first even number
    auto it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 2 == 0; });

    if (it != numbers.end()) {
        cout << ""The first even number is: "" << *it << endl;
    } else {
        cout << ""No even numbers found."" << endl;
    }

    // Find the first number greater than 5
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n > 5; });

    if (it != numbers.end()) {
        cout << ""The first number greater than 5 is: "" << *it << endl;
    } else {
        cout << ""No numbers greater than 5 found."" << endl;
    }

    // Find the first number divisible by 3
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 3 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 3 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 3 found."" << endl;
    }

    // Find the first number divisible by 5
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 5 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 5 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 5 found."" << endl;
    }

    // Find the first number divisible by 7
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 7 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 7 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 7 found."" << endl;
    }

    // Find the first number divisible by 11
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 11 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 11 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 11 found."" << endl;
    }

    // Find the first number divisible by 13
    it =","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    auto it = std::find_if(watches_.begin(), watches_.end(),
                           [libdbusWatch](const auto& watch) {
                               return watch.first == libdbusWatch;
                           });
    if (it != watches_.end()) {
        auto& watch = it->second;
        if (watch.data == data) {
            watch.remove_callback();
            watches_.erase(it);
        }
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Find the first even number
    auto it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 2 == 0; });

    if (it != numbers.end()) {
        cout << ""The first even number is: "" << *it << endl;
    } else {
        cout << ""No even numbers found."" << endl;
    }

    // Find the first number greater than 5
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n > 5; });

    if (it != numbers.end()) {
        cout << ""The first number greater than 5 is: "" << *it << endl;
    } else {
        cout << ""No numbers greater than 5 found."" << endl;
    }

    // Find the first number divisible by 3
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 3 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 3 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 3 found."" << endl;
    }

    // Find the first number divisible by 5
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 5 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 5 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 5 found."" << endl;
    }

    // Find the first number divisible by 7
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 7 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 7 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 7 found."" << endl;
    }

    // Find the first number divisible by 11
    it = find_if(numbers.begin(), numbers.end(), [](int n) { return n % 11 == 0; });

    if (it != numbers.end()) {
        cout << ""The first number divisible by 11 is: "" << *it << endl;
    } else {
        cout << ""No numbers divisible by 11 found."" << endl;
    }

    // Find the first number divisible by 13
    it ="
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch->isReady()) {
        libdbusWatch->start();
    } else {
        libdbusWatch->stop();
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for ("
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> lock(dbusObjectManagerMutex_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(*this);
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> lock(dbusObjectManagerMutex_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(*this);
        }
    }
    return dbusObjectManager_;
}"
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (serviceName.empty()) {
        return false;
    }

    std::lock_guard<std::mutex> itsLock(itsServicesMutex);
    auto it = itsServices.find(serviceName);
    if (it == itsServices.end()) {
        return false;
    }

    auto& service = it->second;
    if (service.refCount == 1) {
        itsServices.erase(it);
        return true;
    }

    service.refCount--;
    return true;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (serviceName.empty()) {
        return false;
    }

    std::lock_guard<std::mutex> itsLock(itsServicesMutex);
    auto it = itsServices.find(serviceName);
    if (it == itsServices.end()) {
        return false;
    }

    auto& service = it->second;
    if (service.refCount == 1) {
        itsServices.erase(it);
        return true;
    }

    service.refCount--;
    return true;
}"
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage message;
    DBusMessage* dbusMessage = _libdbusPendingCall->getReply();
    if (dbusMessage) {
        message = *dbusMessage;
    }
    return message;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    DBusMessage message;
    DBusMessage* dbusMessage = _libdbusPendingCall->getReply();
    if (dbusMessage) {
        message = *dbusMessage;
    }
    return message;
}"
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> itsLock(m_asyncHandlersMutex);
    for (auto it = m_asyncHandlers.begin(); it != m_asyncHandlers.end(); ++it) {
        delete *it;
    }
    m_asyncHandlers.clear();
}
docs/cpp/dbus-cpp/dbus-cpp-api-reference/classDBusConnection.html

#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <atomic>
#include <algorithm>
#include <cassert>
#include <chrono>
#include <functional>
#include <map>
#include <set>
#include <tuple>
#include <utility>
#include <stdexcept>
#include <sstream>
#include <iomanip>
#include <cstdint>
#include <cstring>
#include <limits>
#include <type_traits>
#include <tuple>
#include <tuple_hash>
#include <tuple_compare>
#include <tuple_size>
#include <tuple_element>
#include <tuple_size_v>
#include <tuple_element_t>
#include <tuple_element_indices_v>
#include <tuple_cat>
#include <tuple_construct>
#include <tuple_tie>
#include <tuple_apply>
#include <tuple_ref>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v>
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v>
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v>
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v>
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v>
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> itsLock(m_asyncHandlersMutex);
    for (auto it = m_asyncHandlers.begin(); it != m_asyncHandlers.end(); ++it) {
        delete *it;
    }
    m_asyncHandlers.clear();
}
docs/cpp/dbus-cpp/dbus-cpp-api-reference/classDBusConnection.html

#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <atomic>
#include <algorithm>
#include <cassert>
#include <chrono>
#include <functional>
#include <map>
#include <set>
#include <tuple>
#include <utility>
#include <stdexcept>
#include <sstream>
#include <iomanip>
#include <cstdint>
#include <cstring>
#include <limits>
#include <type_traits>
#include <tuple>
#include <tuple_hash>
#include <tuple_compare>
#include <tuple_size>
#include <tuple_element>
#include <tuple_size_v>
#include <tuple_element_t>
#include <tuple_cat>
#include <tuple_construct>
#include <tuple_tie>
#include <tuple_apply>
#include <tuple_ref>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v>
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v
#include <tuple_element_t>
#include <tuple_cat_v>
#include <tuple_construct_v>
#include <tuple_tie_v>
#include <tuple_apply_v>
#include <tuple_ref_v>
#include <tuple_size_v>
#include <tuple_element_indices_v
#include <tuple_element_t>
#include <tuple_cat"
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    for (auto& [tag, handlers] : itsSignalHandlers) {
        if (handlers.size() > 0) {
            for (auto& handler : handlers) {
                handler->signalStatus = true;
            }
        }
    }
}
docs/cpp/dbus-cpp/dbus-cpp-api-reference.md
# DBus-CPP API Reference

## Overview

The DBus-CPP library provides a set of C++ classes and functions that allow you to easily create and use DBus applications. The library is designed to be easy to use and to provide a high level of abstraction over the underlying DBus API.

## Classes

### `DBusConnection`

The `DBusConnection` class is the main class in the DBus-CPP library. It provides a connection to a DBus session or system bus.

#### `DBusConnection(const std::string& address)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2, const std::string& auth_mechanism_type_name_3)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2, const std::string& auth_mechanism_type_name_3, const std::string& auth_mechanism_type_name_4)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    for (auto& [tag, handlers] : itsSignalHandlers) {
        if (handlers.size() > 0) {
            for (auto& handler : handlers) {
                handler->signalStatus = true;
            }
        }
    }
}
docs/cpp/dbus-cpp/dbus-cpp-api-reference.md
# DBus-CPP API Reference

## Overview

The DBus-CPP library provides a set of C++ classes and functions that allow you to easily create and use DBus applications. The library is designed to be easy to use and to provide a high level of abstraction over the underlying DBus API.

## Classes

### `DBusConnection`

The `DBusConnection` class is the main class in the DBus-CPP library. It provides a connection to a DBus session or system bus.

#### `DBusConnection(const std::string& address)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2, const std::string& auth_mechanism_type_name_3)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2, const std::string& auth_mechanism_type_name_3, const std::string& auth_mechanism_type_name_4)`

Constructor.

#### `DBusConnection(const std::string& address, const std::string& user, const std::string& password, const std::string& auth_mechanism, const std::string& auth_mechanism_type, const std::string& auth_mechanism_type_name, const std::string& auth_mechanism_type_name_2"
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsConnections.find(_connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}

#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Factory {
public:
    Factory() = default;
    ~Factory() = default;

    void releaseConnection(const ConnectionId_t& _connectionId);

private:
    std::mutex itsMutex;
    std::vector<ConnectionId_t> itsConnections;
};

void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsConnections.begin();
    while (it != itsConnections.end()) {
        if (*it == _connectionId) {
            it = itsConnections.erase(it);
        } else {
            ++it;
        }
    }
}

int main() {
    Factory factory;
    ConnectionId_t id1 = 1;
    ConnectionId_t id2 = 2;
    ConnectionId_t id3 = 3;

    factory.itsConnections.push_back(id1);
    factory.itsConnections.push_back(id2);
    factory.itsConnections.push_back(id3);

    std::cout << ""Initial connections: "";
    for (const auto& id : factory.itsConnections) {
        std::cout << id << "" "";
    }
    std::cout << std::endl;

    factory.releaseConnection(id2);

    std::cout << ""Connections after releasing id2: "";
    for (const auto& id : factory.itsConnections) {
        std::cout << id << "" "";
    }
    std::cout << std::endl;

    factory.releaseConnection(id4);

    std::cout << ""Connections after releasing id4: "";
    for (const auto& id : factory.itsConnections) {
        std::cout << id << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Factory {
public:
    Factory() = default;
    ~Factory() = default;

    void releaseConnection(const ConnectionId_t& _connectionId);

private:
    std::mutex itsMutex;
    std::vector<ConnectionId_t> itsConnections;
};

void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find(itsConnections.begin(), itsConnections.end(), _connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}

int main() {
    Factory factory;
    ConnectionId_t id1 = 1;
    ConnectionId_t id2 = 2;
    ConnectionId_t id3 = 3;

    factory.itsConnections.push_back(id1);
    factory.itsConnections.push_back(id2);
    factory.itsConnections","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = itsConnections.find(_connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}
#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Factory {
public:
    Factory() = default;
    ~Factory() = default;

    void releaseConnection(const ConnectionId_t& _connectionId);

private:
    std::mutex itsMutex;
    std::vector<ConnectionId_t> itsConnections;
};

void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find(itsConnections.begin(), itsConnections.end(), _connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}

int main() {
    Factory factory;
    ConnectionId_t id1 = 1;
    ConnectionId_t id2 = 2;
    ConnectionId_t id3 = 3;

    factory.itsConnections.push_back(id1);
    factory.itsConnections.push_back(id2);
    factory.itsConnections.push_back(id3);

    std::cout << ""Initial connections: "";
    for (const auto& id : factory.itsConnections) {
        std::cout << id << "" "";
    }
    std::cout << std::endl;

    factory.releaseConnection(id2);

    std::cout << ""Connections after releasing id2: "";
    for (const auto& id : factory.itsConnections) {
        std::cout << id << "" "";
    }
    std::cout << std::endl;

    factory.releaseConnection(id4);

    std::cout << ""Connections after releasing id4: "";
    for (const auto& id : factory.itsConnections) {
        std::cout << id << "" "";
    }
    std::cout << std::endl;

    return 0;
}
#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Factory {
public:
    Factory() = default;
    ~Factory() = default;

    void releaseConnection(const ConnectionId_t& _connectionId);

private:
    std::mutex itsMutex;
    std::vector<ConnectionId_t> itsConnections;
};

void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find(itsConnections.begin(), itsConnections.end(), _connectionId);
    if (it != itsConnections.end()) {
        itsConnections.erase(it);
    }
}

int main() {
    Factory factory;
    ConnectionId_t id1 = 1;
    ConnectionId_t id2 = 2;
    ConnectionId_t id3 = 3;

    factory.itsConnections.push_back(id1);
    factory.itsConnections.push_back(id2);
    factory.itsConnections.push_back(id3);

    std::cout << ""Initial connections"
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getType() == DBusMessage::Type::MethodCall) {
        if (dbusMessage.getInterface() == ""org.freedesktop.DBus"") {
            if (dbusMessage.getMethodName() == ""NameOwnerChanged"") {
                onNameOwnerChanged(dbusMessage);
            } else if (dbusMessage.getMethodName() == ""NameOwnerCleared"") {
                onNameOwnerCleared(dbusMessage);
            }
        }
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getType() == DBusMessage::Type::MethodCall) {
        if (dbusMessage.getInterface() == ""org.freedesktop.DBus"") {
            if (dbusMessage.getMethodName() == ""NameOwnerChanged"") {
                onNameOwnerChanged(dbusMessage);
            } else if (dbusMessage.getMethodName() == ""NameOwnerCleared"") {
                onNameOwnerCleared(dbusMessage);
            }
        }
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    sort(names.begin(), names.end());

    // Print the sorted names
    cout << ""Sorted names:"" << endl;
    for (const string& name : names) {
        cout << name << endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#"
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    _status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances = itsAvailableServiceInstances;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    _status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances = itsAvailableServiceInstances;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    // Sort the names alphabetically
    std::sort(names.begin(), names.end());

    // Print the sorted names
    std::cout << ""Sorted names:"" << std::endl;
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::"
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    std::shared_ptr<DBusConnection> connection = std::make_shared<DBusConnection>();
    if (!connection->connect()) {
        _callStatus = CallStatus::CONNECTION_ERROR;
        return;
    }

    std::shared_ptr<DBusObject> object = connection->getObject(DBUS_SERVICE_NAME, DBUS_PATH);
    if (!object) {
        _callStatus = CallStatus::OBJECT_NOT_FOUND;
        return;
    }

    std::shared_ptr<DBusMethod> method = object->getMethod(DBUS_METHOD_NAME);
    if (!method) {
        _callStatus = CallStatus::METHOD_NOT_FOUND;
        return;
    }

    std::shared_ptr<DBusMessage> message = method->call(_instance);
    if (!message) {
        _callStatus = CallStatus::CALL_ERROR;
        return;
    }

    _callStatus = CallStatus::SUCCESS;
    _availabilityStatus = message->getReply();
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    std::shared_ptr<DBusConnection> connection = std::make_shared<DBusConnection>();
    if (!connection->connect()) {
        _callStatus = CallStatus::CONNECTION_ERROR;
        return;
    }

    std::shared_ptr<DBusObject> object = connection->getObject(DBUS_SERVICE_NAME, DBUS_PATH);
    if (!object) {
        _callStatus = CallStatus::OBJECT_NOT_FOUND;
        return;
    }

    std::shared_ptr<DBusMethod> method = object->getMethod(DBUS_METHOD_NAME);
    if (!method) {
        _callStatus = CallStatus::METHOD_NOT_FOUND;
        return;
    }

    std::shared_ptr<DBusMessage> message = method->call(_instance);
    if (!message) {
        _callStatus = CallStatus::CALL_ERROR;
        return;
    }

    _callStatus = CallStatus::SUCCESS;
    _availabilityStatus = message->getReply();
}"
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    _service->setAvailabilityStatus(DBusService::AvailabilityStatus::Unavailable);
}
docs/cpp/dbus/DBusInstanceAvailabilityStatusChangedEvent.md
# DBusInstanceAvailabilityStatusChangedEvent

## Description

The `DBusInstanceAvailabilityStatusChangedEvent` class is a signal handler that is triggered when a service's corresponding D-Bus interface is removed.

## Public Methods

### `DBusInstanceAvailabilityStatusChangedEvent(DBusService* service)`

Constructor.

### `void onInterfacesRemovedSignal(const DBusMessage &_message)`

Notifies that a service is unavailable when its corresponding D-Bus interface is removed.
docs/cpp/dbus/DBusService.md
# DBusService

## Description

The `DBusService` class represents a D-Bus service.

## Public Methods

### `DBusService(const std::string &_serviceName, const std::string &_path, const std::string &_interfaceName, const std::string &_objectPath)`

Constructor.

### `DBusService(const std::string &_serviceName, const std::string &_path, const std::string &_interfaceName, const std::string &_objectPath, DBusConnection &_connection)`

Constructor.

### `DBusService(const DBusService &_service)`

Copy constructor.

### `DBusService& operator=(const DBusService &_service)`

Assignment operator.

### `virtual ~DBusService()`

Destructor.

### `std::string getServiceName()`

Returns the service name.

### `std::string getPath()`

Returns the path.

### `std::string getInterfaceName()`

Returns the interface name.

### `std::string getObjectPath()`

Returns the object path.

### `DBusConnection* getConnection()`

Returns the connection.

### `void setAvailabilityStatus(DBusService::AvailabilityStatus status)`

Sets the availability status.

### `DBusService::AvailabilityStatus getAvailabilityStatus()`

Returns the availability status.

### `void registerObject(const std::string &_interfaceName, const std::string &_objectPath, const std::string &_methodName, DBusMethodHandler &_methodHandler)`

Registers a method handler.

### `void registerSignal(const std::string &_interfaceName, const std::string &_signalName, DBusSignalHandler &_signalHandler)`

Registers a signal handler.

### `void unregisterObject(const std::string &_interfaceName, const std::string &_objectPath, const std::string &_methodName)`

Unregisters a method handler.

### `void unregisterSignal(const std::string &_interfaceName, const std::string &_signalName)`

Unregisters a signal handler.

### `void callMethod(const std::string &_interfaceName, const std::string &_objectPath, const std::string &_methodName, const std::vector<DBusVariant> &_parameters, DBusMethodHandler &_methodHandler)`

Calls a method.

### `void emitSignal(const std::string &_interfaceName, const std::string &_signalName, const std::vector<DBusVariant> &_parameters, DBusSignalHandler &_signalHandler)`

Emits a signal.

### `void emitSignal(const std::string &_interfaceName, const std::string &_signalName, const std::vector<DBusVariant> &_parameters)`

Emits a signal.

### `void emitSignal(const std::string &_interfaceName, const std::string &_signalName)`

Emits a signal.

### `void emitSignal(const std::string &_interfaceName,","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    _service->setAvailabilityStatus(DBusService::AvailabilityStatus::Unavailable);
}
docs/cpp/dbus/DBusConnection.md
# DBusConnection

## Description

The `DBusConnection` class represents a D-Bus connection.

## Public Methods

### `DBusConnection(DBusConnection &_parent, DBusAddress &_address, DBusConnection &_connection)`

Constructor.

### `DBusConnection(DBusConnection &_parent, DBusAddress &_address)`

Constructor.

### `DBusConnection(DBusConnection &_parent)`

Constructor.

### `DBusConnection(DBusConnection &_parent, DBusConnection &_connection, DBusAddress &_address)`

Constructor.

### `DBusConnection(DBusConnection &_parent, DBusConnection &_connection)`

Constructor.

### `virtual ~DBusConnection()`

Destructor.

### `DBusConnection& operator=(const DBusConnection &_connection)`

Assignment operator.

### `DBusConnection& operator=(DBusConnection &&_connection)`

Move assignment operator.

### `DBusConnection(DBusConnection &&_connection)`

Move constructor.

### `DBusAddress getAddress()`

Returns the address.

### `DBusAddress getParentAddress()`

Returns the parent address.

### `DBusConnection* getParent()`

Returns the parent connection.

### `DBusConnection* getChild()`

Returns the child connection.

### `DBusConnection* getPeer()`

Returns the peer connection.

### `DBusConnection* getProxy()`

Returns the proxy connection.

### `DBusConnection* getProxyParent()`

Returns the proxy parent connection.

### `DBusConnection* getProxyChild()`

Returns the proxy child connection.

### `DBusConnection* getProxyPeer()`

Returns the proxy peer connection.

### `DBusConnection* getProxyProxy()`

Returns the proxy proxy connection.

### `DBusConnection* getProxyProxyParent()`

Returns the proxy proxy parent connection.

### `DBusConnection* getProxyProxyChild()`

Returns the proxy proxy child connection.

### `DBusConnection* getProxyProxyPeer()`

Returns the proxy proxy peer connection.

### `DBusConnection* getProxyProxyProxy()`

Returns the proxy proxy proxy connection.

### `DBusConnection* getProxyProxyProxyParent()`

Returns the proxy proxy proxy parent connection.

### `DBusConnection* getProxyProxyProxyChild()`

Returns the proxy proxy proxy child connection.

### `DBusConnection* getProxyProxyProxyPeer()`

Returns the proxy proxy proxy peer connection.

### `DBusConnection* getProxyProxyProxyProxy()`

Returns the proxy proxy proxy proxy connection.

### `DBusConnection* getProxyProxyProxyProxyParent()`

Returns the proxy proxy proxy proxy parent connection.

### `DBusConnection* getProxyProxyProxyProxyChild()`

Returns the proxy proxy proxy proxy child connection.

### `DBusConnection* getProxyProxyProxyProxyPeer()`

Returns the proxy proxy proxy proxy peer connection.

### `DBusConnection* getProxyProxyProxyProxyProxy()`

Returns the proxy proxy proxy proxy proxy connection.

### `DBusConnection* getProxyProxyProxyProxyProxyParent()`

Returns the proxy proxy proxy proxy proxy parent connection.

### `DBusConnection* getProxyProxyProxyProxyProxyChild()`

Returns the proxy proxy proxy proxy proxy child connection.

### `DBusConnection* getProxyProxyProxyProxyProxyPeer()`

Returns the proxy proxy proxy proxy proxy peer connection.

### `DBusConnection* getProxyProxyProxyProxyProxyProxy()`

Returns the proxy proxy proxy"
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto itsAvailabilityStatusChangedListeners = itsAvailabilityStatusChangedListeners.lock();
    if (itsAvailabilityStatusChangedListeners) {
        for (auto& listener : *itsAvailabilityStatusChangedListeners) {
            listener->onInterfaceAvailabilityStatusChanged(_objectPath, _interfaceName, _availability);
        }
    }
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Find the first even number
    auto it = std::find_if(numbers.begin(), numbers.end(), [](int n) { return n % 2 == 0; });

    if (it != numbers.end()) {
        std::cout << ""The first even number is: "" << *it << std::endl;
    } else {
        std::cout << ""No even numbers found."" << std::endl;
    }

    // Find the first number greater than 5
    auto it2 = std::find_if(numbers.begin(), numbers.end(), [](int n) { return n > 5; });

    if (it2 != numbers.end()) {
        std::cout << ""The first number greater than 5 is: "" << *it2 << std::endl;
    } else {
        std::cout << ""No numbers greater than 5 found."" << std::endl;
    }

    // Find the first number divisible by 3
    auto it3 = std::find_if(numbers.begin(), numbers.end(), [](int n) { return n % 3 == 0; });

    if (it3 != numbers.end()) {
        std::cout << ""The first number divisible by 3 is: "" << *it3 << std::endl;
    } else {
        std::cout << ""No numbers divisible by 3 found."" << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Find the first even number
    auto it = std::find_if(numbers.begin(), numbers.end(), [](int n) { return n % 2 == 0; });

    if (it != numbers.end()) {
        std::cout << ""The first even number is: "" << *it << std::endl;
    } else {
        std::cout << ""No even numbers found."" << std::endl;
    }

    // Find the first number greater than 5
    auto it2 = std::find_if(numbers.begin(), numbers.end(), [](int n) { return n > 5; });

    if (it2 != numbers.end()) {
        std::cout << ""The first number greater than 5 is: "" << *it2 << std::endl;
    } else {
        std::cout << ""No numbers greater than 5 found","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto itsAvailabilityStatusChangedListeners = itsAvailabilityStatusChangedListeners.lock();
    if (itsAvailabilityStatusChangedListeners) {
        for (auto& listener : *itsAvailabilityStatusChangedListeners) {
            listener->onInterfaceAvailabilityStatusChanged(_objectPath, _interfaceName, _availability);
        }
    }
}"
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    itsListeners.push_back(_listener);
    itsSubscriptions.push_back(_subscription);
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    std::cout << ""Original vector: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    // Sort the vector in ascending order
    std::sort(numbers.begin(), numbers.end());

    std::cout << ""Sorted vector (ascending): "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    // Sort the vector in descending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted vector (descending): "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    std::cout << ""Original vector: "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    // Sort the vector alphabetically
    std::sort(names.begin(), names.end());

    std::cout << ""Sorted vector (alphabetical): "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    std::cout << ""Original vector: "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    // Sort the vector alphabetically
    std::sort(names.begin(), names.end(), std::greater<std::string>());

    std::cout << ""Sorted vector (reverse alphabetical): "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    std::cout << ""Original vector: "";
    for (const std::string& name : names) {
        std::","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    itsListeners.push_back(_listener);
    itsSubscriptions.push_back(_subscription);
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    std::cout << ""Original vector: "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    // Sort the vector alphabetically
    std::sort(names.begin(), names.end());

    std::cout << ""Sorted vector (alphabetical): "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    std::cout << ""Original vector: "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    // Sort the vector alphabetically
    std::sort(names.begin(), names.end(), std::greater<std::string>());

    std::cout << ""Sorted vector (reverse alphabetical): "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    std::cout << ""Original vector: "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    // Sort the vector alphabetically
    std::sort(names.begin(), names.end());

    std::cout << ""Sorted vector (alphabetical): "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};

    std::cout << ""Original vector: "";
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    // Sort the vector alphabetically
    std::sort(names.begin(), names.end(), std::greater<std::string>());

    std::cout << ""Sorted vector (reverse alphabetical): "";
    for (const std::string& name : names) {
        std::cout << name"
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if(itsListeners.begin(), itsListeners.end(),
                           [&_listener, &_subscription](const Listener& listener) {
                               return listener.itsListener == _listener && listener.itsSubscription == _subscription;
                           });
    if (it != itsListeners.end()) {
        itsListeners.erase(it);
    }
}

#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Listener {
public:
    Listener(const std::string& listener, const std::string& subscription)
        : itsListener(listener), itsSubscription(subscription) {}

    std::string itsListener;
    std::string itsSubscription;
};

class DBusProxyStatusEvent {
public:
    void onListenerRemoved(const Listener& _listener, const Subscription _subscription);

private:
    std::vector<Listener> itsListeners;
    std::mutex itsMutex;
};

void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if(itsListeners.begin(), itsListeners.end(),
                           [&_listener, &_subscription](const Listener& listener) {
                               return listener.itsListener == _listener && listener.itsSubscription == _subscription;
                           });
    if (it != itsListeners.end()) {
        itsListeners.erase(it);
    }
}

int main() {
    DBusProxyStatusEvent event;
    Listener listener1(""listener1"", ""subscription1"");
    Listener listener2(""listener2"", ""subscription2"");
    Listener listener3(""listener1"", ""subscription1"");

    event.itsListeners.push_back(listener1);
    event.itsListeners.push_back(listener2);
    event.itsListeners.push_back(listener3);

    event.onListenerRemoved(listener1, ""subscription1"");
    event.onListenerRemoved(listener2, ""subscription2"");
    event.onListenerRemoved(listener3, ""subscription3"");

    std::cout << ""Listeners after removal:"" << std::endl;
    for (const auto& listener : event.itsListeners) {
        std::cout << ""Listener: "" << listener.itsListener << "", Subscription: "" << listener.itsSubscription << std::endl;
    }

    return 0;
}

#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Listener {
public:
    Listener(const std::string& listener, const std::string& subscription)
        : itsListener(listener), itsSubscription(subscription) {}

    std::string itsListener;
    std::string itsSubscription;
};

class DBusProxyStatusEvent {
public:
    void onListenerRemoved(const Listener& _listener, const Subscription _subscription);

private:
    std::vector<Listener> itsListeners;
    std::mutex itsMutex;
};

void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if(","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if(itsListeners.begin(), itsListeners.end(),
                           [&_listener, &_subscription](const Listener& listener) {
                               return listener.itsListener == _listener && listener.itsSubscription == _subscription;
                           });
    if (it != itsListeners.end()) {
        itsListeners.erase(it);
    }
}

#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Listener {
public:
    Listener(const std::string& listener, const std::string& subscription)
        : itsListener(listener), itsSubscription(subscription) {}

    std::string itsListener;
    std::string itsSubscription;
};

class DBusProxyStatusEvent {
public:
    void onListenerRemoved(const Listener& _listener, const Subscription _subscription);

private:
    std::vector<Listener> itsListeners;
    std::mutex itsMutex;
};

void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if(itsListeners.begin(), itsListeners.end(),
                           [&_listener, &_subscription](const Listener& listener) {
                               return listener.itsListener == _listener && listener.itsSubscription == _subscription;
                           });
    if (it != itsListeners.end()) {
        itsListeners.erase(it);
    }
}

int main() {
    DBusProxyStatusEvent event;
    Listener listener1(""listener1"", ""subscription1"");
    Listener listener2(""listener2"", ""subscription2"");
    Listener listener3(""listener1"", ""subscription1"");

    event.itsListeners.push_back(listener1);
    event.itsListeners.push_back(listener2);
    event.itsListeners.push_back(listener3);

    event.onListenerRemoved(listener1, ""subscription1"");
    event.onListenerRemoved(listener2, ""subscription2"");
    event.onListenerRemoved(listener3, ""subscription3"");

    std::cout << ""Listeners after removal:"" << std::endl;
    for (const auto& listener : event.itsListeners) {
        std::cout << ""Listener: "" << listener.itsListener << "", Subscription: "" << listener.itsSubscription << std::endl;
    }

    return 0;
}

#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>

class Listener {
public:
    Listener(const std::string& listener, const std::string& subscription)
        : itsListener(listener), itsSubscription(subscription) {}

    std::string itsListener;
    std::string itsSubscription;
};

class DBusProxyStatusEvent {
public:
    void onListenerRemoved(const Listener& _listener, const Subscription _subscription);

private:
    std::vector<Listener> itsListeners;
    std::mutex itsMutex;
};

void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> itsLock(itsMutex);
    auto it = std::find_if("
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    _connection->addSignalStateHandler(_handler, _subscription);
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date"", ""fig""};

    // Sort the words alphabetically
    std::sort(words.begin(), words.end());

    // Print the sorted words
    std::cout << ""Sorted words: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    // Find the index of ""banana""
    auto it = std::find(words.begin(), words.end(), ""banana"");
    if (it != words.end()) {
        std::cout << ""Index of banana: "" << std::distance(words.begin(), it) << std::endl;
    } else {
        std::cout << ""banana not found"" << std::endl;
    }

    // Remove ""cherry""
    words.erase(std::remove(words.begin(), words.end(), ""cherry""), words.end());

    // Print the updated words
    std::cout << ""Words after removing cherry: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date"", ""fig""};

    // Sort the words alphabetically
    std::sort(words.begin(), words.end());

    // Print the sorted words
    std::cout << ""Sorted words: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    // Find the index of ""banana""
    auto it = std::find(words.begin(), words.end(), ""banana"");
    if (it != words.end()) {
        std::cout << ""Index of banana: "" << std::distance(words.begin(), it) << std::endl;
    } else {
        std::cout << ""banana not found"" << std::endl;
    }

    // Remove ""cherry""
    words.erase(std::remove(words.begin(), words.end(), ""cherry""), words.end());

    // Print the updated words
    std::cout << ""Words after removing cherry: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date"", ""fig""};

    // Sort the words alphabetically
    std::sort(words.begin(), words.end());

    // Print the sorted words
    std::cout << ""Sorted words: "";
    for (const auto& word","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    _connection->addSignalStateHandler(_handler, _subscription);
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date"", ""fig""};

    // Sort the words alphabetically
    std::sort(words.begin(), words.end());

    // Print the sorted words
    std::cout << ""Sorted words: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    // Find the index of ""banana""
    auto it = std::find(words.begin(), words.end(), ""banana"");
    if (it != words.end()) {
        std::cout << ""Index of banana: "" << std::distance(words.begin(), it) << std::endl;
    } else {
        std::cout << ""banana not found"" << std::endl;
    }

    // Remove ""cherry""
    words.erase(std::remove(words.begin(), words.end(), ""cherry""), words.end());

    // Print the updated words
    std::cout << ""Words after removing cherry: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date"", ""fig""};

    // Sort the words alphabetically
    std::sort(words.begin(), words.end());

    // Print the sorted words
    std::cout << ""Sorted words: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    // Find the index of ""banana""
    auto it = std::find(words.begin(), words.end(), ""banana"");
    if (it != words.end()) {
        std::cout << ""Index of banana: "" << std::distance(words.begin(), it) << std::endl;
    } else {
        std::cout << ""banana not found"" << std::endl;
    }

    // Remove ""cherry""
    words.erase(std::remove(words.begin(), words.end(), ""cherry""), words.end());

    // Print the updated words
    std::cout << ""Words after removing cherry: "";
    for (const auto& word : words) {
        std::cout << word << "" "";
    }
    std::cout << std::endl;

    return 0;
}

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date"", ""fig""};

    // Sort the words alphabetically
    std::sort(words.begin(), words.end());

    // Print the sorted words
    std::cout << ""Sorted words: "";
    for (const auto& word"
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> addresses;
        for (const auto &_address : _availableServiceInstances) {
            addresses.push_back(_address.toString());
        }
        _call(addresses);
    }
}
docs/api/cpp/commonapi/commonapi_examples.md
# CommonAPI Examples

## Hello World

This example shows how to call a simple hello world method on a remote object.

### Client

```cpp
#include <iostream>
#include <memory>
#include <string>

#include <CommonAPI/CommonAPI.hpp>

int main() {
    std::shared_ptr<CommonAPI::DBusConnection> connection = CommonAPI::DBusConnection::getDBusConnection();
    std::shared_ptr<CommonAPI::Proxy> proxy = connection->getProxy(""org.freedesktop.DBus.Introspectable"", ""/org/freedesktop/DBus.Introspectable"");

    std::shared_ptr<CommonAPI::MethodCall> methodCall = proxy->createMethodCall(""Introspect"");
    std::shared_ptr<CommonAPI::Reply> reply = methodCall->call();

    if (reply->getStatus() == CommonAPI::CallStatus::SUCCESS) {
        std::string interface = reply->getReplyParameter(""DBusInterface"");
        std::cout << ""Interface: "" << interface << std::endl;
    } else {
        std::cout << ""Error: "" << reply->getErrorMessage() << std::endl;
    }

    return 0;
}
```

### Server

```cpp
#include <iostream>
#include <memory>
#include <string>

#include <CommonAPI/CommonAPI.hpp>

int main() {
    std::shared_ptr<CommonAPI::DBusConnection> connection = CommonAPI::DBusConnection::getDBusConnection();
    std::shared_ptr<CommonAPI::DBusObject> object = connection->createDBusObject(""org.freedesktop.DBus.Introspectable"", ""/org/freedesktop/DBus.Introspectable"");

    std::shared_ptr<CommonAPI::DBusMethod> method = object->createDBusMethod(""Introspect"");
    method->setReturnParameter(""DBusInterface"", ""org.freedesktop.DBus.Introspectable"");

    std::shared_ptr<CommonAPI::DBusInterface> interface = object->createDBusInterface(""org.freedesktop.DBus.Introspectable"");
    interface->addMethod(method);

    object->registerObject();

    std::cout << ""Server started"" << std::endl;

    return 0;
}
```

## Hello World with Callback

This example shows how to call a simple hello world method on a remote object with a callback.

### Client

```cpp
#include <iostream>
#include <memory>
#include <string>

#include <CommonAPI/CommonAPI.hpp>

int main() {
    std::shared_ptr<CommonAPI::DBusConnection> connection = CommonAPI::DBusConnection::getDBusConnection();
    std::shared_ptr<CommonAPI::Proxy> proxy = connection->getProxy(""org.freedesktop.","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> addresses;
        for (const auto &_address : _availableServiceInstances) {
            addresses.push_back(_address.toString());
        }
        _call(addresses);
    }
}
docs/api/cpp/commonapi/commonapi_examples.md
# CommonAPI Examples

## Hello World

This example shows how to call a simple hello world method on a remote object.

### Client

```cpp
#include <iostream>
#include <memory>
#include <string>

#include <CommonAPI/CommonAPI.hpp>

int main() {
    std::shared_ptr<CommonAPI::DBusConnection> connection = CommonAPI::DBusConnection::getDBusConnection();
    std::shared_ptr<CommonAPI::Proxy> proxy = connection->getProxy(""org.freedesktop.DBus.Introspectable"", ""/org/freedesktop/DBus.Introspectable"");

    std::shared_ptr<CommonAPI::MethodCall> methodCall = proxy->createMethodCall(""Introspect"");
    std::shared_ptr<CommonAPI::Reply> reply = methodCall->call();

    if (reply->getStatus() == CommonAPI::CallStatus::SUCCESS) {
        std::string interface = reply->getReplyParameter(""DBusInterface"");
        std::cout << ""Interface: "" << interface << std::endl;
    } else {
        std::cout << ""Error: "" << reply->getErrorMessage() << std::endl;
    }

    return 0;
}
```

### Server

```cpp
#include <iostream>
#include <memory>
#include <string>

#include <CommonAPI/CommonAPI.hpp>

int main() {
    std::shared_ptr<CommonAPI::DBusConnection> connection = CommonAPI::DBusConnection::getDBusConnection();
    std::shared_ptr<CommonAPI::DBusObject> object = connection->createDBusObject(""org.freedesktop.DBus.Introspectable"", ""/org/freedesktop/DBus.Introspectable"");

    std::shared_ptr<CommonAPI::DBusMethod> method = object->createDBusMethod(""Introspect"");
    method->setReturnParameter(""DBusInterface"", ""org.freedesktop.DBus.Introspectable"");

    std::shared_ptr<CommonAPI::DBusInterface> interface = object->createDBusInterface(""org.freedesktop.DBus.Introspectable"");
    interface->addMethod(method);

    object->registerObject();

    std::cout << ""Server started"" << std::endl;

    return 0;
}
```

## Hello World with Callback

This example shows how to call a simple hello world method on a remote object with a callback.

### Client

```cpp
#include <iostream>
#include <memory>
#include <string>

#include <CommonAPI/CommonAPI.hpp>

int main() {
    std::shared_ptr<CommonAPI::DBusConnection> connection = CommonAPI::DBusConnection::getDBusConnection();
    std::shared_ptr<CommonAPI::Proxy> proxy = connection->getProxy(""org.freedesktop."
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getType() == DBusMessage::Type::MethodCall) {
        if (dbusMessage.getInterface() == ""org.freedesktop.DBus.Introspectable"") {
            if (dbusMessage.getMethodName() == ""Introspect"") {
                return handleIntrospection(dbusMessage);
            }
        }
        return handleMethodCall(dbusMessage);
    } else if (dbusMessage.getType() == DBusMessage::Type::MethodReturn) {
        return handleMethodReturn(dbusMessage);
    } else if (dbusMessage.getType() == DBusMessage::Type::Signal) {
        return handleSignal(dbusMessage);
    } else if (dbusMessage.getType() == DBusMessage::Type::Error) {
        return handleError(dbusMessage);
    }
    return false;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.getType() == DBusMessage::Type::MethodCall) {
        if (dbusMessage.getInterface() == ""org.freedesktop.DBus.Introspectable"") {
            if (dbusMessage.getMethodName() == ""Introspect"") {
                return handleIntrospection(dbusMessage);
            }
        }
        return handleMethodCall(dbusMessage);
    } else if (dbusMessage.getType() == DBusMessage::Type::MethodReturn) {
        return handleMethodReturn(dbusMessage);
    } else if (dbusMessage.getType() == DBusMessage::Type::Signal) {
        return handleSignal(dbusMessage);
    } else if (dbusMessage.getType() == DBusMessage::Type::Error) {
        return handleError(dbusMessage);
    }
    return false;
}"
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerPath.isValid()) {
        if (dbusInterfaceHandlerPath.isStandardInterface()) {
            if (standardInterfaceHandlers_.find(dbusInterfaceHandlerPath) == standardInterfaceHandlers_.end()) {
                standardInterfaceHandlers_[dbusInterfaceHandlerPath] = std::move(dbusInterfaceHandler);
                return true;
            }
        } else {
            if (nonStandardInterfaceHandlers_.find(dbusInterfaceHandlerPath) == nonStandardInterfaceHandlers_.end()) {
                nonStandardInterfaceHandlers_[dbusInterfaceHandlerPath] = std::move(dbusInterfaceHandler);
                return true;
            }
        }
    }
    return false;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (dbusInterfaceHandlerPath.isValid()) {
        if (dbusInterfaceHandlerPath.isStandardInterface()) {
            if (standardInterfaceHandlers_.find(dbusInterfaceHandlerPath) == standardInterfaceHandlers_.end()) {
                standardInterfaceHandlers_[dbusInterfaceHandlerPath] = std::move(dbusInterfaceHandler);
                return true;
            }
        } else {
            if (nonStandardInterfaceHandlers_.find(dbusInterfaceHandlerPath) == nonStandardInterfaceHandlers_.end()) {
                nonStandardInterfaceHandlers_[dbusInterfaceHandlerPath] = std::move(dbusInterfaceHandler);
                return true;
            }
        }
    }
    return false;
}"
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> itsLock(registeredObjectsMutex_);
    if (registeredObjects_.count(ifpath)) {
        return false;
    }
    registeredObjects_[ifpath] = std::move(handler);
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> itsLock(registeredObjectsMutex_);
    if (registeredObjects_.count(ifpath)) {
        return false;
    }
    registeredObjects_[ifpath] = std::move(handler);
    return true;
}"
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
}","void send_positive_reset_response(uint8_t reset_type) {
}"
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 0) {
        return;
    }

    if (data[0] == 0x01) {
        system(""reboot"");
    }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
    if (len == 0) {
        return;
    }

    if (data[0] == 0x01) {
        system(""reboot"");
    }
}"
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
}","void send_request_download_response() {
}"
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[8];
    response[0] = 0x78;
    response[1] = 0x04;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = block_sequence_counter;
    response[7] = 0x00;
    send_raw_data(response, 8);
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
    uint8_t response[8];
    response[0] = 0x78;
    response[1] = 0x04;
    response[2] = 0x00;
    response[3] = 0x00;
    response[4] = 0x00;
    response[5] = 0x00;
    response[6] = block_sequence_counter;
    response[7] = 0x00;
    send_raw_data(response, 8);
}"
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uint8_t payload[2];
    payload[0] = (uint8_t)(routine_id >> 8);
    payload[1] = (uint8_t)(routine_id & 0xFF);
    iso_tp_send_response(ISO_TP_POSITIVE_RESPONSE, payload, 2, result);
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
    uint8_t payload[2];
    payload[0] = (uint8_t)(routine_id >> 8);
    payload[1] = (uint8_t)(routine_id & 0xFF);
    iso_tp_send_response(ISO_TP_POSITIVE_RESPONSE, payload, 2, result);
}"
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
}","static void send_transer_exit_positive_response() {
}"
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    return can_id >> 8;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
    return can_id >> 8;
}"
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;

	if (filter_id < 0) {
		/* Remove all filters */
		memset(data->rx_filters, 0, sizeof(data->rx_filters));
		memset(data->rx_filters_mask, 0, sizeof(data->rx_filters_mask));
	} else {
		data->rx_filters[filter_id] = 0;
		data->rx_filters_mask[filter_id] = 0;
	}
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;

	if (filter_id < 0) {
		/* Remove all filters */
		memset(data->rx_filters, 0, sizeof(data->rx_filters));
		memset(data->rx_filters_mask, 0, sizeof(data->rx_filters_mask));
	} else {
		data->rx_filters[filter_id] = 0;
		data->rx_filters_mask[filter_id] = 0;
	}
}"
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
	return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
	return true;
}"
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
}"
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
	return 0;
}","static int hv_shield_init(const struct device* dev) {
	return 0;
}"
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	return 0;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	return 0;
}"
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
	uint8_t reg = enable ? 0x0f : 0xf0;
	reg = (reg & 0x0f) << 4 | (reg & 0xf0) >> 4;
	return -1;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
	uint8_t reg = enable ? 0x0f : 0xf0;
	reg = (reg & 0x0f) << 4 | (reg & 0xf0) >> 4;
	return -1;
}"
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
	struct can_frame can_frame;
	struct can_device_config *cfg = (struct can_device_config *)user_data;

	can_frame.id = frame->id;
	can_frame.dlc = frame->dlc;
	memcpy(can_frame.data, frame->data, frame->dlc);

	can_device_send_frame(cfg->device, &can_frame);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
	struct can_frame can_frame;
	struct can_device_config *cfg = (struct can_device_config *)user_data;

	can_frame.id = frame->id;
	can_frame.dlc = frame->dlc;
	memcpy(can_frame.data, frame->data, frame->dlc);

	can_device_send_frame(cfg->device, &can_frame);
}"
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
    return 0;
}"
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
	can_router_register_static_routes();
	return 0;
}","static int can_router_sysinit() {
	can_router_register_static_routes();
	return 0;
}"
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	return gpio_set_mask(port, mask, value);
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	return gpio_set_mask(port, mask, value);
}"
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
	return dev->cb_free_slots;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
	return dev->cb_free_slots;
}"
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	return 0;
}"
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	struct al_device *al_dev = dev->data;

	if (!al_dev) {
		return -EINVAL;
	}

	if (al_dev->outgoing_cb[frame_id] != NULL) {
		return -EBUSY;
	}

	al_dev->outgoing_cb[frame_id] = callback;
	al_dev->outgoing_cb_data[frame_id] = user_data;
	al_dev->outgoing_frame_size[frame_id] = frame_size;

	return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	struct al_device *al_dev = dev->data;

	if (!al_dev) {
		return -EINVAL;
	}

	if (al_dev->outgoing_cb[frame_id] != NULL) {
		return -EBUSY;
	}

	al_dev->outgoing_cb[frame_id] = callback;
	al_dev->outgoing_cb_data[frame_id] = user_data;
	al_dev->outgoing_frame_size[frame_id] = frame_size;

	return 0;
}"
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler, uint32_t table_id)
{
	if (scheduler == NULL) {
		return -EINVAL;
	}

	if (table_id >= scheduler->num_tables) {
		return -EINVAL;
	}

	scheduler->active_table = table_id;
	scheduler->current_position = 0;

	return 0;
}
docs/api/linux/abstract_lin_scheduler.md
# Abstract LIN Scheduler

## Overview

The abstract LIN scheduler is a generic scheduler that can be used to schedule LIN messages. It is not tied to any specific hardware or software implementation.

## API

### `abstract_lin_scheduler_init()`

Initializes the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.
*   `num_tables` - The number of schedule tables to allocate.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL or `num_tables` is 0

**Example**

```c
struct abstract_lin_scheduler scheduler;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if (ret < 0) {
	/* Error */
}
```

### `abstract_lin_scheduler_deinit()`

Deinitializes the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL

**Example**

```c
struct abstract_lin_scheduler scheduler;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if (ret < 0) {
	/* Error */
}

abstract_lin_scheduler_deinit(&scheduler);
```

### `abstract_lin_scheduler_add_table()`

Adds a schedule table to the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.
*   `table_id` - The ID of the schedule table to add.
*   `table` - A pointer to the schedule table structure.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL or `table_id` is out of range

**Example**

```c
struct abstract_lin_scheduler scheduler;
struct abstract_lin_schedule_table table;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if (ret < 0) {
	/* Error */
}

abstract_lin_schedule_table_init(&table, 10);

ret = abstract_lin_scheduler_add_table(&scheduler, 0, &table);
if (ret < 0) {
	/* Error */
}
```

### `abstract_lin_scheduler_remove_table()`

Removes a schedule table from the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.
*   `table_id` - The ID of the schedule table to remove.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL or `table_id` is out of range

**Example**

```c
struct abstract_lin_scheduler scheduler;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if (","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler, uint32_t table_id)
{
	if (scheduler == NULL) {
		return -EINVAL;
	}

	if (table_id >= scheduler->num_tables) {
		return -EINVAL;
	}

	scheduler->active_table = table_id;
	scheduler->current_position = 0;

	return 0;
}
docs/api/linux/abstract_lin_scheduler.md
# Abstract LIN Scheduler

## Overview

The abstract LIN scheduler is a generic scheduler that can be used to schedule LIN messages. It is not tied to any specific hardware or software implementation.

## API

### `abstract_lin_scheduler_init()`

Initializes the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.
*   `num_tables` - The number of schedule tables to allocate.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL or `num_tables` is 0

**Example**

```c
struct abstract_lin_scheduler scheduler;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if (ret < 0) {
	/* Error */
}
```

### `abstract_lin_scheduler_deinit()`

Deinitializes the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL

**Example**

```c
struct abstract_lin_scheduler scheduler;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if (ret < 0) {
	/* Error */
}

abstract_lin_scheduler_deinit(&scheduler);
```

### `abstract_lin_scheduler_add_table()`

Adds a schedule table to the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.
*   `table_id` - The ID of the schedule table to add.
*   `table` - A pointer to the schedule table structure.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL or `table_id` is out of range

**Example**

```c
struct abstract_lin_scheduler scheduler;
struct abstract_lin_schedule_table table;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if (ret < 0) {
	/* Error */
}

abstract_lin_schedule_table_init(&table, 10);

ret = abstract_lin_scheduler_add_table(&scheduler, 0, &table);
if (ret < 0) {
	/* Error */
}
```

### `abstract_lin_scheduler_remove_table()`

Removes a schedule table from the abstract LIN scheduler.

**Parameters**

*   `scheduler` - A pointer to the abstract LIN scheduler structure.
*   `table_id` - The ID of the schedule table to remove.

**Returns**

*   0 on success
*   -EINVAL if `scheduler` is NULL or `table_id` is out of range

**Example**

```c
struct abstract_lin_scheduler scheduler;
int ret;

ret = abstract_lin_scheduler_init(&scheduler, 10);
if ("
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->is_running = 0;
}
docs/api/abstract_lin_scheduler_disable.md
# abstract_lin_scheduler_disable

## Description

Stops the LIN scheduler from processing its current schedule table

## Arguments

*   `sched` - The handle to the scheduler to disable.
docs/api/abstract_lin_scheduler_enable.md
# abstract_lin_scheduler_enable

## Description

Starts the LIN scheduler to process its current schedule table

## Arguments

*   `sched` - The handle to the scheduler to enable.
docs/api/abstract_lin_scheduler_init.md
# abstract_lin_scheduler_init

## Description

Initializes the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to initialize.
docs/api/abstract_lin_scheduler_register_message.md
# abstract_lin_scheduler_register_message

## Description

Registers a new message with the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to register the message with.
*   `msg` - The message to register.
docs/api/abstract_lin_scheduler_unregister_message.md
# abstract_lin_scheduler_unregister_message

## Description

Unregisters a message from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the message from.
*   `msg` - The message to unregister.
docs/api/abstract_lin_scheduler_unregister_message_id.md
# abstract_lin_scheduler_unregister_message_id

## Description

Unregisters a message from the LIN scheduler by its ID

## Arguments

*   `sched` - The handle to the scheduler to unregister the message from.
*   `msg_id` - The ID of the message to unregister.
docs/api/abstract_lin_scheduler_unregister_message_id_list.md
# abstract_lin_scheduler_unregister_message_id_list

## Description

Unregisters a list of messages from the LIN scheduler by their IDs

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `msg_ids` - The list of IDs of the messages to unregister.
docs/api/abstract_lin_scheduler_unregister_message_list.md
# abstract_lin_scheduler_unregister_message_list

## Description

Unregisters a list of messages from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `msg_list` - The list of messages to unregister.
docs/api/abstract_lin_scheduler_unregister_message_list_length.md
# abstract_lin_scheduler_unregister_message_list_length

## Description

Unregisters a list of messages from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `msg_list` - The list of messages to unregister.
*   `length` - The length of the list of messages to unregister.
docs/api/abstract_lin_scheduler_unregister_message_list_length_list.md
# abstract_lin_scheduler_unregister_message_list_length_list

## Description

Unregisters a list of messages from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
    sched->is_running = 0;
}
docs/api/abstract_lin_scheduler_enable.md
# abstract_lin_scheduler_enable

## Description

Starts the LIN scheduler to process its current schedule table

## Arguments

*   `sched` - The handle to the scheduler to enable.
docs/api/abstract_lin_scheduler_init.md
# abstract_lin_scheduler_init

## Description

Initializes the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to initialize.
docs/api/abstract_lin_scheduler_register_message.md
# abstract_lin_scheduler_register_message

## Description

Registers a new message with the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to register the message with.
*   `msg` - The message to register.
docs/api/abstract_lin_scheduler_unregister_message.md
# abstract_lin_scheduler_unregister_message

## Description

Unregisters a message from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the message from.
*   `msg` - The message to unregister.
docs/api/abstract_lin_scheduler_unregister_message_id.md
# abstract_lin_scheduler_unregister_message_id

## Description

Unregisters a message from the LIN scheduler by its ID

## Arguments

*   `sched` - The handle to the scheduler to unregister the message from.
*   `msg_id` - The ID of the message to unregister.
docs/api/abstract_lin_scheduler_unregister_message_id_list.md
# abstract_lin_scheduler_unregister_message_id_list

## Description

Unregisters a list of messages from the LIN scheduler by their IDs

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `msg_ids` - The list of IDs of the messages to unregister.
docs/api/abstract_lin_scheduler_unregister_message_list.md
# abstract_lin_scheduler_unregister_message_list

## Description

Unregisters a list of messages from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `msg_list` - The list of messages to unregister.
docs/api/abstract_lin_scheduler_unregister_message_list_length.md
# abstract_lin_scheduler_unregister_message_list_length

## Description

Unregisters a list of messages from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `msg_list` - The list of messages to unregister.
*   `length` - The length of the list of messages to unregister.
docs/api/abstract_lin_scheduler_unregister_message_list_length_list.md
# abstract_lin_scheduler_unregister_message_list_length_list

## Description

Unregisters a list of messages from the LIN scheduler

## Arguments

*   `sched` - The handle to the scheduler to unregister the messages from.
*   `msg_list` - The list of messages to unregister.
*   `length` - The length of the list of messages to unregister.
*   `list` - The list of message IDs to unregister.
docs/api/abstract_lin_scheduler_unregister_message_list_list."

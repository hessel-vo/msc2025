id,language,reference,generated,generated_rci
1,python,"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes","""Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes”","""Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's subtypes list”"
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Validates that a given value conforms to a specified datatype by checking if it can be cast to the datatype's corresponding Python type constructor”","""Validates that a given value conforms to a specified datatype by attempting to cast it to the datatype's corresponding Python type constructor”"
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a given value or list of values are all within the specified range for a signed or unsigned integer of a given bit width”","""Checks if a given value or list of values are all within the specified range for a signed or unsigned integer of a given bit width”"
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Searches a list of predefined datatypes for a match to the input 'datatype' and returns a tuple containing the datatype name, a callable, and a list of subtypes if found, otherwise returns None”","""Searches a list of predefined datatypes for a match to the input 'datatype' and returns a tuple containing the datatype name, a callable, and a list of subtypes if found, otherwise returns None”"
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN) prefix, excluding the FQN itself.”","""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name (FQN) prefix, excluding the FQN itself and any datatypes that begin with the FQN.”"
6,python,Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name,"""Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name”","""Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name”"
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type into an ApiGearType object, handling basic types, arrays, and custom types by mapping them to their corresponding ApiGearBasicType values or creating a new ApiGearType with a modified name”","""Converts a string representation of a data type into an ApiGearType object, handling basic types, arrays, and custom types by mapping them to their corresponding ApiGearBasicType values or creating a new ApiGearType with a modified name”"
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Generates an `ApiGearProperty` object from a `VSSNode` and a specified datatype, populating its type and description if available.”","""Generates an `ApiGearProperty` object from a `VSSNode` and a specified datatype, populating its type and description if available, or returns `None` if the datatype is not supported.”"
9,python,"Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects","""Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects”","""Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects”"
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges multiple VSpec files and their included files into a single VSpec object, logging the process and raising an exception if no specifications are loaded”","""Loads and merges multiple VSpec files and their included files into a single VSpec object, logging the process and raising an exception if no specifications are loaded”"
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively merges the contents of the 'update' dictionary into the 'base' dictionary, overwriting existing keys with the 'update' values and merging nested dictionaries”","""Recursively merges the contents of the 'update' dictionary into the 'base' dictionary, overwriting existing non-dictionary values with the 'update' values and merging nested dictionaries”"
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates that a given string is a valid 'constUID' by checking if it matches the hexadecimal pattern '0x[0-9A-Fa-f]{8}' and returns the string if valid, otherwise returns None”","""Validates that a given string is a valid 'constUID' by checking if it matches the hexadecimal pattern '0x[0-9A-Fa-f]{8}' and returns the string if valid, otherwise returns None”"
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Creates a VSSRaw object from a dictionary, attempts to resolve it, and returns the object (either resolved or incomplete) after logging any errors encountered during resolution”","""Creates a VSSRaw object from a dictionary, attempts to resolve it, and returns the object (either resolved or incomplete) after logging any errors encountered during resolution”"
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Validates that all provided values are valid datatypes by checking them against a predefined list of valid datatypes and raising an assertion error if any are invalid”","""Validates that all provided values are valid datatypes by checking them against a predefined list of valid datatypes and raising an assertion error if any are invalid”"
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Recursively traverses a VSS node tree, extracting specified attributes from each node and formatting them into a string representation of the tree with attribute values”","""Recursively traverses a VSS node tree, extracting specified attributes from each node and formatting them into a string representation of the tree with attribute values”"
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Recursively traverses up the VSS node tree until an instance root node is found, returning the root node and the depth of the traversal”","""Recursively traverses up the VSS node tree until an instance root node is found, returning the root node and the depth of the traversal from the starting node”"
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a VSSDataBranch object, returning 0 if no instance children are found”","""Recursively counts the depth of instance children within a VSSDataBranch object, returning 0 if no instance children are found or if the current node is not an instance child”"
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Filters a list of node IDs to return only those whose expected parent is the specified name”","""Filters a list of node IDs to return only those whose expected parent is the specified name”"
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Safely retrieves an attribute from an object, returning a default value if the attribute is not found or is None”","""Safely retrieves an attribute from an object, returning a default value if the attribute is not found”"
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Recursively traverses a VSS node tree, generating a protobuf definition for each VSSDataBranch node by writing a message block containing the protobuf definitions of its children to a file descriptor”","""Recursively traverses a VSS node tree, generating a protobuf definition for each VSSDataBranch node by writing a message block containing the protobuf definitions of its children to a file descriptor, and also generating import statements for any referenced datatypes”"
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Recursively traverses a VSS node tree to identify and collect all instance names within each instance root, returning a dictionary mapping instance root fully qualified names to a list of their child instance names”","""Recursively traverses a VSS node tree to identify and collect all instance names within each instance root, returning a dictionary mapping instance root fully qualified names to a list of their child instance names”"
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Checks if a given VSS node is a leaf node by verifying if its 'data' attribute is an instance of the VSSDataDatatype class”","""Checks if a given VSS node is a leaf node by verifying if its 'data' attribute is an instance of the VSSDataDatatype class”"
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a VSS node is a branch and if it is not an instance, returning True if both conditions are met, otherwise returning False”","""Checks if a VSS node is a branch and if it is not an instance, returning True if both conditions are met, otherwise returning False”"
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a VSSNode represents an instance of a VSSDataBranch by examining its 'data' attribute and the 'is_instance' property of the VSSDataBranch object it contains”","""Checks if a VSSNode represents an instance of a VSSDataBranch by examining its 'data' attribute and the 'is_instance' property of the VSSDataBranch object it contains”"
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string using a specified prime and bitwise operations”","""Calculates a 32-bit FNV-1a hash value for a given byte string using a specified prime and bitwise operations”"
26,java,"Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with both a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`","""Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with both a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`”","""Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`”"
27,java,"Lazily initializes and returns an `AudioFragment`, bidirectionally linking it with its presenter upon first creation","""Lazily initializes and returns an `AudioFragment`, bidirectionally linking it with its presenter upon first creation”","""Lazily initializes and returns an `AudioFragment`, setting its presenter and receiving a presenter from the fragment upon first creation”"
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates a layout, finds the `card_name` and `card_icon` views within it, and returns the inflated root view”","""Inflates a layout, finds the `card_name` and `card_icon` views within it, and returns the inflated root view”"
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button.”","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button.”"
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its child views”","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its child views for later use”"
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the visibility of the root view and the text and icon of the card title with the provided `CardHeader` data within the main thread of the activity”","""Updates the visibility of the root view and the text and icon of the card title with the provided `CardHeader` data on the main thread of the activity”"
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Lazily initializes and returns a `View` from a `ViewStub`, retrieving its child views (`mTextBlock` and `mTextBlockTapForMore`) for later use”","""Lazily initializes and returns a `View` from a `ViewStub`, retrieving its child views (`mTextBlock` and `mTextBlockTapForMore`) for later use”"
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Queries the package manager for the default `MediaBrowserService` component name within a given package, returning a `ComponentName` if found, otherwise returning `null`”","""Queries the package manager for the default `MediaBrowserService` component name within a given package, returning a `ComponentName` if found, otherwise returning `null`”"
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a given `ComponentName` should be added to launchables based on a list of hidden apps, custom media components, and specified app types, returning `false` if the component is hidden or a custom media service that should not be shown, otherwise returning `true`”","""Determines whether a given `ComponentName` should be added to launchables based on a list of hidden apps, custom media components, and specified app types, returning `false` if the component is hidden or a custom media service that should not be shown, otherwise returning `true`”"
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Selects a media source and finishes the current activity if it is an activity, handling `CarNotConnectedException` if the car is not connected”","""Selects a media source and finishes the current activity if it is an activity, handling `CarNotConnectedException` if the car is not connected”"
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a given activity within a specified package is distraction optimized using the `CarPackageManager`, handling potential `CarNotConnectedException` errors”","""Checks if a given activity within a specified package is distraction optimized using the `CarPackageManager`, returning `false` if a `CarNotConnectedException` occurs”"
37,java,"Initializes a `TaskViewManager` to asynchronously create a `TaskView`, which upon creation is configured with a listener, added to the parent `ViewGroup`, and stored as a member variable","""Initializes a `TaskViewManager` to asynchronously create a `TaskView`, which upon creation is configured with a listener, added to the parent `ViewGroup`, and stored as a member variable”","""Initializes a `TaskViewManager` to asynchronously create a `TaskView`, configuring it with a listener, adding it to the parent `ViewGroup`, and storing it as a member variable”"
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Constructs an `Intent` to launch a maps application, prioritizing those specified in `config_homeCardPreferredMapActivities` while falling back to the system default if no preferred activity is found or if the URI is invalid”","""Constructs an `Intent` to launch a maps application, prioritizing those specified in `config_homeCardPreferredMapActivities` while falling back to the system default if no preferred activity is found or if the URI is invalid, and ensuring the preferred activity is not the default system maps app”"
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding their corresponding `CardView` fragments to the fragment manager”","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding their corresponding `CardView` fragments to the fragment manager”"
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Iterates through a list of `TaskAppearedInfo` objects, removes any tasks with a multi-window windowing mode from the `ActivityTaskManager`, and logs a debug message for each removed task.”","""Iterates through a list of `TaskAppearedInfo` objects, removes any tasks with a multi-window windowing mode from the `ActivityTaskManager`, and logs a debug message for each removed task.”"
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Parses the application mode from the intent, sets the activity title, and updates the toolbar title accordingly”","""Parses the application mode from the intent and updates the activity and toolbar titles based on the parsed mode”"
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Lazily initializes and returns a `Chronometer` and its separator view from the layout, storing them for later use”","""Lazily initializes and returns a `Chronometer` and its separator view from the layout, storing them for later use”"
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Lazily initializes and returns a `View` from a `ViewStub` inflating a media layout, retrieving its title and subtitle views, and initializing the media control bar with the presenter”","""Lazily initializes and returns a `View` from a `ViewStub` inflating a media layout, retrieving its title and subtitle views, and initializing the media control bar with the presenter”"
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the background image with a transition animation if the card size is valid”","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the background image with a transition animation if the card size is valid”"
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Sets the visibility of the `MediaLayoutView` to visible and updates the text of the `MediaTitle` and `MediaSubtitle` views with the provided `title` and `subtitle` respectively.”","""Sets the visibility of the `MediaLayoutView` to visible and updates the text of the `MediaTitle` and `MediaSubtitle` views with the provided `title` and `subtitle` respectively.”"
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Conditionally displays a chronometer and separator based on the start time of a `DescriptiveTextWithControlsView`, updating the chronometer's base and starting it if the start time is positive”","""Conditionally displays a chronometer and separator based on the start time of a `DescriptiveTextWithControlsView`, updating the chronometer's base and starting it if the start time is positive”"
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback to a given `Call` object to receive updates about its state.”","""Registers a callback to a given `Call` object to receive updates about its state.”"
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback for the removed call.”","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback for the removed call.”"
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and other UI elements, and then notifies the presenter that the model has been updated”","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and other UI elements, and then notifies the presenter that the model has been updated”"
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes three `DescriptiveTextWithControlsView.Control` objects representing mute, end call, and dialpad buttons, each configured with an icon and a corresponding action to be performed when clicked.”","""Initializes three `DescriptiveTextWithControlsView.Control` objects representing mute, end call, and dialpad buttons, each configured with an icon and a corresponding action to be performed when clicked, using the `InCallService` and `CurrentCall` objects.”"
51,cpp,"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails","""Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails”","""Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails”"
52,cpp,"Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID","""Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID”","""Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, and sets the destination to the current client's D-Bus ID”"
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a listener with `AvailabilityStatus::AVAILABLE` if the D-Bus connection is currently connected, otherwise ignoring the provided subscription information”","""Notifies a listener with `AvailabilityStatus::AVAILABLE` if the D-Bus connection is currently connected, ignoring the provided subscription information”"
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Registers a thread to be joined upon the exit of a D-Bus connection, ensuring the thread is added to a vector of threads to be joined if the connection is still active”","""Registers a thread to be joined upon the exit of a D-Bus connection, adding it to a vector of threads to be joined if the connection is still active”"
55,cpp,Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method,"""Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method”","""Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method”"
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Removes a D-Bus watch by retrieving its associated `WatchContext` data, stopping the watch if it's ready, and clearing the watch's data in the underlying D-Bus library”","""Removes a D-Bus watch by retrieving its associated `WatchContext` data, stopping the watch if it's ready, and clearing the watch's data in the underlying D-Bus library”"
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Handles D-Bus watch events by either initializing a `DBusWatch` object and starting its monitoring or stopping the watch and removing its associated data if it's already initialized and not ready to be watched”","""Handles D-Bus watch events by either initializing a `DBusWatch` object and starting its monitoring or stopping the watch and removing its associated data if it's already initialized and not ready to be watched, using a `WatchContext` to manage the watch's state and dependencies”"
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Lazily creates and returns a `DBusObjectManager` shared pointer, ensuring thread-safe initialization by using a mutex to protect access to the `dbusObjectManager_` member variable”","""Lazily creates and returns a `DBusObjectManager` shared pointer, ensuring thread-safe initialization by using a mutex to protect access to the `dbusObjectManager_` member variable and only creating it if it doesn't already exist”"
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a D-Bus service name by decrementing its reference count, and if the count reaches zero, calls `dbus_bus_release_name` to release the name from the D-Bus bus, returning `true` on success and `false` if the service name was not found or the release operation failed”","""Releases a D-Bus service name by decrementing its reference count, and if the count reaches zero, calls `dbus_bus_release_name` to release the name from the D-Bus bus, returning `true` if the name was successfully released and `false` otherwise”"
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a `DBusPendingCall` (a C-style D-Bus pending call) into a `DBusMessage` object, extracting the reply from the pending call and returning a new `DBusMessage` instance”","""Converts a `DBusPendingCall` (a C-style D-Bus pending call) into a `DBusMessage` object, extracting the reply from the pending call and returning a new `DBusMessage` instance, while ensuring the underlying `DBusMessage`'s reference count is not incremented”"
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector by first moving them to a local vector, then iterating and deleting each handler.”","""Deletes all `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector by moving them to a local vector and then iterating to delete each handler.”"
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through a copy of the `signalStateHandlers_` map, calling the `onSpecificError` method of each handler for each signal tag it is registered for, to notify handlers of successful signal reception”","""Iterates through a copy of the `signalStateHandlers_` map, calling the `onSpecificError` method of each handler for each signal tag it is registered for, to notify handlers of successful signal reception”"
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Removes a D-Bus connection from the `connections_` map using a provided connection ID, ensuring thread safety with a recursive mutex lock”","""Removes a D-Bus connection from the `connections_` map using a provided connection ID, ensuring thread safety with a recursive mutex lock”"
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Handles D-Bus messages received by a `DBusInstanceAvailabilityStatusChangedEvent` signal handler, dispatching to the appropriate event handler method based on whether the message indicates interfaces were added or removed”","""Handles D-Bus messages received by a `DBusInstanceAvailabilityStatusChangedEvent` signal handler, dispatching to the appropriate event handler method based on whether the message indicates interfaces were added or removed”"
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves a list of available D-Bus service instances from a D-Bus proxy, populating a `std::vector` with their addresses and setting a `CommonAPI::CallStatus` to `SUCCESS` if the operation completes successfully”","""Retrieves a list of available D-Bus service instances from a D-Bus proxy, populating a `std::vector` with their addresses and setting a `CommonAPI::CallStatus` to `SUCCESS` if the operation completes successfully”"
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Retrieves the availability status of a D-Bus service instance, translating a CommonAPI address to a D-Bus address and checking if the instance is alive in the D-Bus registry, setting the `AvailabilityStatus` accordingly and returning a `CallStatus::SUCCESS`”","""Retrieves the availability status of a D-Bus service instance, translating a CommonAPI address to a D-Bus address and checking if the instance is alive in the D-Bus registry, setting the `AvailabilityStatus` accordingly and returning a `CallStatus::SUCCESS` if the lookup succeeds.”"
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Processes a D-Bus signal indicating the removal of interfaces, iterating through the provided interface names and notifying the `DBusInstanceAvailabilityStatusChangedEvent` if the removed interface matches the one being observed, updating its availability status to `NOT_AVAILABLE`”","""Processes a D-Bus signal indicating the removal of interfaces, iterating through the provided interface names and notifying the `DBusInstanceAvailabilityStatusChangedEvent` if the removed interface matches the one being observed, updating its availability status to `NOT_AVAILABLE` if the proxy still exists”"
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Notifies listeners of a change in the availability status of a D-Bus interface by translating a D-Bus address to a CommonAPI address and then calling the `notifyListeners` method with the translated address and the new availability status”","""Notifies listeners of a change in the availability status of a D-Bus interface by translating a D-Bus address to a CommonAPI address and then calling the `notifyListeners` method with the translated address and the new availability status”"
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Adds a listener to the `DBusProxyStatusEvent` and pushes a function to the main loop to notify the listener when the proxy's status changes, using a `weak_ptr` to ensure the proxy still exists”","""Adds a listener to the `DBusProxyStatusEvent` and pushes a function to the main loop to notify the listener when the proxy's status changes, using a `weak_ptr` to ensure the proxy still exists”"
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a listener from the `listeners_` map, iterating through the map and erasing the entry corresponding to the provided subscription if found, while ensuring thread safety with a recursive mutex”","""Removes a listener from the `listeners_` map, iterating through the map and erasing the entry corresponding to the provided subscription if found, while ensuring thread safety with a recursive mutex”"
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a `DBusProxyConnection::DBusSignalHandler` to the connection's signal state handler list, associating it with a given subscription ID”","""Adds a `DBusProxyConnection::DBusSignalHandler` to the connection's signal state handler list, associating it with a given subscription ID”"
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available instances of a D-Bus proxy, translating the vector of `DBusAddress` objects to a vector of strings and passing the status and translated instances to the provided callback function”","""Handles the asynchronous callback for retrieving available instances of a D-Bus proxy, translating the vector of `DBusAddress` objects to a vector of strings and passing the status and translated instances to the provided callback function”"
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles incoming D-Bus messages by looking up the corresponding `DBusInterfaceHandler` in a table, calling its `onInterfaceDBusMessage` method if found, or handling `org.freedesktop.DBus.Introspectable` messages directly, returning `true` if the message was handled and `false` otherwise”","""Handles incoming D-Bus messages by looking up the corresponding `DBusInterfaceHandler` in a table, calling its `onInterfaceDBusMessage` method if found, or handling `org.freedesktop.DBus.Introspectable` messages directly, returning `true` if the message was handled and `false` otherwise, while also logging errors if the object path or interface name are null”"
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a `DBusInterfaceHandler` to a table of registered D-Bus handlers, keyed by `DBusInterfaceHandlerPath`, returning `true` if the handler was successfully added or already exists (for specific interfaces), and `false` otherwise”","""Adds a `DBusInterfaceHandler` to a table of registered D-Bus handlers, keyed by `DBusInterfaceHandlerPath`, returning `true` if the handler was successfully added or already exists (for `org.freedesktop.DBus.ObjectManager` or `org.freedesktop.DBus.Properties` interfaces), and `false` otherwise”"
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a `DBusInterfaceHandler` to a table of registered objects, keyed by `DBusInterfaceHandlerPath`, ensuring that the handler is not already present and updating the associated vector if it is”","""Adds a `DBusInterfaceHandler` to a table of registered objects, keyed by `DBusInterfaceHandlerPath`, ensuring that the handler is not already present and updating the associated vector if it is”"
76,c,"Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
77,c,"Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”"
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS positive response for an ECU reset request—containing the reset type—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS positive response for an ECU reset request—containing the reset type—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”"
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles a UDS ECU Reset request by validating the message length, determining the reset type (hard or soft), sending a corresponding positive or negative response, and initiating a system reboot for hard resets while logging debug information”","""Handles a UDS ECU Reset request by validating the message length, determining the reset type (hard or soft), sending a corresponding positive or negative response, and initiating a system reboot for hard resets”"
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Constructs and sends a 4-byte UDS positive response for a Request Download request—containing the positive response code and a block size of 258 bytes—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 4-byte UDS positive response for a Request Download request—containing the positive response code and a block size of 258 bytes—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”"
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS positive response for a Transfer Data request—containing the block sequence counter—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS positive response for a Transfer Data request—containing the block sequence counter—over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Constructs and sends a 5-byte UDS positive response for a Routine Control request—containing the routine ID and a result code—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 5-byte UDS positive response for a Routine Control request—containing the routine ID and a result code—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”"
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 1-byte UDS positive response for a Request Transfer Exit request over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 1-byte UDS positive response for a Request Transfer Exit request over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
84,c,"Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input","""Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input”","""Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input”"
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Iterates through a lookup table (`id_mapping`) to find the index corresponding to a given CAN ID, returning the index if found or 0xff if the ID is not present in the table”","""Iterates through a lookup table (`id_mapping`) to find the index corresponding to a given CAN ID, returning the index if found or 0xff if the ID is not present in the table”"
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a CAN message filter by setting the corresponding callback function pointer in the `incoming_callbacks` array to NULL, either for a specific filter ID or for all translatable addresses”","""Removes a CAN message filter by setting the corresponding callback function pointer in the `incoming_callbacks` array to NULL, either for a specific filter ID or for all translatable addresses”"
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a kernel message queue, copies its contents into a `lin_frame` structure, and then calls a user-provided callback function to transmit the frame via CAN, logging debug information and returning `true` on success or `false` if the message queue is empty”","""Retrieves a LIN frame from a kernel message queue, copies its contents into a `lin_frame` structure, and then calls a user-provided callback function to transmit the frame via CAN, logging debug information”"
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Translates incoming LIN frames to CAN frames by mapping the LIN ID to a corresponding CAN ID, then calls a registered callback function with the translated CAN frame and associated user data”","""Translates incoming LIN frames to CAN frames by mapping the LIN ID to a corresponding CAN ID, then calls a registered callback function with the translated CAN frame and associated user data”"
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device's internal registers, updating the shield state, and enabling the output, returning an error code if any of these operations fail”","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device's internal registers, updating the shield state, and enabling the output, returning an error code if any of these operations fail”"
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the gain value for a specified DAC channel (0 or 1) within the `hv_shield_data_t` structure, then calls the `_hv_shield_update` function to apply the change, returning an error if the DAC channel is invalid”","""Sets the gain value for a specified DAC channel (0 or 1) within the `hv_shield_data_t` structure, then calls the `_hv_shield_update` function to apply the change, returning an error if the DAC channel is invalid or if the update fails”"
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Sets the enable state of a GPIO output pin (0-31) on the HV shield device, adjusting the index to match the register layout, and updates the device's registers accordingly, returning -EINVAL if the index is out of range”","""Sets the enable state of a GPIO output pin (0-31) on the HV shield device, adjusting the index to match the register layout, and updates the device's registers accordingly, returning -EINVAL if the index is out of range”"
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes a CAN frame received on a specified device to another device by attempting to send the frame using `can_send` with a callback function for transmission completion, logging a warning if the send fails and a debug message if successful”","""Routes a CAN frame received on a specified device to another device by attempting to send the frame using `can_send` with a callback function for transmission completion, logging a warning if the send fails and a debug message if successful”"
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a specified number of CAN router entries by adding corresponding receive filters to the CAN driver, using a callback function to forward received messages to their designated destination, and returning an error code if any registration fails”","""Registers a specified number of CAN router entries by adding corresponding receive filters to the CAN driver, using a callback function to forward received messages to their designated destination, and returning an error code if any registration fails”"
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Iterates through a statically defined array of CAN router tables, registering each table's entries with the CAN router subsystem, and returning an error if any registration fails”","""Iterates through a statically defined array of CAN router tables, registering each table's entries with the CAN router subsystem, and returning an error if any registration fails”"
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Iterates through a bitmask of GPIO pins, setting the corresponding pins on the specified port to the given value using the `gpio_pin_set` function, logging an error if any pin setting fails”","""Iterates through a bitmask of GPIO pins, setting the corresponding pins on the specified port to the given value using the `gpio_pin_set` function, returning an error code if any pin setting fails”"
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Retrieves the number of available callback slots in the abstract LIN driver, storing the result in the provided `free_slots` pointer and returning 0 on success or -EINVAL if the pointer is NULL”","""Retrieves the number of available callback slots in the abstract LIN driver, storing the result in the provided `free_slots` pointer and returning 0 on success or -EINVAL if the pointer is NULL”"
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a specific LIN frame (identified by its ID and size) is received, storing the callback and associated user data in a lookup table managed by the abstract LIN driver, returning an error code if the input parameters are invalid or if the callback table is full”","""Registers a callback function to be invoked when a specific LIN frame (identified by its ID and size) is received, storing the callback and associated user data in a lookup table managed by the abstract LIN driver, returning an error code if the input parameters are invalid or if the callback table is full”"
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers an outgoing callback function for a specific LIN frame ID and size within a device's abstract LIN data structure, returning an error code if the callback is invalid or the frame ID/size is out of range, or if memory allocation fails”","""Registers an outgoing callback function for a specific LIN frame ID and size within a device's abstract LIN data structure, returning an error code if the callback is invalid or the frame ID/size is out of range, or if memory allocation fails”"
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a given abstract LIN scheduler, ensuring only one table is active at a time by using a semaphore, and resets the current entry index to 0 when switching tables, returning an error if the table index is out of bounds”","""Sets the active table index for a given abstract LIN scheduler, ensuring only one table is active at a time by using a semaphore, and resets the current entry index to 0 when switching tables, returning an error if the table index is out of bounds”"
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a given abstract LIN scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active”","""Disables a given abstract LIN scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active, ensuring that no further messages are processed”"

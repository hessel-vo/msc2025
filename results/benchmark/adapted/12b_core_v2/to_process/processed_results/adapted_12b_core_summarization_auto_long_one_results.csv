id,language,reference,generated,generated_rci
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Validates that the provided 'datatype' is supported, then returns true if the 'value' conforms to the specified 'datatype' using its associated validation function.""","""Validates that the provided 'datatype' is supported, then returns true if the 'value' conforms to the specified 'datatype' using its associated validation function."""
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a given value or list of values are within the specified range for a signed or unsigned integer of a given bit width.""","""Checks if a given value or list of values are valid signed or unsigned integers within a specified bit range."""
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Retrieves a tuple containing the datatype name, a callable, and a list of subtypes from a predefined list of datatypes if the provided 'datatype' string matches a datatype name, otherwise returns None.""","""Searches a predefined list of datatypes and returns a tuple containing the datatype name, a callable, and a list of subtypes if a matching datatype name is found, otherwise returns None."""
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Identifies and returns a dictionary of namespaced datatypes from a list of dynamic datatypes, where the keys are the datatype names and the values are the fully qualified names, based on whether the input fully qualified name (fqn) starts with a prefix of any of the dynamic datatypes.""","""Identifies and returns a dictionary of namespaced datatypes from a list of dynamic datatypes, where the keys are the datatype names and the values are the fully qualified names, based on whether the input fully qualified name (fqn) starts with a prefix of any of the dynamic datatypes, excluding those that exactly match the fqn."""
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') into an ApiGearType object, handling array types and mapping common types to their corresponding ApiGearBasicType values.""","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') into an ApiGearType object, mapping common types to their corresponding ApiGearBasicType values and handling array types by setting the 'is_array' flag."""
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Retrieves the Apigear datatype for a given datatype string, then creates an ApigearProperty object with that datatype and optionally sets its description from the VSS node data if available, returning None if the datatype is unsupported.""","""Retrieves the Apigear datatype for a given datatype string, creates an ApigearProperty object with that datatype and optionally sets its description from the VSS node data, returning None if the datatype is unsupported."""
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges VSpec objects from a list of specification files, optionally including specified include directories, and returns a single combined VSpec object, raising an exception if no specifications are loaded.""","""Loads and merges VSpec objects from a list of specification files, optionally including specified include directories, and returns a single combined VSpec object, raising a SpecException if no specifications are loaded."""
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively updates a dictionary 'base' with the contents of another dictionary 'update', merging nested dictionaries and overwriting non-dictionary values.""","""Recursively updates a dictionary 'base' with the contents of another dictionary 'update', merging nested dictionaries and overwriting non-dictionary values in place."""
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates that the input 'v' is a hexadecimal string matching the pattern '0x[0-9A-Fa-f]{8}' and returns the input if valid, otherwise raises an assertion error.""","""Validates that the input 'v' is a hexadecimal string matching the pattern '0x[0-9A-Fa-f]{8}' and returns the input if valid, otherwise raises an assertion error."""
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Retrieves a VSSRaw object from a dictionary of data, optionally using a fully qualified name (fqn), attempts to resolve it, and returns the resolved object or the initialized object if resolution fails.""","""Retrieves a VSSRaw object from a dictionary of data, optionally using a fully qualified name (fqn), attempts to resolve it using `resolve_vss_raw`, and returns the resolved object or the initialized object if resolution fails."""
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Validates that all datatypes in the input list 'values' are present in the 'datatypes' list, raising an assertion error if an invalid datatype is found, and returning the original list if all datatypes are valid.""","""Validates that all datatypes in the input list 'values' are valid, raising an assertion error if an invalid datatype is found, and returning the original list if all datatypes are valid."""
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Generates a string representation of a VSSNode tree, including node names and specified attributes (if present), formatted with indentation to visually represent the tree structure.""","""Generates a string representation of a VSSNode tree, including node names and specified attributes (if present), formatted with indentation to visually represent the tree hierarchy."""
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Recursively traverses up the parent chain of a VSSNode until an instance root is found, returning the root node and the depth of the traversal, raising a NoInstanceRootException if no instance root exists.""","""Recursively traverses up the parent chain of a VSSNode until an instance root is found, returning the root node and the depth of the traversal, raising a NoInstanceRootException if the current node is not an instance or if no instance root exists."""
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a VSSDataBranch object, returning 1 plus the depth of the first instance child found, or 0 if no instance children are found.""","""Recursively counts the depth of instance children within a VSSDataBranch object, returning 1 plus the depth of the first instance child found, or 0 if no instance children are found."""
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Identifies and returns a list of node IDs from a given list that have a specified name as their expected parent.""","""Identifies and returns a list of node IDs from a given list whose expected parent is a specified name."""
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Safely retrieves an attribute from an object by name, returning a default value if the attribute is not found or is None.""","""Safely retrieves an attribute from an object by name, returning a default value if the attribute is not found or is None."""
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Traverses a VSS signal tree, extracts and writes necessary imports based on data type references, and generates protocol buffer messages for each branch node, including optional fields if specified.""","""Traverses a VSS signal tree, extracts and writes necessary imports based on data type references, and generates protocol buffer messages for each branch node, optionally including fields as optional."""
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Traverses a VSSNode tree to identify and group instance nodes (VSSDataBranch nodes marked as instances) under their respective root nodes, returning a dictionary mapping root fully qualified names to lists of their instance names.""","""Traverses a VSSNode tree to identify and group instance nodes (VSSDataBranch nodes marked as instances) under their respective root nodes, returning a dictionary mapping root fully qualified names to lists of their instance names, excluding any instance nodes that have child nodes that are also instances."""
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Checks if a given VSSNode's data attribute is an instance of the VSSDataDatatype class, returning True if it is, and False otherwise.""","""Determines if a VSSNode represents a leaf node by checking if its 'data' attribute is a VSSDataDatatype instance."""
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a given VSSNode represents a VSS branch by verifying if its data is a VSSDataBranch and if that branch is not an instance.""","""Checks if a given VSSNode represents a VSS branch by verifying if its data is a VSSDataBranch and if the 'is_instance' attribute of that branch is false."""
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a given VSSNode represents an instance of a VSSDataBranch by verifying that its data attribute is a VSSDataBranch and that the branch's 'is_instance' flag is set to True.""","""Checks if a given VSSNode's data is a VSSDataBranch instance by verifying that its data attribute is a VSSDataBranch and its 'is_instance' flag is True."""
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string using a constant prime and XOR operation.""","""Calculates a 32-bit FNV-1a hash value for a given byte string by iterating through each byte, multiplying by a constant prime, applying a bitwise AND, and XORing with the current byte."""
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates a layout (`card_fragment`) to create a view hierarchy, finds the `card_name` and `card_icon` views within it, and returns the inflated root view.""","""Inflates a layout (`card_fragment`) to create a view hierarchy, and retrieves references to the `card_name` and `card_icon` views within it."""
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button.""","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button."""
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its title, subtitle, optional image, and tap-for-more text elements.""","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its title, subtitle, optional image, and tap-for-more text elements, storing them for later use."""
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the header view of a card by setting its visibility, title, and icon within the main thread using `runOnUiThread`.""","""Updates the card's header view within the main thread using `runOnUiThread`, setting its visibility, title, and icon."""
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Lazily initializes and returns a `View` obtained by inflating a `ViewStub` containing a `TextView` (`mTextBlock`) and a tappable area (`mTextBlockTapForMore`) from the root view.""","""Lazily initializes and returns a `View` obtained by inflating a `ViewStub` containing a `TextView` (`mTextBlock`) and a tappable area (`mTextBlockTapForMore`) from the root view, caching the inflated view for subsequent use."""
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Queries the package manager for a media browsing service within a specified package, returning its component name if found, otherwise returning null.""","""Queries the package manager for a media browsing service within a specified package, returning the component name of the default service if found, otherwise returning null."""
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a given component should be added to the launchables list based on whether its package is hidden, its type, and whether it's a custom media component, logging an error for invalid component types.""","""Determines whether a given component should be added to the launchables list based on whether its package is hidden, its type, and whether it's a custom media component, returning false if any of these conditions are met and logging an error for invalid component types."""
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Selects a media source and finishes the current activity, using the provided `CarMediaManager` to set the media source to browse mode for the specified component, handling potential `CarNotConnectedException` errors.""","""Selects a media source and finishes the current activity, using the provided `CarMediaManager` to set the media source to browse mode for the specified component, logging an error if a `CarNotConnectedException` occurs."""
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a given activity within a specified package is distraction optimized using the `CarPackageManager`, handling potential `CarNotConnectedException` errors and returning a boolean indicating the optimization status.""","""Determines if a given activity within a specified package is distraction optimized by querying the `CarPackageManager`, returning `true` if so and logging an error if the car is not connected."""
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Retrieves a preferred `Intent` for launching maps applications, prioritizing those specified in `config_homeCardPreferredMapActivities` and falling back to the system default if no preferred activity is found or if the preferred activity is invalid.""","""Retrieves a preferred `Intent` for launching maps applications, prioritizing those specified in `config_homeCardPreferredMapActivities` and falling back to the system default if no preferred activity is found or if the preferred activity is invalid or cannot be resolved."""
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Dynamically initializes and adds `HomeCardModule` instances to a set, creating them via reflection from a list of class names defined in resources, setting a `ViewModelProvider` for each, and then replacing corresponding resource IDs in the fragment layout with the card views.""","""Dynamically initializes and adds `HomeCardModule` instances to a set, creating them via reflection from a list of class names defined in resources, setting a `ViewModelProvider` for each, and then replacing corresponding resource IDs in the fragment layout with the card views, logging the initialization time for each module if debugging is enabled."""
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Removes dangling tasks from the ActivityTaskManager that were previously reported as appearing but are in multi-window mode, logging a debug message before removal.""","""Removes dangling tasks from the ActivityTaskManager that were previously reported as appearing and are in multi-window mode, logging a debug message before removal."""
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Parses the application mode from the intent, sets the activity title, and updates the toolbar title accordingly.""","""Parses the application mode from the intent and updates both the activity title and the toolbar title based on the parsed mode."""
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Lazily initializes and returns a `Chronometer` view and its associated separator from the layout, if not already initialized.""","""Lazily initializes and returns a `Chronometer` view and its separator from the layout, if not already initialized."""
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Lazily initializes and returns a `View` representing the media layout, inflating it from a `ViewStub`, finding its title and subtitle views, and initializing the media control bar with the presenter.”","""Lazily initializes and returns a `View` representing the media layout, inflating it from a `ViewStub`, finding its title and subtitle views, and initializing the media control bar using the presenter.”"
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Scales a provided `Drawable` to a square bitmap, blurs it, and sets it as the background image of a card view, ensuring visibility if the card size is valid.""","""Scales a provided `Drawable` to a square bitmap, blurs it, and sets it as the background image of a card view, ensuring visibility if the card size is valid and a blur radius is specified."""
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Updates the visibility and text content of a media layout view with a given title and subtitle.""","""Sets the visibility of a media layout view to visible and updates its title and subtitle text fields with the provided values."""
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Updates the visibility and state of a chronometer and separator view based on the provided `DescriptiveTextWithControlsView`'s start time, showing them and starting the chronometer if the start time is positive, otherwise hiding them.""","""Updates the visibility and state of a chronometer and separator view based on the provided `DescriptiveTextWithControlsView`'s start time, showing the chronometer and separator if the start time is positive and starting the chronometer, otherwise hiding them."""
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback to a given `Call` object to receive updates related to the call, ensuring the callback is only registered if the `Call` object is not null.""","""Registers a callback to a given `Call` object to receive updates related to the call, handling the case where the `Call` object is null."""
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback from the removed call if it exists.""","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback from the removed call if it is not null."""
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number, updates a `DescriptiveTextWithControlsView` with the formatted number, subtitle, elapsed time, and call control buttons, and then notifies the presenter of the model update.""","""Formats a phone number, updates a `DescriptiveTextWithControlsView` with the formatted number, subtitle, elapsed time, and call control buttons, and then notifies the presenter of the model update."""
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes three control buttons—mute, end call, and dialpad—within a `DescriptiveTextWithControlsView`, assigning icons and click listeners to trigger corresponding actions in the `InCallService` and `CurrentCall` objects.""","""Initializes three control buttons—mute, end call, and dialpad—within a `DescriptiveTextWithControlsView`, assigning icons and click listeners to trigger corresponding actions on the `InCallService` and `CurrentCall` objects."""
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a listener of an available D-Bus connection status if the connection is currently established.""","""Notifies a listener with an `AvailabilityStatus::AVAILABLE` event if the D-Bus connection is currently established."""
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Associates a given thread with a D-Bus connection, ensuring the thread is tracked for proper cleanup on exit, but only if the connection is already registered.""","""Associates a given thread with a D-Bus connection, adding it to a list of threads to be joined on exit if the connection is already registered."""
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Handles the removal of a D-Bus watch by stopping the watch if it's ready and clearing the associated data from the D-Bus watch object.""","""Handles the removal of a D-Bus watch by stopping the watch if it's ready and clearing the associated data from the D-Bus watch object, logging an error if the provided context data is null."""
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Manages D-Bus watch objects by either initializing a new watch object and starting its monitoring or restarting/stopping an existing watch object based on its readiness status and associated context.""","""Manages D-Bus watch objects by either initializing a new watch object and starting its monitoring or restarting/stopping an existing watch object based on its readiness status and associated context, ensuring proper dispatch source dependency."""
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Lazily initializes and returns a shared pointer to a `DBusObjectManager` instance, ensuring thread-safe creation using a mutex if it doesn't already exist, and associating it with the current `DBusConnection`.""","""Lazily initializes and returns a shared pointer to a `DBusObjectManager` instance, ensuring thread-safe creation using a mutex if it doesn't already exist, and associating it with the current `DBusConnection` via a shared_from_this() call."""
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a D-Bus service name by decrementing its reference count, and if the count reaches zero, calls `dbus_bus_release_name` to unregister the service, returning `true` on success or if the count was decremented, and `false` if the service name was not found or the release operation failed.""","""Releases a D-Bus service name by decrementing its reference count, and if the count reaches zero, calls `dbus_bus_release_name` to unregister the service, returning `true` if the count was decremented or the service was successfully released, and `false` otherwise."""
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a `DBusPendingCall` (representing a pending D-Bus reply) into a `DBusMessage` object, extracting the reply from the pending call and returning an empty `DBusMessage` if the input is null.""","""Converts a `DBusPendingCall` (representing a pending D-Bus reply) into a `DBusMessage` object, extracting the reply from the pending call and returning an empty `DBusMessage` if the input is null or the extraction fails."""
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all pending `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector, ensuring proper cleanup of asynchronous handlers.""","""Deletes all pending `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector, ensuring proper cleanup of asynchronous handlers and preventing memory leaks."""
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through registered D-Bus signal handlers and their associated error tags, calling the `onSpecificError` method on each handler with a `SUCCESS` status for each tag, ensuring all handlers are notified of successful signal reception.""","""Iterates through registered D-Bus signal handlers and their associated error tags, calling the `onSpecificError` method on each handler with a `SUCCESS` status for each tag, notifying all handlers of successful signal reception."""
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Removes a connection from the internal `connections_` map using a provided `ConnectionId_t`, ensuring thread safety via a recursive mutex.""","""Removes a connection identified by `ConnectionId_t` from the internal `connections_` map, protected by a recursive mutex to ensure thread safety."""
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Handles D-Bus messages related to instance availability status changes, dispatching the appropriate signal (InterfacesAdded or InterfacesRemoved) to the associated event handler.""","""Handles D-Bus messages indicating instance availability status changes, routing the InterfacesAdded or InterfacesRemoved signals to the associated event handler."""
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves a list of available service instances from a D-Bus object manager, populating a `std::vector<DBusAddress>` with the results and setting a `CommonAPI::CallStatus` to `SUCCESS` if the operation completes without errors.""","""Retrieves a list of available service instances from a D-Bus object manager, populating a `std::vector<DBusAddress>` with the results and setting a `CommonAPI::CallStatus` to `SUCCESS` if the operation completes successfully."""
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Retrieves the availability status of a given service instance by translating a CommonAPI address to a DBus address and checking if the instance is alive in the DBus registry, setting the `AvailabilityStatus` and `CallStatus` accordingly.""","""Retrieves the availability status of a given service instance by translating a CommonAPI address to a DBus address and checking if the instance is alive in the DBus registry, setting the `AvailabilityStatus` and `CallStatus` accordingly."""
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Processes a DBus signal indicating the removal of interfaces from a DBus object, updating the local proxy's availability status if the removed interface matches the observed interface and the removal succeeds.""","""Processes a DBus signal indicating the removal of interfaces from a DBus object, updating the local proxy's availability status to 'NOT_AVAILABLE' if the removed interface matches the observed interface and the removal succeeds."""
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Translates a D-Bus address (service, object path, interface name) to a common API address and then notifies listeners of a change in the availability status of the corresponding interface.""","""Translates a D-Bus address (service, object path, interface name) to a common API address and then notifies listeners of a change in the availability status of the corresponding interface."""
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Registers a listener with a D-Bus proxy and schedules a function call to notify the listener when a specific subscription event occurs, using a weak pointer to ensure the proxy remains valid.""","""Registers a listener with a D-Bus proxy and schedules a function call to notify the listener when a specific subscription event occurs, using a weak pointer to ensure the proxy remains valid and the connection is managed correctly."""
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a listener from the `listeners_` map associated with a given `Subscription`, ensuring thread safety via a recursive mutex.""","""Removes a listener from the `listeners_` map associated with a given `Subscription`, ensuring thread safety via a recursive mutex and iterating through the map to find and erase the matching listener."""
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a `DBusSignalHandler` to the `DBusProxyConnection` for a specific subscription, enabling the handler to receive and process signals.""","""Registers a `DBusSignalHandler` with the connection to receive signals for a given subscription."""
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function.""","""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function."""
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles incoming D-Bus messages by routing them to registered interface handlers based on object path and interface name, or by processing introspectable interface messages if no handler is found.""","""Handles incoming D-Bus messages by routing them to registered interface handlers based on object path and interface name, or by processing introspectable interface messages if no handler is found, returning `true` if the message was handled and `false` otherwise."""
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, returning `true` if successful or if the handler is already registered for a specific interface, and `false` otherwise.""","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, returning `true` if successful or if the handler is already registered for the `org.freedesktop.DBus.ObjectManager` or `org.freedesktop.DBus.Properties` interfaces, and `false` otherwise."""
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, ensuring no duplicates and returning `true` on success or `false` if the handler already exists.""","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, storing it in a vector associated with that path and returning `true` on success or `false` if the handler already exists."""
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS positive reset response message (containing a positive reset SID and the reset type) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS positive reset response message (containing a positive reset SID and the reset type) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles an ECU reset request by validating the message length, determining the reset type (hard or unsupported), sending a positive or negative response accordingly, and initiating a system reboot for hard resets while logging debug information.""","""Handles an ECU reset request by validating the message length, determining the reset type (hard or unsupported), sending a positive or negative response accordingly, and initiating a system reboot for hard resets."""
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Sends a UDS positive response message (containing a request download SID, positive response code, and block size) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails.""","""Sends a UDS positive response message (containing a request download SID, positive response code, and block size) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails."""
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a 2-byte UDS positive response message (indicating successful transfer data reception) containing the block sequence counter over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails.""","""Sends a 2-byte UDS positive response message (indicating successful transfer data reception) containing the block sequence counter over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails."""
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Constructs and sends a 5-byte UDS routine control result message (containing a positive SID, a sub-function code, the routine ID, and the result) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 5-byte UDS routine control result message (containing a positive SID, a sub-function code, the routine ID, and the result) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a UDS positive response message (specifically, a request for transfer exit) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails.""","""Sends a UDS positive response message (specifically, a request for transfer exit) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails."""
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Maps a 32-bit CAN identifier to an index within a lookup table (id_mapping) and returns the index if found, otherwise returns 0xff.""","""Maps a 32-bit CAN identifier to an index within a lookup table (id_mapping) and returns the index if found, otherwise returns 0xff, indicating an unmapped ID."""
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a CAN receive filter by setting the callback function to NULL for a specified filter ID, or clears all incoming callbacks if the filter ID matches the length of the translatable addresses array.""","""Removes a CAN receive filter by setting the callback function to NULL for a specified filter ID, or clears all incoming callbacks if the filter ID represents the total number of translatable addresses."""
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a kernel message queue, copies its data into a provided LIN frame structure, and then calls a user-defined callback function to transmit the frame via CAN, logging debug information during the process.""","""Retrieves a LIN frame from a kernel message queue, copies its data into a provided LIN frame structure, and then calls a user-defined callback function to transmit the frame via CAN."""
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, extracting the relevant data, and invoking a registered callback function with the translated CAN frame and user data.""","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, extracting the relevant data, and invoking a registered callback function with the translated CAN frame and user data."""
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes the HV shield device by configuring the output enable GPIO pin, clearing the register data, updating the registers, and enabling the output, logging errors if any step fails.""","""Initializes the HV shield device by configuring the output enable GPIO pin, clearing the register data, updating the registers, and enabling the output, returning an error code if any step fails."""
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the gain value for a specified DAC channel (0 or 1) within the HV shield device's registers and then updates the device's configuration, returning an error if the DAC channel is invalid.""","""Sets the gain value for a specified DAC channel (0 or 1) within the HV shield device's registers and then updates the device's configuration, returning an error if the DAC channel is invalid or if the update fails."""
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Enables or disables a specific GPIO output pin (index 0-31) on an HV shield device by manipulating a bitfield within a register and then updating the device's configuration.""","""Enables or disables a specific GPIO output pin (index 0-31) on an HV shield device by setting or clearing a corresponding bit in a register and then updating the device's configuration."""
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes incoming CAN frames from one device to another by forwarding them using the `can_send` function, logging warnings for transmission failures and debug messages for successful routing.""","""Routes incoming CAN frames from one device to another by forwarding them using the `can_send` function, logging warnings for transmission failures and debug messages indicating the source and destination devices."""
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a set of CAN router entries, each mapping a CAN ID to a callback function and a data pointer, by adding corresponding receive filters to the CAN driver, returning an error if any registration fails.”","""Registers a set of CAN router entries, each mapping a CAN ID to a callback function and a data pointer, by adding corresponding receive filters to the CAN driver, returning an error if any registration fails.”"
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Initializes the CAN router by iterating through a predefined table of CAN router entries and registering each entry using the `can_router_register` function, returning an error if any registration fails.""","""Initializes the CAN router by iterating through a predefined table of CAN router entries and registering each entry using the `can_router_register` function, returning an error if any registration fails."""
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Iterates through a configuration of GPIO pins, setting the specified pins to a given value based on a bitmask, and returning an error if any individual pin setting fails.""","""Iterates through a configuration of GPIO pins, setting the specified pins to a given value based on a bitmask, and returning an error if any individual pin setting fails."""
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Retrieves the number of available callback slots in the abstract LIN driver, storing the result in the provided pointer, and returning an error if the pointer is null.""","""Calculates and returns the number of free callback slots available in the abstract LIN driver, storing the result in the provided pointer, and returning an error if the pointer is null."""
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a LIN frame with a specific ID and size is received, storing the callback and associated data in a lookup table, and returning an error if the input parameters are invalid or if the callback table is full.""","""Registers a callback function to be invoked when a LIN frame with a specific ID and size is received, storing the callback and associated data in a lookup table, and returning an error if the input parameters are invalid or if the callback table is full."""
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers an outgoing callback function for a specific LIN frame ID and size, storing the callback and associated data in a lookup table, returning an error if the input parameters are invalid or if the callback table is full.""","""Registers an outgoing callback function for a specific LIN frame ID and size, storing the callback and associated data in a lookup table, returning an error if the input parameters are invalid or if the callback table is full."""
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a given abstract LIN scheduler, ensuring mutual exclusion via a semaphore and resetting the current entry index to the beginning of the table.""","""Sets the active table index for a given abstract LIN scheduler, ensuring mutual exclusion via a semaphore and resetting the current entry index to the beginning of the table, returning an error if the table index is out of range."""
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a LIN scheduler by setting its current table index to -1 and acquiring the scheduler's active semaphore, ensuring exclusive access and preventing further scheduling operations.""","""Disables a LIN scheduler by setting its current table index to -1 and acquiring the scheduler's active semaphore, preventing further scheduling operations."""

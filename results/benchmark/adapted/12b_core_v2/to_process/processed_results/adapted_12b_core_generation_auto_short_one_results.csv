id,language,reference,generated,generated_rci
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","def is_datatype(cls, value: Any, datatype: str) -> bool:
    datatype_info = cls.get_type(datatype)
    if not datatype_info:
        raise DatatypesException(f""Not a valid type: '{datatype}'"")
    return datatype_info[0](value)","def is_datatype(cls, value: Any, datatype: str) -> bool:
    datatype_info = cls.get_type(datatype)
    if not datatype_info:
        raise DatatypesException(f""Not a valid type: '{datatype}'"")
    return datatype_info[0](value)"
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any, List

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(isinstance(x, int) and (x >= -2**(bits - 1) if signed else x >= 0) and x < 2**bits for x in value)
    else:
        return isinstance(value, int) and (value >= -2**(bits - 1) if signed else value >= 0) and value < 2**bits","from typing import Any, List

def is_xintx(value: Any, signed: bool, bits: int):
    if isinstance(value, list):
        return all(isinstance(x, int) and (x >= -2**(bits - 1) if signed else x >= 0) and x < 2**bits for x in value)
    else:
        return isinstance(value, int) and (value >= -2**(bits - 1) if signed else value >= 0) and value < 2**bits"
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.types:
        if type_def[0] == datatype:
            return type_def
    return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_def in cls.types:
        if type_def[0] == datatype:
            return type_def
    return None"
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn:
        fqn_parts = fqn.split(""."")
        fqn_namespaced_datatypes = {}
        for part in fqn_parts:
            fqn_namespaced_datatypes.update(get_namespace_datatypes(part))
        return fqn_namespaced_datatypes
    else:
        return get_namespace_datatypes("""")","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if fqn:
        fqn_parts = fqn.split(""."")
        fqn_namespaced_datatypes = {}
        for part in fqn_parts:
            fqn_namespaced_datatypes.update(get_namespace_datatypes(part))
        return fqn_namespaced_datatypes
    else:
        return get_namespace_datatypes("""")"
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType(t, ""string"", [str])
    if t == ""integer"":
        return ApiGearType(t, ""integer"", [int])
    if t == ""float"":
        return ApiGearType(t, ""float"", [float])
    if t == ""boolean"":
        return ApiGearType(t, ""boolean"", [bool])
    if t == ""array"":
        return ApiGearType(t, ""array"", [list])
    if t == ""object"":
        return ApiGearType(t, ""object"", [dict])
    if t == ""date"":
        return ApiGearType(t, ""date"", [datetime.date])
    if t == ""datetime"":
        return ApiGearType(t, ""datetime"", [datetime.datetime])
    if t == ""time"":
        return ApiGearType(t, ""time"", [datetime.time])
    if t == ""timedelta"":
        return ApiGearType(t, ""timedelta"", [datetime.timedelta])
    if t == ""bytes"":
        return ApiGearType(t, ""bytes"", [bytes])
    if t == ""bytearray"":
        return ApiGearType(t, ""bytearray"", [bytearray])
    if t == ""uuid"":
        return ApiGearType(t, ""uuid"", [uuid.UUID])
    if t == ""decimal"":
        return ApiGearType(t, ""decimal"", [Decimal])
    if t == ""fraction"":
        return ApiGearType(t, ""fraction"", [Fraction])
    if t == ""int"":
        return ApiGearType(t, ""int"", [int])
    if t == ""float"":
        return ApiGearType(t, ""float"", [float])
    if t == ""complex"":
        return ApiGearType(t, ""complex"", [complex])
    if t == ""tuple"":
        return ApiGearType(t, ""tuple"", [tuple])
    if t == ""set"":
        return ApiGearType(t, ""set"", [set])
    if t == ""frozenset"":
        return ApiGearType(t, ""frozenset"", [frozenset])
    if t == ""list"":
        return ApiGearType(t, ""list"", [list])
    if t == ""dict"":
        return ApiGearType(t, ""dict"", [dict])
    if t == ""None"":
        return ApiGearType(t, ""None"", [None])
    if t == ""Any"":
        return ApiGearType(t, ""Any"", [Any])
    if t == ""Optional"":
        return ApiGearType(t, ""Optional"", [Optional])
    if t == ""Union"":
        return ApiGearType(t, ""Union"", [Union])
    if t == ""Literal"":
        return ApiGearType(t, ""Literal"", [Literal])
    if t == ""ForwardRef"":
        return ApiGearType(t, ""ForwardRef"", [ForwardRef])
    if t == ""LiteralString"":
        return ApiGearType(t, ""LiteralString"", [LiteralString])
    if t == ""LiteralNumber"":
        return ApiGearType(t, ""LiteralNumber"", [LiteralNumber])
    if t == ""LiteralBoolean"":
        return ApiGearType(t, ""LiteralBoolean"", [LiteralBoolean])
    if t == ""LiteralList","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType(t, ""string"", [str])
    if t == ""integer"":
        return ApiGearType(t, ""integer"", [int])
    if t == ""float"":
        return ApiGearType(t, ""float"", [float])
    if t == ""boolean"":
        return ApiGearType(t, ""boolean"", [bool])
    if t == ""array"":
        return ApiGearType(t, ""array"", [list])
    if t == ""object"":
        return ApiGearType(t, ""object"", [dict])
    if t == ""date"":
        return ApiGearType(t, ""date"", [datetime.date])
    if t == ""datetime"":
        return ApiGearType(t, ""datetime"", [datetime.datetime])
    if t == ""time"":
        return ApiGearType(t, ""time"", [datetime.time])
    if t == ""timedelta"":
        return ApiGearType(t, ""timedelta"", [datetime.timedelta])
    if t == ""bytes"":
        return ApiGearType(t, ""bytes"", [bytes])
    if t == ""bytearray"":
        return ApiGearType(t, ""bytearray"", [bytearray])
    if t == ""uuid"":
        return ApiGearType(t, ""uuid"", [uuid.UUID])
    if t == ""decimal"":
        return ApiGearType(t, ""decimal"", [Decimal])
    if t == ""fraction"":
        return ApiGearType(t, ""fraction"", [Fraction])
    if t == ""int"":
        return ApiGearType(t, ""int"", [int])
    if t == ""float"":
        return ApiGearType(t, ""float"", [float])
    if t == ""complex"":
        return ApiGearType(t, ""complex"", [complex])
    if t == ""tuple"":
        return ApiGearType(t, ""tuple"", [tuple])
    if t == ""set"":
        return ApiGearType(t, ""set"", [set])
    if t == ""frozenset"":
        return ApiGearType(t, ""frozenset"", [frozenset])
    if t == ""list"":
        return ApiGearType(t, ""list"", [list])
    if t == ""dict"":
        return ApiGearType(t, ""dict"", [dict])
    if t == ""None"":
        return ApiGearType(t, ""None"", [None])
    if t == ""Any"":
        return ApiGearType(t, ""Any"", [Any])
    if t == ""Optional"":
        return ApiGearType(t, ""Optional"", [Optional])
    if t == ""Union"":
        return ApiGearType(t, ""Union"", [Union])
    if t == ""Literal"":
        return ApiGearType(t, ""Literal"", [Literal])
    if t == ""ForwardRef"":
        return ApiGearType(t, ""ForwardRef"", [ForwardRef])
    if t == ""LiteralString"":
        return ApiGearType(t, ""LiteralString"", [LiteralString])
    if t == ""LiteralNumber"":
        return ApiGearType(t, ""LiteralNumber"", [LiteralNumber])
    if t == ""LiteralBoolean"":
        return ApiGearType(t, ""LiteralBoolean"", [LiteralBoolean])
    if t == ""LiteralList"
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","```python
def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node.name:
        return None
    if not node.value_range:
        return None
    if not node.value_range.min:
        return None
    if not node.value_range.max:
        return None
    if not node.value_range.unit:
        return None
    if not node.value_range.unit_type:
        return None
    if not node.value_range.unit_exponent:
        return None
    if not node.value_range.unit_multiplier:
        return None
    if not node.value_range.unit_offset:
        return None
    if not node.value_range.unit_offset_type:
        return None
    if not node.value_range.unit_offset_exponent:
        return None
    if not node.value_range.unit_offset_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_type:
        return None","```python
def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node.name:
        return None
    if not node.value_range:
        return None
    if not node.value_range.min:
        return None
    if not node.value_range.max:
        return None
    if not node.value_range.unit:
        return None
    if not node.value_range.unit_type:
        return None
    if not node.value_range.unit_exponent:
        return None
    if not node.value_range.unit_multiplier:
        return None
    if not node.value_range.unit_offset:
        return None
    if not node.value_range.unit_offset_type:
        return None
    if not node.value_range.unit_offset_exponent:
        return None
    if not node.value_range.unit_offset_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_type:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent_multiplier_exponent:
        return None
    if not node.value_range.unit_offset_multiplier_exponent_multiplier_exponent_multiplier_exponent"
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

from vspec.vspec import VSpec
from vspec.exceptions import VSpecException
from vspec.parser import parse_vspec


def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    """"""Loads and merges multiple VSpec files from specified paths into a single VSpec object""""""
    vspec = VSpec(identifier)
    for spec_path in specs:
        try:
            vspec.merge(parse_vspec(spec_path, include_dirs))
        except VSpecException as e:
            raise VSpecException(f""Failed to load VSpec from '{spec_path}': {e}"")
    return vspec","from pathlib import Path

from vspec.vspec import VSpec
from vspec.exceptions import VSpecException
from vspec.parser import parse_vspec


def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    """"""Loads and merges multiple VSpec files from specified paths into a single VSpec object""""""
    vspec = VSpec(identifier)
    for spec_path in specs:
        try:
            vspec.merge(parse_vspec(spec_path, include_dirs))
        except VSpecException as e:
            raise VSpecException(f""Failed to load VSpec from '{spec_path}': {e}"")
    return vspec"
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict):
            base[k] = deep_update(base.get(k, {}), v)
        else:
            base[k] = v","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for k, v in update.items():
        if isinstance(v, dict):
            if k not in base:
                base[k] = {}
            base[k] = deep_update(base[k], v)
        else:
            base[k] = v"
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        raise TypeError(f""Expected string, got {type(v)}"")
    if len(v) != 8:
        raise ValueError(f""Expected 8 characters, got {len(v)}"")
    try:
        int(v, 16)
    except ValueError:
        raise ValueError(f""Not a valid hexadecimal string: '{v}'"")
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return None
    if not isinstance(v, str):
        raise TypeError(f""Expected string, got {type(v)}"")
    if len(v) != 8:
        raise ValueError(f""Expected 8 characters, got {len(v)}"")
    try:
        int(v, 16)
    except ValueError:
        raise ValueError(f""Not a valid hexadecimal string: '{v}'"")
    return v"
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    if not vss_raw.resolve(fqn):
        return vss_raw
    return None","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    vss_raw = VSSRaw(data)
    if not vss_raw.resolve(fqn):
        return vss_raw
    return None"
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_values = []
    for value in values:
        if value in cls.valid_datatypes:
            valid_values.append(value)
    return valid_values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_values = []
    for value in values:
        if value in cls.valid_datatypes:
            valid_values.append(value)
    return valid_values"
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int = 0) -> str:
        rendered = """"
        for attribute in attributes:
            value = getattr(node, attribute)
            if isinstance(value, list):
                value = "", "".join(str(v) for v in value)
            rendered += f""{' ' * indent}{attribute}: {value}\n""
        rendered += f""{' ' * indent}{node.name}\n""
        for child in node.children:
            rendered += render_node(child, indent + 4)
        return rendered

    return render_node(tree)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, indent: int = 0) -> str:
        rendered = """"
        for attribute in attributes:
            value = getattr(node, attribute)
            if isinstance(value, list):
                value = "", "".join(str(v) for v in value)
            rendered += f""{' ' * indent}{attribute}: {value}\n""
        rendered += f""{' ' * indent}{node.name}\n""
        for child in node.children:
            rendered += render_node(child, indent + 4)
        return rendered

    return render_node(tree)"
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if depth > 100:
        raise ValueError(""Maximum recursion depth reached"")
    if self.parent is None:
        return self, depth
    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if depth > 100:
        raise ValueError(""Maximum recursion depth reached"")
    if self.parent is None:
        return self, depth
    return self.parent.get_instance_root(depth + 1)"
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    depth = 0
    while self.parent:
        depth += 1
        self = self.parent
    return depth","def count_instance_children_depth(self) -> int:
    depth = 0
    if self.parent:
        while self.parent:
            depth += 1
            self = self.parent
    return depth"
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.endswith(name):
            children_ids.append(node_id)
    return children_ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.endswith(f"".{name}""):
            children_ids.append(node_id)
    return children_ids"
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default"
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""signal"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""group"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("" {\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""    }\n"")
    elif tree.type == ""enumeration"":
        fd.write(f""    enum {tree.name} {{\n"")
        for child in tree.children:
            fd.write(f""        {child.name} = {child.value};\n"")
        fd.write(""    }\n"")
    elif tree.type == ""message"":
        fd.write(f""    message {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""    }\n"")
    elif tree.type == ""service"":
        fd.write(f""    service {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""    }\n"")
    elif tree.type == ""rpc"":
        fd.write(f""    rpc {tree.name} ("")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write("") returns ("")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write("");\n"")
    elif tree.type == ""field"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""return"":
        fd.write(f""    return {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""parameter"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""option"":
        fd.write(f""    option {tree.name} = {tree.value};\n"")
    elif tree.type == ""package"":
        fd.write(f""    package {tree.name};\n"")
    elif tree.type == ""import"":
        fd.write(f""    import '{tree.name}';\n"")
    elif tree.type == ""syntax"":
        fd.write(f""    syntax = '{tree.name}';\n"")
    elif tree.type == ""file"":
        fd.write(f""    file '{tree.name}';\n"")
    elif tree.type","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.type == ""signal"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""group"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("" {\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""    }\n"")
    elif tree.type == ""enumeration"":
        fd.write(f""    enum {tree.name} {{\n"")
        for child in tree.children:
            fd.write(f""        {child.name} = {child.value};\n"")
        fd.write(""    }\n"")
    elif tree.type == ""message"":
        fd.write(f""    message {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""    }\n"")
    elif tree.type == ""service"":
        fd.write(f""    service {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""    }\n"")
    elif tree.type == ""rpc"":
        fd.write(f""    rpc {tree.name} ("")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write("") returns ("")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write("");\n"")
    elif tree.type == ""field"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""return"":
        fd.write(f""    return {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""parameter"":
        fd.write(f""    {tree.name}: {tree.datatype}"")
        if add_optional:
            fd.write("" = optional"")
        fd.write("";\n"")
    elif tree.type == ""option"":
        fd.write(f""    option {tree.name} = {tree.value};\n"")
    elif tree.type == ""package"":
        fd.write(f""    package {tree.name};\n"")
    elif tree.type == ""import"":
        fd.write(f""    import '{tree.name}';\n"")
    elif tree.type == ""syntax"":
        fd.write(f""    syntax = '{tree.name}';\n"")
    elif tree.type == ""file"":
        fd.write(f""    file '{tree.name}';\n"")
    elif tree.type"
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for node in root.get_children():
        if node.is_leaf():
            branch_name = node.get_branch_name()
            if branch_name:
                instances_meta[branch_name] = [node.get_name()]
            else:
                instances_meta[node.get_id()] = [node.get_name()]
    return instances_meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for node in root.get_children():
        if node.is_leaf():
            branch_name = node.get_branch_name()
            if branch_name:
                instances_meta[branch_name] = [node.get_name()]
            else:
                instances_meta[node.get_id()] = [node.get_name()]
    return instances_meta"
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type == ""leaf""","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type == ""leaf"""
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance"
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.type == ""branch""","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.type == ""branch"""
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    offset_basis = 0x811C9DC5
    hash = offset_basis
    for byte in identifier:
        hash ^= byte
        hash *= FNV_PRIME
        hash &= 0xFFFFFFFF
    return hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_PRIME = 0x01000193
    offset_basis = 0x811C9DC5
    hash = offset_basis
    for byte in identifier:
        hash ^= byte
        hash *= FNV_PRIME
        hash &= 0xFFFFFFFF
    return hash"
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.card_fragment, container, false);
    mCardView = view.findViewById(R.id.card_view);
    mTitleView = view.findViewById(R.id.title_view);
    mSubtitleView = view.findViewById(R.id.subtitle_view);
    mImageView = view.findViewById(R.id.image_view);
    mButtonView = view.findViewById(R.id.button_view);
    return view;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.card_fragment, container, false);
    mCardView = view.findViewById(R.id.card_view);
    mTitleView = view.findViewById(R.id.title_view);
    mSubtitleView = view.findViewById(R.id.subtitle_view);
    mImageView = view.findViewById(R.id.image_view);
    mButtonView = view.findViewById(R.id.button_view);
    return view;
}"
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setVisibility(View.VISIBLE);
        buttonView.setImageResource(buttonContent.iconResId);
        buttonView.setOnClickListener(buttonContent.listener);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setVisibility(View.VISIBLE);
        buttonView.setImageResource(buttonContent.iconResId);
        buttonView.setOnClickListener(buttonContent.listener);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}"
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        mDescriptiveTextOnlyLayoutView = LayoutInflater.from(getContext()).inflate(R.layout.descriptive_text_only, this, false);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        mDescriptiveTextOnlyLayoutView = LayoutInflater.from(getContext()).inflate(R.layout.descriptive_text_only, this, false);
    }
    return mDescriptiveTextOnlyLayoutView;
}"
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(mTitle);
    header.setIcon(mIcon);
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(mTitle);
    header.setIcon(mIcon);
}"
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = mTextBlockLayoutStub.inflate();
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = mTextBlockLayoutStub.inflate();
    }
    return mTextBlockLayoutView;
}"
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        return packageManager.getService(packageName, Intent.SERVICE_META_DATA);
    }","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        Intent intent = new Intent(Intent.ACTION_VIEW_INTENT);
        intent.setPackage(packageName);
        return packageManager.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY).getComponentName();
    }"
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (componentName == null) {
            return false;
        }
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if (customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        return true;
    }","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (componentName == null) {
            return false;
        }
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if (customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        return true;
    }"
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(context, componentName);
        ((Activity) context).finish();
    }","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(context, componentName);
        ((Activity) context).finish();
    }"
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        try {
            return carPackageManager.isDistractionOptimized(packageName, activityName);
        } catch (PackageManager.NameNotFoundException e) {
            Log.w(TAG, ""Package not found: "" + packageName, e);
            return false;
        } catch (RemoteException e) {
            Log.w(TAG, ""Failed to check if activity is distraction optimized"", e);
            return false;
        }
    }","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        try {
            return carPackageManager.isDistractionOptimized(packageName, activityName);
        } catch (PackageManager.NameNotFoundException e) {
            Log.w(TAG, ""Package not found: "" + packageName, e);
            return false;
        } catch (RemoteException e) {
            Log.w(TAG, ""Failed to check if activity is distraction optimized"", e);
            return false;
        }
    }"
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent mapsIntent = mMapsIntent;
        if (mapsIntent == null) {
            mapsIntent = new Intent(Intent.ACTION_VIEW);
            mapsIntent.setPackage(mMapsPackage);
            mapsIntent.setClassName(mMapsPackage, ""com.google.android.maps.MapsActivity"");
        }
        return mapsIntent;
    }","private Intent getMapsIntent() {
        Intent mapsIntent = mMapsIntent;
        if (mapsIntent == null) {
            mapsIntent = new Intent(Intent.ACTION_VIEW);
            mapsIntent.setPackage(mMapsPackage);
            mapsIntent.setClassName(mMapsPackage, ""com.google.android.maps.MapsActivity"");
        }
        return mapsIntent;
    }"
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
        if (mCardConfig == null) {
            Log.w(TAG, ""No card config found"");
            return;
        }
        for (int i = 0; i < mCardConfig.getCardCount(); i++) {
            CardConfig cardConfig = mCardConfig.getCardAt(i);
            if (cardConfig == null) {
                Log.w(TAG, ""Card config at index "" + i + "" is null"");
                continue;
            }
            String cardType = cardConfig.getCardType();
            if (cardType == null) {
                Log.w(TAG, ""Card type is null for card at index "" + i);
                continue;
            }
            if (cardType.equals(HomeCardType.WEATHER.toString())) {
                mWeatherCard = new WeatherCard(this);
                mWeatherCard.setCardConfig(cardConfig);
                mWeatherCard.setViewModelProvider(mViewModelProvider);
                mWeatherCard.setCardPresenter(mCardPresenter);
                mWeatherCard.setCardUpdateListener(this);
                mWeatherCard.initialize();
            } else if (cardType.equals(HomeCardType.CALENDAR.toString())) {
                mCalendarCard = new CalendarCard(this);
                mCalendarCard.setCardConfig(cardConfig);
                mCalendarCard.setViewModelProvider(mViewModelProvider);
                mCalendarCard.setCardPresenter(mCardPresenter);
                mCalendarCard.setCardUpdateListener(this);
                mCalendarCard.initialize();
            } else if (cardType.equals(HomeCardType.MUSIC.toString())) {
                mMusicCard = new MusicCard(this);
                mMusicCard.setCardConfig(cardConfig);
                mMusicCard.setViewModelProvider(mViewModelProvider);
                mMusicCard.setCardPresenter(mCardPresenter);
                mMusicCard.setCardUpdateListener(this);
                mMusicCard.initialize();
            } else if (cardType.equals(HomeCardType.AUDIO.toString())) {
                mAudioCard = new AudioCard(this);
                mAudioCard.setCardConfig(cardConfig);
                mAudioCard.setViewModelProvider(mViewModelProvider);
                mAudioCard.setCardPresenter(mCardPresenter);
                mAudioCard.setCardUpdateListener(this);
                mAudioCard.initialize();
            } else if (cardType.equals(HomeCardType.SMART_HOME.toString())) {
                mSmartHomeCard = new SmartHomeCard(this);
                mSmartHomeCard.setCardConfig(cardConfig);
                mSmartHomeCard.setViewModelProvider(mViewModelProvider);
                mSmartHomeCard.setCardPresenter(mCardPresenter);
                mSmartHomeCard.setCardUpdateListener(this);
                mSmartHomeCard.initialize();
            } else if (cardType.equals(HomeCardType.ALARM.toString())) {
                mAlarmCard = new AlarmCard(this);
                mAlarmCard.setCardConfig(cardConfig);
                mAlarmCard.setViewModelProvider(mViewModelProvider);
                mAlarmCard.setCardPresenter(mCardPresenter);
                mAlarmCard.setCardUpdateListener(this);
                mAlarmCard.initialize();
            } else if (cardType.equals(HomeCardType.ROUTINE.toString())) {
                mRoutineCard = new RoutineCard(this);
                mRoutineCard.setCardConfig(cardConfig);
                mRoutineCard.setViewModelProvider(mViewModel","private void initializeCards() {
        if (mCardConfig == null) {
            Log.w(TAG, ""No card config found"");
            return;
        }
        for (int i = 0; i < mCardConfig.getCardCount(); i++) {
            CardConfig cardConfig = mCardConfig.getCardAt(i);
            if (cardConfig == null) {
                Log.w(TAG, ""Card config at index "" + i + "" is null"");
                continue;
            }
            String cardType = cardConfig.getCardType();
            if (cardType == null) {
                Log.w(TAG, ""Card type is null for card at index "" + i);
                continue;
            }
            if (cardType.equals(HomeCardType.WEATHER.toString())) {
                mWeatherCard = new WeatherCard(this);
                mWeatherCard.setCardConfig(cardConfig);
                mWeatherCard.setViewModelProvider(mViewModelProvider);
                mWeatherCard.setCardPresenter(mCardPresenter);
                mWeatherCard.setCardUpdateListener(this);
                mWeatherCard.initialize();
            } else if (cardType.equals(HomeCardType.CALENDAR.toString())) {
                mCalendarCard = new CalendarCard(this);
                mCalendarCard.setCardConfig(cardConfig);
                mCalendarCard.setViewModelProvider(mViewModelProvider);
                mCalendarCard.setCardPresenter(mCardPresenter);
                mCalendarCard.setCardUpdateListener(this);
                mCalendarCard.initialize();
            } else if (cardType.equals(HomeCardType.MUSIC.toString())) {
                mMusicCard = new MusicCard(this);
                mMusicCard.setCardConfig(cardConfig);
                mMusicCard.setViewModelProvider(mViewModelProvider);
                mMusicCard.setCardPresenter(mCardPresenter);
                mMusicCard.setCardUpdateListener(this);
                mMusicCard.initialize();
            } else if (cardType.equals(HomeCardType.AUDIO.toString())) {
                mAudioCard = new AudioCard(this);
                mAudioCard.setCardConfig(cardConfig);
                mAudioCard.setViewModelProvider(mViewModelProvider);
                mAudioCard.setCardPresenter(mCardPresenter);
                mAudioCard.setCardUpdateListener(this);
                mAudioCard.initialize();
            } else if (cardType.equals(HomeCardType.SMART_HOME.toString())) {
                mSmartHomeCard = new SmartHomeCard(this);
                mSmartHomeCard.setCardConfig(cardConfig);
                mSmartHomeCard.setViewModelProvider(mViewModelProvider);
                mSmartHomeCard.setCardPresenter(mCardPresenter);
                mSmartHomeCard.setCardUpdateListener(this);
                mSmartHomeCard.initialize();
            } else if (cardType.equals(HomeCardType.ALARM.toString())) {
                mAlarmCard = new AlarmCard(this);
                mAlarmCard.setCardConfig(cardConfig);
                mAlarmCard.setViewModelProvider(mViewModelProvider);
                mAlarmCard.setCardPresenter(mCardPresenter);
                mAlarmCard.setCardUpdateListener(this);
                mAlarmCard.initialize();
            } else if (cardType.equals(HomeCardType.ROUTINE.toString())) {
                mRoutineCard = new RoutineCard(this);
                mRoutineCard.setCardConfig(cardConfig);
                mRoutineCard.setViewModelProvider(mViewModel"
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }
        for (int i = taskAppearedInfos.size() - 1; i >= 0; i--) {
            TaskAppearedInfo taskAppearedInfo = taskAppearedInfos.get(i);
            if (taskAppearedInfo.isMultiWindow()) {
                taskAppearedInfos.remove(i);
            }
        }
    }","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }
        for (int i = taskAppearedInfos.size() - 1; i >= 0; i--) {
            TaskAppearedInfo taskAppearedInfo = taskAppearedInfos.get(i);
            if (taskAppearedInfo.isMultiWindow()) {
                taskAppearedInfos.remove(i);
            }
        }
    }"
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
    String mode = getIntent().getStringExtra(Constants.KEY_MODE);
    if (mode != null) {
        mMode = mode;
        setTitle(getString(R.string.title_mode, mMode));
    }
}","private void updateMode() {
    String mode = getIntent().getStringExtra(Constants.KEY_MODE);
    if (mode != null) {
        mMode = mode;
        setTitle(getString(R.string.title_mode, mMode));
    }
}"
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = findViewById(R.id.chronometer);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = findViewById(R.id.chronometer);
    }
    return mChronometer;
}"
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    Bitmap blurredBitmap = Bitmap.createScaledBitmap(
            BitmapFactory.decodeResource(context.getResources(), R.drawable.media_background),
            mWidth,
            mHeight,
            true);
    return new ImageView(context);
}","private View getMediaLayoutView() {
    Bitmap blurredBitmap = Bitmap.createScaledBitmap(
            BitmapFactory.decodeResource(context.getResources(), R.drawable.media_background),
            mWidth,
            mHeight,
            true);
    return new ImageView(context);
}"
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    if (image == null) {
        mBackground.setImageDrawable(null);
        return;
    }

    int width = image.getIntrinsicWidth();
    int height = image.getIntrinsicHeight();

    int scaledWidth = mCardWidth;
    int scaledHeight = mCardHeight;

    if (width != scaledWidth || height != scaledHeight) {
        image = scaledImage(image, scaledWidth, scaledHeight);
    }

    mBackground.setImageDrawable(blurredImage(image, scaledWidth, scaledHeight));
}","private void updateBackgroundImage(Drawable image) {
    if (image == null) {
        mBackground.setImageDrawable(null);
        return;
    }

    int width = image.getIntrinsicWidth();
    int height = image.getIntrinsicHeight();

    int scaledWidth = mCardWidth;
    int scaledHeight = mCardHeight;

    if (width != scaledWidth || height != scaledHeight) {
        image = scaledImage(image, scaledWidth, scaledHeight);
    }

    mBackground.setImageDrawable(blurredImage(image, scaledWidth, scaledHeight));
}"
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
        mMediaView.setVisibility(View.VISIBLE);
        mMediaView.setTitle(title);
        mMediaView.setSubtitle(subtitle);
    }","private void updateMediaView(CharSequence title, CharSequence subtitle) {
        mMediaView.setVisibility(View.VISIBLE);
        mMediaView.setTitle(title);
        mMediaView.setSubtitle(subtitle);
    }"
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
        if (mStartTime > 0) {
            content.startChronometer(mStartTime);
        } else {
            content.stopChronometer();
        }
    }","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
        if (mStartTime > 0) {
            content.startChronometer(mStartTime);
        } else {
            content.stopChronometer();
        }
    }"
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
}","public void onCallAdded(Call call) {
}"
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
    mCall = null;
    mCallState = CallState.IDLE;
    mCallManager.unregisterCallback(this);
}","public void onCallRemoved(Call call) {
    mCall = null;
    mCallState = CallState.IDLE;
    mCallManager.unregisterCallback(this);
}"
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
    mOngoingCallViewModel.setPhoneNumber(number);
    mOngoingCallViewModel.setCallState(CallState.CALLING);
    mOngoingCallViewModel.setCallButtonEnabled(true);
    mOngoingCallViewModel.setMuteButtonEnabled(true);
    mOngoingCallViewModel.setVideoButtonEnabled(true);
    mOngoingCallViewModel.setSpeakerButtonEnabled(true);
    mOngoingCallViewModel.setHoldButtonEnabled(true);
    mOngoingCallViewModel.setDialpadButtonEnabled(true);
    mOngoingCallViewModel.setAddCallButtonEnabled(true);
}","void updateModelWithPhoneNumber(String number) {
    mOngoingCallViewModel.setPhoneNumber(number);
    mOngoingCallViewModel.setCallState(CallState.CALLING);
    mOngoingCallViewModel.setCallButtonEnabled(true);
    mOngoingCallViewModel.setMuteButtonEnabled(true);
    mOngoingCallViewModel.setVideoButtonEnabled(true);
    mOngoingCallViewModel.setSpeakerButtonEnabled(true);
    mOngoingCallViewModel.setHoldButtonEnabled(true);
    mOngoingCallViewModel.setDialpadButtonEnabled(true);
    mOngoingCallViewModel.setAddCallButtonEnabled(true);
}"
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
        mEndCallButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onEndCall();
            }
        });
        mDialpadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onDialpad();
            }
        });
        mAudioMuteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onMute();
            }
        });
    }","private void initializeAudioControls() {
        mEndCallButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onEndCall();
            }
        });
        mDialpadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onDialpad();
            }
        });
        mAudioMuteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onMute();
            }
        });
    }"
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (_listener.isAvailable()) {
        _listener.notifyAvailable();
    }
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (_listener.isAvailable()) {
        _listener.notifyAvailable();
    }
}"
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(exitMutex);
    if (exitThreads.find(conn) == exitThreads.end()) {
        exitThreads[conn] = std::vector<std::thread>();
    }
    exitThreads[conn].push_back(t);
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(exitMutex);
    if (exitThreads.find(conn) == exitThreads.end()) {
        exitThreads[conn] = std::vector<std::thread>();
    }
    exitThreads[conn].push_back(t);
}"
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (nullptr == libdbusWatch) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""libdbusWatch == NULL"");
        return;
    }
    if (nullptr == data) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data == NULL"");
        return;
    }

    auto* watchData = static_cast<WatchData*>(data);
    if (nullptr == watchData) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchData == NULL"");
        return;
    }

    if (watchData->isRemoved) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watch already removed"");
        return;
    }

    watchData->isRemoved = true;
    watchData->watch = nullptr;

    if (watchData->isNameOwnerWatch) {
        removeNameOwnerWatch(watchData->name, watchData->nameOwner);
    } else if (watchData->isSignalWatch) {
        removeSignalWatch(watchData->signal, watchData->path, watchData->interface, watchData->member);
    } else if (watchData->isMethodWatch) {
        removeMethodWatch(watchData->path, watchData->interface, watchData->member);
    }

    delete watchData;
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (nullptr == libdbusWatch) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""libdbusWatch == NULL"");
        return;
    }
    if (nullptr == data) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data == NULL"");
        return;
    }

    auto* watchData = static_cast<WatchData*>(data);
    if (nullptr == watchData) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchData == NULL"");
        return;
    }

    if (watchData->isRemoved) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watch already removed"");
        return;
    }

    watchData->isRemoved = true;
    watchData->watch = nullptr;

    if (watchData->isNameOwnerWatch) {
        removeNameOwnerWatch(watchData->name, watchData->nameOwner);
    } else if (watchData->isSignalWatch) {
        removeSignalWatch(watchData->signal, watchData->path, watchData->interface, watchData->member);
    } else if (watchData->isMethodWatch) {
        removeMethodWatch(watchData->path, watchData->interface, watchData->member);
    }

    delete watchData;
}"
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (!libdbusWatch) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""libdbusWatch == NULL"");
        return;
    }
    if (!data) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data == NULL"");
        return;
    }

    DBusConnection* connection = static_cast<DBusConnection*>(data);
    if (!connection) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data is not a DBusConnection pointer"");
        return;
    }

    if (libdbusWatch->ready) {
        connection->startWatch(libdbusWatch);
    } else {
        connection->stopWatch(libdbusWatch);
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (!libdbusWatch) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""libdbusWatch == NULL"");
        return;
    }
    if (!data) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data == NULL"");
        return;
    }

    DBusConnection* connection = static_cast<DBusConnection*>(data);
    if (!connection) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data is not a DBusConnection pointer"");
        return;
    }

    if (libdbusWatch->ready) {
        connection->startWatch(libdbusWatch);
    } else {
        connection->stopWatch(libdbusWatch);
    }
}"
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        std::lock_guard<std::mutex> lock(objectManagerMutex_);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>(*this);
        }
    }
    return instance;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        std::lock_guard<std::mutex> lock(objectManagerMutex_);
        if (!instance) {
            instance = std::make_shared<DBusObjectManager>(*this);
        }
    }
    return instance;
}"
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (serviceName.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""serviceName is empty"");
        return false;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""not connected"");
        return false;
    }

    dbus_uint32_t dbusSerial;
    const bool result = (0 != dbus_connection_release_name(connection_, serviceName.c_str(), &dbusSerial));
    return result;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (serviceName.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""serviceName is empty"");
        return false;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""not connected"");
        return false;
    }

    dbus_uint32_t dbusSerial;
    const bool result = (0 != dbus_connection_release_name(connection_, serviceName.c_str(), &dbusSerial));
    return result;
}"
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (!_libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""pendingCall == NULL"");
        return DBusMessage();
    }

    DBusMessage message;
    message.message_ = dbus_pending_call_steal_reply(_libdbusPendingCall);
    return message;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (!_libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""pendingCall == NULL"");
        return DBusMessage();
    }

    DBusMessage message;
    message.message_ = dbus_pending_call_steal_reply(_libdbusPendingCall);
    if (message.message_) {
        message.setSerial(dbus_message_get_serial(message.message_));
    }
    return message;
}"
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(asyncHandlersMutex_);
    for (auto it = asyncHandlers_.begin(); it != asyncHandlers_.end(); ++it) {
        delete *it;
    }
    asyncHandlers_.clear();
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(asyncHandlersMutex_);
    for (auto it = asyncHandlers_.begin(); it != asyncHandlers_.end(); ++it) {
        delete *it;
    }
    asyncHandlers_.clear();
}"
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex_);
    for (auto it = signalHandlers_.begin(); it != signalHandlers_.end(); ++it) {
        auto handler = it->second;
        if (handler.first) {
            handler.first->signalStatusChanged(handler.second);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex_);
    for (auto it = signalHandlers_.begin(); it != signalHandlers_.end(); ++it) {
        auto handler = it->second;
        if (handler.first) {
            handler.first->signalStatusChanged(handler.second);
        }
    }
}"
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = connections_.find(_connectionId);
    if (it != connections_.end()) {
        connections_.erase(it);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = connections_.find(_connectionId);
    if (it != connections_.end()) {
        connections_.erase(it);
    }
}"
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return;
    }

    const std::string_view interface = dbusMessage.getInterface();
    const std::string_view member = dbusMessage.getMember();
    const std::string_view path = dbusMessage.getPath();

    if (interface == ""org.freedesktop.DBus.Introspectable"") {
        if (member == ""Introspectable"") {
            if (path == ""/org/freedesktop/DBus"") {
                if (dbusMessage.getType() == DBusMessageType::MethodReturn) {
                    if (dbusMessage.getArguments().size() == 1) {
                        const auto& response = dbusMessage.getArguments()[0];
                        if (response.getType() == DBusType::String) {
                            const auto& responseString = response.getString();
                            if (responseString == ""1"") {
                                dispatchAvailabilityStatusChanged(true);
                            } else {
                                dispatchAvailabilityStatusChanged(false);
                            }
                        }
                    }
                }
            }
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return;
    }

    const std::string_view interface = dbusMessage.getInterface();
    const std::string_view member = dbusMessage.getMember();
    const std::string_view path = dbusMessage.getPath();

    if (interface == ""org.freedesktop.DBus.Introspectable"") {
        if (member == ""Introspectable"") {
            if (path == ""/org/freedesktop/DBus"") {
                if (dbusMessage.getType() == DBusMessageType::MethodReturn) {
                    if (dbusMessage.getArguments().size() == 1) {
                        const auto& response = dbusMessage.getArguments()[0];
                        if (response.getType() == DBusType::String) {
                            const auto& responseString = response.getString();
                            if (responseString == ""1"") {
                                dispatchAvailabilityStatusChanged(true);
                            } else {
                                dispatchAvailabilityStatusChanged(false);
                            }
                        }
                    }
                }
            }
        }
    }
}"
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    std::lock_guard<std::mutex> lock(mutex_);
    _status.status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances = availableServiceInstances_;
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    std::lock_guard<std::mutex> lock(mutex_);
    _status.status = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances = availableServiceInstances_;
}"
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::CALL_STATUS_SUCCESS;
    _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_UNKNOWN;

    if (_instance.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceName = _instance.substr(0, _instance.find('.'));
    std::string instanceName = _instance.substr(_instance.find('.') + 1);

    if (serviceName.empty() || instanceName.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    if (serviceName == _serviceName && instanceName == _instanceName) {
        _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_AVAILABLE;
        return;
    }

    if (_serviceName.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    if (_serviceName == serviceName) {
        _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_AVAILABLE;
        return;
    }

    _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_NOT_AVAILABLE;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::CALL_STATUS_SUCCESS;
    _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_UNKNOWN;

    if (_instance.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    size_t dotPos = _instance.find('.');
    if (dotPos == std::string::npos) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    std::string serviceName = _instance.substr(0, dotPos);
    std::string instanceName = _instance.substr(dotPos + 1);

    if (serviceName.empty() || instanceName.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    if (serviceName == _serviceName && instanceName == _instanceName) {
        _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_AVAILABLE;
        return;
    }

    if (_serviceName.empty()) {
        _callStatus = CallStatus::CALL_STATUS_ERROR;
        return;
    }

    if (_serviceName == serviceName) {
        _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_AVAILABLE;
        return;
    }

    _availabilityStatus = AvailabilityStatus::AVAILABILITY_STATUS_NOT_AVAILABLE;
}"
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    if (!_message) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""not connected"");
        return;
    }

    const std::string_view interfaceName = _message.getInterface();
    const std::string_view memberName = _message.getMember();
    const std::string_view body = _message.getBody();

    if (interfaceName == ""org.freedesktop.DBus.Introspectable"") {
        if (memberName == ""Introspectable"") {
            if (body == ""true"") {
                setAvailabilityStatus(DBusInstanceAvailabilityStatus::AVAILABLE);
            } else {
                setAvailabilityStatus(DBusInstanceAvailabilityStatus::UNAVAILABLE);
            }
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    if (!_message) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""not connected"");
        return;
    }

    const std::string_view interfaceName = _message.getInterface();
    const std::string_view memberName = _message.getMember();
    const std::string_view body = _message.getBody();

    if (interfaceName == ""org.freedesktop.DBus.Introspectable"") {
        if (memberName == ""Introspectable"") {
            if (body == ""true"") {
                setAvailabilityStatus(DBusInstanceAvailabilityStatus::AVAILABLE);
            } else {
                setAvailabilityStatus(DBusInstanceAvailabilityStatus::UNAVAILABLE);
            }
        }
    }
}"
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::lock_guard<std::mutex> lock(mutex_);
    for (auto &listener : listeners_) {
        listener->onInterfaceAvailabilityStatusChanged(_objectPath, _interfaceName, _availability);
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::lock_guard<std::mutex> lock(mutex_);
    for (auto &listener : listeners_) {
        listener->onInterfaceAvailabilityStatusChanged(_objectPath, _interfaceName, _availability);
    }
}"
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (!_listener) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""listener == NULL"");
        return;
    }
    if (!_subscription) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""subscription == NULL"");
        return;
    }

    auto status = std::make_shared<ProxyStatus>(*this);
    status->setListener(_listener);
    status->setSubscription(_subscription);
    status->setTimestamp(std::chrono::steady_clock::now());
    status->setEvent(ProxyStatusEvent::ListenerAdded);

    auto callback = [status](const DBusError &error) {
        if (error.domain != DBUS_ERROR_NAME_NO_REPLY) {
            COMMONAPI_ERROR(std::string(__FUNCTION__), ""Error in callback: "" + error.message);
        }
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setTimestamp(std::chrono::steady_clock::now());
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (!_listener) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""listener == NULL"");
        return;
    }
    if (!_subscription) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""subscription == NULL"");
        return;
    }

    auto status = std::make_shared<ProxyStatus>(*this);
    status->setListener(_listener);
    status->setSubscription(_subscription);
    status->setTimestamp(std::chrono::steady_clock::now());
    status->setEvent(ProxyStatusEvent::ListenerAdded);

    auto callback = [status](const DBusError &error) {
        if (error.domain != DBUS_ERROR_NAME_NO_REPLY) {
            COMMONAPI_ERROR(std::string(__FUNCTION__), ""Error in callback: "" + error.message);
        }
        status->setEvent(ProxyStatusEvent::ListenerAdded);
        status->setTimestamp(std::chrono::steady_clock::now());
    };

    dbus_connection_send_with_reply_and_block(connection_,
                                              status->getDBusMessage(),
                                              callback,
                                              DBUS_TIMEOUT_INFINITE);
}"
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = std::remove_if(listeners_.begin(), listeners_.end(),
                             [&_listener, &_subscription](const Listener& listener) {
                                 return listener.subscription == _subscription && listener.listenerId == _listener.listenerId;
                             });
    listeners_.erase(it, listeners_.end());
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    auto it = std::remove_if(listeners_.begin(), listeners_.end(),
                             [&_listener, &_subscription](const Listener& listener) {
                                 return listener.subscription == _subscription && listener.listenerId == _listener.listenerId;
                             });
    listeners_.erase(it, listeners_.end());
}"
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    _connection->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    _connection->addSignalStateHandler(_handler, _subscription);
}"
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> addresses;
        for (const auto &_address : _availableServiceInstances) {
            addresses.push_back(_address.toString());
        }
        _call(addresses);
    }
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        std::vector<std::string> addresses;
        for (const auto &_address : _availableServiceInstances) {
            addresses.push_back(_address.toString());
        }
        _call(addresses);
    }
}"
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return false;
    }

    if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_METHOD_CALL) {
        const std::string_view interface = dbusMessage->getInterface();
        const std::string_view member = dbusMessage->getMember();
        const std::string_view path = dbusMessage->getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            return it->second(dbusMessage);
        }
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_METHOD_RETURN) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_ERROR) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_SIGNAL) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_REPLY) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_INTROSPECT) {
        return handleIntrospectionRequest(dbusMessage);
    } else {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""unknown message type"");
        return false;
    }

    return true;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return false;
    }

    if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_METHOD_CALL) {
        const std::string_view interface = dbusMessage->getInterface();
        const std::string_view member = dbusMessage->getMember();
        const std::string_view path = dbusMessage->getPath();

        auto it = handlers_.find({interface, member, path});
        if (it != handlers_.end()) {
            return it->second(dbusMessage);
        }
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_METHOD_RETURN) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_ERROR) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_SIGNAL) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_REPLY) {
        // Do nothing
    } else if (dbusMessage->getType() == DBUS_MESSAGE_TYPE_INTROSPECT) {
        return handleIntrospectionRequest(dbusMessage);
    } else {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""unknown message type"");
        return false;
    }

    return true;
}"
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (!dbusInterfaceHandler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandler == NULL"");
        return false;
    }
    if (dbusInterfaceHandlerPath.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.path.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.path is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.interface.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.interface is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.member.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.member is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.method is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Introspect.Introspect"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Introspect method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Get"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Get method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.GetAll"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""GetAll method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Set"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Set method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Delete"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Delete method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.GetAll"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""GetAll method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Set"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Set method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Delete"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Delete method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method ==","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (!dbusInterfaceHandler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandler == NULL"");
        return false;
    }
    if (dbusInterfaceHandlerPath.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.path.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.path is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.interface.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.interface is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.member.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.member is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""dbusInterfaceHandlerPath.method is empty"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Introspect.Introspect"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Introspect method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Get"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Get method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.GetAll"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""GetAll method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Set"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Set method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Delete"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Delete method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.GetAll"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""GetAll method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Set"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Set method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method == ""org.freedesktop.DBus.Properties.Delete"") {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Delete method cannot be registered"");
        return false;
    }
    if (dbusInterfaceHandlerPath.method =="
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> lock(registeredObjectsMutex_);
    auto it = registeredObjects_.find(ifpath);
    if (it != registeredObjects_.end()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""already registered"");
        return false;
    }
    registeredObjects_[ifpath] = handler;
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    std::lock_guard<std::mutex> lock(registeredObjectsMutex_);
    auto it = registeredObjects_.find(ifpath);
    if (it != registeredObjects_.end()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""already registered"");
        return false;
    }
    registeredObjects_[ifpath] = handler;
    return true;
}"
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, UDS_SID_ECU_RESET, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, UDS_SID_ECU_RESET, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len < 2) {
    LOG_ERR(""Invalid ECU reset request length\n"");
    return;
  }

  if (data[0] != UDS_SID_ECU_RESET) {
    LOG_ERR(""Invalid ECU reset request SID\n"");
    return;
  }

  if (data[1] != ECU_RESET_HARD) {
    LOG_ERR(""Unsupported ECU reset sub-function\n"");
    return;
  }

  LOG_INFO(""Received ECU reset request\n"");
  system_reboot();
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len < 2) {
    LOG_ERR(""Invalid ECU reset request length\n"");
    return;
  }

  if (data[0] != UDS_SID_ECU_RESET) {
    LOG_ERR(""Invalid ECU reset request SID\n"");
    return;
  }

  if (data[1] != ECU_RESET_HARD) {
    LOG_ERR(""Unsupported ECU reset sub-function\n"");
    return;
  }

  LOG_INFO(""Received ECU reset request\n"");
  system_reboot();
}"
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD_RESPONSE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD_RESPONSE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_DATA_POSITIVE_RESPONSE, block_sequence_counter};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_DATA_POSITIVE_RESPONSE, block_sequence_counter};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_ROUTINE_CONTROL_RESULT, (uint8_t)routine_id, result};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_ROUTINE_CONTROL_RESULT, (uint8_t)(routine_id >> 8), (uint8_t)routine_id, result};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_EXIT_POSITIVE_RESPONSE};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  int ret;
  uint8_t tx_data[] = {UDS_SID_TRANSFER_EXIT_POSITIVE_RESPONSE};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
  return can_id & 0x0F;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
  return can_id & 0x0F;
}"
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;

	if (filter_id < 0) {
		kfree(data->rx_filters);
		data->rx_filters = NULL;
		data->rx_filter_count = 0;
		return;
	}

	if (filter_id >= data->rx_filter_count) {
		return;
	}

	data->rx_filters[filter_id].cb = NULL;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
	struct lin2can_data *data = dev->data;

	if (filter_id < 0) {
		kfree(data->rx_filters);
		data->rx_filters = NULL;
		data->rx_filter_count = 0;
		return;
	}

	if (filter_id >= data->rx_filter_count) {
		return;
	}

	data->rx_filters[filter_id].cb = NULL;
}"
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  struct lin_context *ctx = user_data;
  struct list_head *list = &ctx->tx_queue;
  struct list_head *tmp;
  struct lin_frame *tmp_frame;

  list_for_each(tmp, list) {
    tmp_frame = list_entry(tmp, struct lin_frame, list);
    if (tmp_frame->frame_id == frame->frame_id) {
      list_del(tmp);
      tmp_frame->completion_cb(tmp_frame->user_data);
      return true;
    }
  }

  return false;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  struct lin_context *ctx = user_data;
  struct list_head *list = &ctx->tx_queue;
  struct list_head *tmp;
  struct lin_frame *tmp_frame;

  list_for_each(tmp, list) {
    tmp_frame = list_entry(tmp, struct lin_frame, list);
    if (tmp_frame->frame_id == frame->frame_id) {
      list_del(tmp);
      tmp_frame->completion_cb(tmp_frame->user_data);
      return true;
    }
  }

  return false;
}"
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  struct can_frame can_frame;
  uint32_t can_id;
  uint8_t can_dlc;
  int ret;

  can_id = frame->lin_id;
  can_dlc = frame->length;

  can_frame.can_id = can_id;
  can_frame.can_dlc = can_dlc;
  memcpy(can_frame.data, frame->data, can_dlc);

  ret = can_frame_handler(user_data, &can_frame);
  if (ret != CAN_FRAME_HANDLER_OK) {
    LOG_ERR(""Error while handling CAN frame [%d]\n"", ret);
  }
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  struct can_frame can_frame;
  uint32_t can_id;
  uint8_t can_dlc;
  int ret;

  can_id = frame->lin_id;
  can_dlc = frame->length;

  can_frame.can_id = can_id;
  can_frame.can_dlc = can_dlc;
  memcpy(can_frame.data, frame->data, can_dlc);

  ret = can_frame_handler(user_data, &can_frame);
  if (ret != CAN_FRAME_HANDLER_OK) {
    LOG_ERR(""Error while handling CAN frame [%d]\n"", ret);
  }
}"
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
  struct hv_shield_data *data = dev->data;

  data->reg = devm_clk_get(dev, ""hv_shield"", false);
  if (!data->reg) {
    return -ENODEV;
  }

  clk_prepare(data->reg);

  data->hv_shield_enable = devm_gpiod_get(dev, ""hv_shield_enable"", GPIOD_OUT_LOW);
  if (!data->hv_shield_enable) {
    return -ENODEV;
  }

  data->hv_shield_disable = devm_gpiod_get(dev, ""hv_shield_disable"", GPIOD_OUT_LOW);
  if (!data->hv_shield_disable) {
    return -ENODEV;
  }

  data->hv_shield_status = devm_gpiod_get(dev, ""hv_shield_status"", GPIOD_IN);
  if (!data->hv_shield_status) {
    return -ENODEV;
  }

  data->hv_shield_enable_reg = devm_regmap_get(dev, ""hv_shield_enable_reg"", false);
  if (!data->hv_shield_enable_reg) {
    return -ENODEV;
  }

  data->hv_shield_disable_reg = devm_regmap_get(dev, ""hv_shield_disable_reg"", false);
  if (!data->hv_shield_disable_reg) {
    return -ENODEV;
  }

  data->hv_shield_status_reg = devm_regmap_get(dev, ""hv_shield_status_reg"", false);
  if (!data->hv_shield_status_reg) {
    return -ENODEV;
  }

  data->hv_shield_enable_reg_bit = devm_regmap_get_reg_by_name(dev, ""hv_shield_enable_reg"", ""enable"");
  if (!data->hv_shield_enable_reg_bit) {
    return -ENODEV;
  }

  data->hv_shield_disable_reg_bit = devm_regmap_get_reg_by_name(dev, ""hv_shield_disable_reg"", ""disable"");
  if (!data->hv_shield_disable_reg_bit) {
    return -ENODEV;
  }

  data->hv_shield_status_reg_bit = devm_regmap_get_reg_by_name(dev, ""hv_shield_status_reg"", ""status"");
  if (!data->hv_shield_status_reg_bit) {
    return -ENODEV;
  }

  regmap_update_bits(data->hv_shield_enable_reg, data->hv_shield_enable_reg_bit,
                     BIT(0), 1);

  regmap_update_bits(data->hv_shield_disable_reg, data->hv_shield_disable_reg_bit,
                     BIT(0), 1);

  return 0;
}","static int hv_shield_init(const struct device* dev) {
  struct hv_shield_data *data = dev->data;

  data->reg = devm_clk_get(dev, ""hv_shield"", false);
  if (!data->reg) {
    return -ENODEV;
  }

  clk_prepare(data->reg);

  data->hv_shield_enable = devm_gpiod_get(dev, ""hv_shield_enable"", GPIOD_OUT_LOW);
  if (!data->hv_shield_enable) {
    return -ENODEV;
  }

  data->hv_shield_disable = devm_gpiod_get(dev, ""hv_shield_disable"", GPIOD_OUT_LOW);
  if (!data->hv_shield_disable) {
    return -ENODEV;
  }

  data->hv_shield_status = devm_gpiod_get(dev, ""hv_shield_status"", GPIOD_IN);
  if (!data->hv_shield_status) {
    return -ENODEV;
  }

  data->hv_shield_enable_reg = devm_regmap_get(dev, ""hv_shield_enable_reg"", false);
  if (!data->hv_shield_enable_reg) {
    return -ENODEV;
  }

  data->hv_shield_disable_reg = devm_regmap_get(dev, ""hv_shield_disable_reg"", false);
  if (!data->hv_shield_disable_reg) {
    return -ENODEV;
  }

  data->hv_shield_status_reg = devm_regmap_get(dev, ""hv_shield_status_reg"", false);
  if (!data->hv_shield_status_reg) {
    return -ENODEV;
  }

  data->hv_shield_enable_reg_bit = devm_regmap_get_reg_by_name(dev, ""hv_shield_enable_reg"", ""enable"");
  if (!data->hv_shield_enable_reg_bit) {
    return -ENODEV;
  }

  data->hv_shield_disable_reg_bit = devm_regmap_get_reg_by_name(dev, ""hv_shield_disable_reg"", ""disable"");
  if (!data->hv_shield_disable_reg_bit) {
    return -ENODEV;
  }

  data->hv_shield_status_reg_bit = devm_regmap_get_reg_by_name(dev, ""hv_shield_status_reg"", ""status"");
  if (!data->hv_shield_status_reg_bit) {
    return -ENODEV;
  }

  regmap_update_bits(data->hv_shield_enable_reg, data->hv_shield_enable_reg_bit,
                     BIT(0), 1);

  regmap_update_bits(data->hv_shield_disable_reg, data->hv_shield_disable_reg_bit,
                     BIT(0), 1);

  return 0;
}"
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	int ret;
	uint8_t tx_data[2];
	struct can_frame tx_frame;

	tx_data[0] = HVS_SET_DAC_GAIN_SID;
	tx_data[1] = dac;

	tx_frame.id = HVS_SET_DAC_GAIN_ID;
	tx_frame.dlc = 2;
	memcpy(tx_frame.data, tx_data, 2);

	ret = can_send(dev->data, &tx_frame, CAN_PRIORITY_HIGH);
	if (ret) {
		LOG_ERR(""Failed to send HVS set DAC gain request\n"");
	}

	return ret;
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
	int ret;
	uint8_t tx_data[2];
	struct can_frame tx_frame;

	tx_data[0] = HVS_SET_DAC_GAIN_SID;
	tx_data[1] = dac;

	tx_frame.id = HVS_SET_DAC_GAIN_ID;
	tx_frame.dlc = 2;
	memcpy(tx_frame.data, tx_data, 2);

	ret = can_send(dev->data, &tx_frame, CAN_PRIORITY_HIGH);
	if (ret) {
		LOG_ERR(""Failed to send HVS set DAC gain request\n"");
	}

	return ret;
}"
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
	uint8_t reg_val;
	int ret;

	reg_val = (enable ? 0x0F : 0x00) << (index & 0x0F);
	reg_val |= (enable ? 0x00 : 0x0F) >> (index >> 4);

	ret = gpio_write(dev, HVS_GPIO_OUTPUT_EN_REG, reg_val);
	if (ret < 0) {
		return ret;
	}

	return 0;
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
	uint8_t reg_val;
	int ret;

	reg_val = (enable ? 0x0F : 0x00) << (index & 0x0F);
	reg_val |= (enable ? 0x00 : 0x0F) >> (index >> 4);

	ret = gpio_write(dev, HVS_GPIO_OUTPUT_EN_REG, reg_val);
	if (ret < 0) {
		return ret;
	}

	return 0;
}"
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
  int ret;
  struct can_frame tx_frame;
  struct can_address tx_addr;

  tx_frame = *frame;
  tx_addr.can_id = frame->can_id;
  tx_addr.bitrate = frame->bitrate;
  tx_addr.extended = frame->extended;

  ret = can_send(dev, &tx_frame, &tx_addr);
  if (ret != CAN_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.can_id, ret);
  }
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
  int ret;
  struct can_frame tx_frame;
  struct can_address tx_addr;

  tx_frame = *frame;
  tx_addr.can_id = frame->can_id;
  tx_addr.bitrate = frame->bitrate;
  tx_addr.extended = frame->extended;

  ret = can_send(dev, &tx_frame, &tx_addr);
  if (ret != CAN_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.can_id, ret);
  }
}"
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  int i;
  for (i = 0; i < entry_count; i++) {
    can_router_add_entry(entries[i].can_id, entries[i].interface_id);
  }
  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  int i;
  for (i = 0; i < entry_count; i++) {
    can_router_add_entry(entries[i].can_id, entries[i].interface_id);
  }
  return 0;
}"
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
  int ret;
  ret = can_router_register_static_routes();
  if (ret < 0) {
    LOG_ERR(""Failed to register static routes\n"");
    return -1;
  }
  return 0;
}","static int can_router_sysinit() {
  int ret;
  ret = can_router_register_static_routes();
  if (ret < 0) {
    LOG_ERR(""Failed to register static routes\n"");
    return -1;
  }
  return 0;
}"
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret;
	int i;

	for (i = 0; i < GPIO_NUM_PINS; i++) {
		if ((mask >> i) & 1) {
			ret = gpio_set_pin(port, i, value);
			if (ret < 0) {
				return ret;
			}
		}
	}

	return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	int ret;
	int i;

	for (i = 0; i < GPIO_NUM_PINS; i++) {
		if ((mask >> i) & 1) {
			ret = gpio_set_pin(port, i, value);
			if (ret < 0) {
				return ret;
			}
		}
	}

	return 0;
}"
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
	return dev->data->cb_slots - dev->data->cb_used;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
	*free_slots = dev->data->cb_slots - dev->data->cb_used;
	return 0;
}"
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	struct al_lin_incoming_cb *cb = kzalloc(sizeof(*cb), GFP_KERNEL);
	if (!cb) {
		return -ENOMEM;
	}
	cb->callback = callback;
	cb->user_data = user_data;
	cb->frame_id = frame_id;
	cb->frame_size = frame_size;
	list_add_tail(&cb->list, &dev->incoming_cb_list);
	return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	struct al_lin_incoming_cb *cb = kzalloc(sizeof(*cb), GFP_KERNEL);
	if (!cb) {
		return -ENOMEM;
	}
	cb->callback = callback;
	cb->user_data = user_data;
	cb->frame_id = frame_id;
	cb->frame_size = frame_size;
	list_add_tail(&cb->list, &dev->incoming_cb_list);
	return 0;
}"
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	struct al_lin_data *data = dev->data;
	int ret;

	if (!callback) {
		return -EINVAL;
	}

	ret = kfifo_init(&data->outgoing_fifo, data->outgoing_buffer, data->outgoing_buffer_size);
	if (ret < 0) {
		return ret;
	}

	data->outgoing_cb = callback;
	data->outgoing_frame_id = frame_id;
	data->outgoing_frame_size = frame_size;
	data->outgoing_user_data = user_data;

	return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
	struct al_lin_data *data = dev->data;

	if (!callback) {
		return -EINVAL;
	}

	data->outgoing_cb = callback;
	data->outgoing_frame_id = frame_id;
	data->outgoing_frame_size = frame_size;
	data->outgoing_user_data = user_data;

	return 0;
}"
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler,
                                           struct abstract_lin_schedule_table *table) {
  if (scheduler == NULL || table == NULL) {
    return -EINVAL;
  }

  if (scheduler->active_table != NULL) {
    abstract_lin_scheduler_stop(scheduler);
  }

  scheduler->active_table = table;
  scheduler->current_position = 0;

  return 0;
}","int abstract_lin_scheduler_set_active_table(struct abstract_lin_scheduler *scheduler,
                                           struct abstract_lin_schedule_table *table) {
  if (scheduler == NULL || table == NULL) {
    return -EINVAL;
  }

  if (scheduler->active_table != NULL) {
    abstract_lin_scheduler_stop(scheduler);
  }

  scheduler->active_table = table;
  scheduler->current_position = 0;

  return 0;
}"
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched) {
    sched->is_enabled = false;
  }
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched) {
    sched->is_enabled = false;
  }
}"

id,language,reference,generated,generated_rci
1,python,"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes","""Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes”","""Validates that 'check' and 'base' are known types, then returns true if the 'check' type is a subtype of the 'base' type, either by being identical or by its name being found within the 'base' type's predefined list of subtypes”"
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Validates that a given value conforms to a specified datatype by retrieving the datatype's type object and applying it to the value.""","""Retrieves the type object for a specified datatype and returns true if the given value is an instance of that type."""
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a given value or list of values are within the specified range for a signed or unsigned integer of a given bit width.""","""Checks if a given value or list of values are within the specified range for a signed or unsigned integer of a given bit width."""
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Retrieves a tuple containing the type name, constructor, and list of subtypes for a given datatype from a predefined list of types within a class, or returns None if the datatype is not found.”","""Retrieves a tuple containing the type name, constructor, and subtypes for a given datatype from a predefined list of types within a class, or returns None if the datatype is not found.”"
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Identifies and returns a dictionary of namespaced datatypes that match a given fully qualified name prefix, excluding the prefix itself.”","""Identifies and returns a dictionary of namespaced datatypes whose names match a given fully qualified name prefix, excluding the prefix itself.”"
6,python,Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name,"""Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name”","""Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name encountered."""
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type into an ApiGearType object, handling basic types, arrays, and custom types by mapping them to their corresponding ApiGearBasicType values or creating a new type based on the input string.”","""Converts a string representation of a data type into an ApiGearType object, handling basic types, arrays, and custom types by mapping them to their corresponding ApiGearBasicType values or creating a new type based on the input string.”"
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Generates an ApiGearProperty object from a VSSNode and a specified datatype, populating the property's type and description if available.”","""Generates an ApiGearProperty object from a VSSNode and a specified datatype, using the node's data to populate the property's type and description if available.”"
9,python,"Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects","""Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects”","""Recursively parses a given specification file and any files it includes, returning a flattened list of VSpec objects, resolving include paths relative to the original specification and its parent directory”"
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges a list of VSpec files and their included files, logging the process and raising an exception if no specifications are found.”","""Loads and merges a list of VSpec files and their included files, logging the process and raising an exception if no specifications are found or if there are any errors during the process.”"
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively merges the contents of the 'update' dictionary into the 'base' dictionary, overwriting existing keys with values from 'update' and merging nested dictionaries.”","""Recursively merges the contents of the 'update' dictionary into the 'base' dictionary, overwriting existing non-dictionary values with values from 'update' and recursively merging nested dictionaries.”"
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates that a given string is a valid constant UID (in the format '0xXXXXXXXX') and returns the string if valid, otherwise returns None.""","""Validates that a given string is a valid constant UID (in the format '0xXXXXXXXX') and returns the string if valid, otherwise returns None."""
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Creates a VSSRaw object from a dictionary, attempts to resolve it, and returns the object (either resolved or incomplete) after logging any validation or model errors.”","""Creates a VSSRaw object from a dictionary, attempts to resolve it, and returns the object (either resolved or incomplete) after logging any validation or model errors.”"
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Validates that all provided datatypes are present in a predefined list of valid datatypes, raising an assertion error if an invalid datatype is encountered.""","""Validates that all provided datatypes are present in a predefined list of valid datatypes, raising an assertion error if an invalid datatype is encountered and returning the original list if all datatypes are valid."""
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Generates a string representation of a VSSNode tree, recursively traversing the tree and formatting each node's name and specified attributes into a readable, indented structure.""","""Generates a string representation of a VSSNode tree, recursively traversing the tree and formatting each node's name and specified attributes into a readable, indented structure."""
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Recursively traverses up the VSS node tree until an instance root node is found, returning the root node and the depth of the traversal.”","""Recursively traverses up the VSS node tree to find the instance root node, returning the root node and the depth of the traversal.”"
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a VSSDataBranch node, returning 0 if no instance children are found.”","""Recursively counts the depth of instance children within a VSSDataBranch node, returning 0 if no instance children are found or if the node itself is not an instance.”"
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Identifies and returns a list of node IDs whose expected parent is a given name.”","""Identifies and returns a list of node IDs whose expected parent is a given name.”"
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Safely retrieves an attribute from an object, returning a default value if the attribute is not found or is None.”","""Safely retrieves an attribute from an object, returning a default value if the attribute is not found.”"
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Recursively traverses a VSS node tree, generating a protocol buffer definition file containing messages for each branch node, including necessary imports and optional fields based on specified flags.”","""Recursively traverses a VSS node tree, generating a protocol buffer definition file containing messages for each branch node, including necessary imports and optional fields based on specified flags and handling data type dependencies.”"
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Traverses a VSS node tree to identify and collect instance names under each instance root, returning a dictionary mapping instance root fully qualified names to a list of their child instance names.”","""Traverses a VSS node tree to identify and collect instance names under each instance root, returning a dictionary mapping instance root fully qualified names to a list of their direct instance child names.”"
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Checks if a given VSS node is a leaf node by verifying if its 'data' attribute is an instance of the VSSDataDatatype class.""","""Determines if a given VSS node is a leaf node by checking if its 'data' attribute is a VSSDataDatatype instance."""
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a given VSS node represents a branch and is not an instance of a data type.”","""Checks if a given VSS node represents a branch and is not an instance of a data type, returning True if both conditions are met.”"
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a VSSNode represents an instance of a VSSDataBranch by verifying that its data attribute is a VSSDataBranch and that the branch's 'is_instance' flag is set to True.""","""Checks if a VSSNode represents an instance of a VSSDataBranch by verifying that its data attribute is a VSSDataBranch and that the branch's 'is_instance' attribute is True."""
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string using a fixed prime and bitwise operations.""","""Calculates a 32-bit FNV-1a hash value for a given byte string using a fixed prime and bitwise XOR operations."""
26,java,"Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with both a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`","""Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with both a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`”","""Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models to either a `MediaViewModel` and an `InCallModel` (if a `ViewModelProvider` is available) or just an `InCallModel` (otherwise, logging a warning)."""
27,java,"Lazily initializes and returns an `AudioFragment`, bidirectionally linking it with its presenter upon first creation","""Lazily initializes and returns an `AudioFragment`, bidirectionally linking it with its presenter upon first creation”","""Lazily initializes and returns an `AudioFragment`, setting its presenter and receiving a presenter upon first creation”"
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates a layout (`card_fragment`) into a `View`, retrieves the `card_name` and `card_icon` views from the inflated layout, and returns the root `View`.""","""Inflates a layout (`card_fragment`) into a `View`, retrieves the `card_name` and `card_icon` views from the inflated layout, and returns the root `View`."""
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button.”","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button.”"
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily initializes and returns a `View` inflated from a `ViewStub`, retrieving its child views for title, subtitle, optional image, and 'tap for more' text elements.”","""Lazily initializes and returns a `View` inflated from a `ViewStub`, retrieving its child views for title, subtitle, optional image, and 'tap for more' text elements, and caching them for later use.”"
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the visibility of the root view and the text/icon of the card title with the provided `CardHeader` data on the main thread.”","""Updates the visibility of the root view and the text/icon of the card title with the provided `CardHeader` data on the main thread.”"
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Lazily initializes and returns a `View` from a `ViewStub` within the root view, retrieving the `TextBlock` and `TapForMoreText` views from the inflated layout.”","""Lazily initializes and returns a `View` from a `ViewStub` within the root view, retrieving the `TextBlock` and `TapForMoreText` views from the inflated layout.”"
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Queries the system for the default `MediaBrowserService` component name within a specified package, returning `null` if no service is found or if the service name is empty.”","""Queries the system for the default `MediaBrowserService` component name within a specified package, returning `null` if no service is found.”"
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a given component should be added to the launchables list based on a blacklist of package names, custom media component exclusions, and the component's application type.”","""Determines whether a given component should be added to the launchables list based on a blacklist of package names, custom media component exclusions, and the component's application type, logging an error for invalid application types.”"
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Selects a media source and finishes the activity, handling potential `CarNotConnectedException` by logging an error.”","""Selects a media source and finishes the activity, handling potential `CarNotConnectedException` by logging an error and preventing activity termination.”"
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a given activity within a specified package is distraction optimized using the `CarPackageManager`, handling potential `CarNotConnectedException` errors.""","""Determines if a given activity within a specified package is distraction optimized using the `CarPackageManager`, returning `false` if a `CarNotConnectedException` occurs."""
37,java,"Initializes a `TaskViewManager` to asynchronously create a `TaskView`, which upon creation is configured with a listener, added to the parent `ViewGroup`, and stored as a member variable","""Initializes a `TaskViewManager` to asynchronously create a `TaskView`, which upon creation is configured with a listener, added to the parent `ViewGroup`, and stored as a member variable”","""Initializes a `TaskViewManager` to asynchronously create a `TaskView`, configuring it with a listener and adding it to the parent `ViewGroup` upon creation, and storing it as a member variable.”"
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Retrieves a preferred `Intent` for launching a maps application, prioritizing those specified in `config_homeCardPreferredMapActivities` while falling back to the system default if no preferred activity is found or if the preferred activity is invalid.”","""Retrieves a preferred `Intent` for launching a maps application, prioritizing those specified in `config_homeCardPreferredMapActivities` and returning the system default if no preferred activity is found or if the preferred activity is invalid.”"
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding their corresponding `CardView` fragments to the fragment manager using a transaction.”","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding their corresponding `CardView` fragments to the fragment manager using a transaction.”"
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Iterates through a list of `TaskAppearedInfo` objects, removes any tasks with a multi-window windowing mode from the `ActivityTaskManager` to clean up dangling tasks.""","""Iterates through a list of `TaskAppearedInfo` objects and removes any tasks with a multi-window windowing mode from the `ActivityTaskManager` to clean up dangling tasks."""
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Parses the application mode from the intent, sets the activity title, and updates the toolbar title accordingly.”","""Parses the application mode from the intent and updates both the activity title and the toolbar title.”"
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Lazily initializes and returns a `Chronometer` and its associated separator view from a layout, retrieving them by their IDs if they haven't been previously obtained.”","""Lazily initializes and returns a `Chronometer` and its associated separator view from a layout, retrieving them by their IDs if they haven't been previously obtained.”"
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Lazily initializes and returns a `View` inflated from a `ViewStub`, populating its `primary_text` and `secondary_text` views and initializing the presenter's controls action bar with the `media_playback_controls_bar` view.""","""Lazily initializes and returns a `View` inflated from a `ViewStub`, populating its `primary_text` and `secondary_text` views and initializing the presenter's controls action bar with the `media_playback_controls_bar` view."""
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the background image with a transition animation if the card size is valid.""","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the background image with a transition animation if the card size is valid and the image is not null."""
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Updates the visibility and text content of a media layout view with provided title and subtitle strings.”","""Sets the visibility of a media layout view to visible and updates its title and subtitle text fields with the provided strings.”"
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Conditionally displays a chronometer and separator based on the start time of a descriptive text view, updating the chronometer's base and starting it if a start time is provided.""","""Conditionally displays a chronometer and separator based on the start time of a descriptive text view, updating the chronometer's base and starting it if a start time is provided, otherwise hiding both."""
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback to a given `Call` object to receive updates related to the call's lifecycle.""","""Registers a callback to a given `Call` object to receive updates related to the call's lifecycle, handling null calls gracefully."""
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes the current call, clears associated data, notifies the presenter of the update, and unregisters the callback for the removed call.”","""Removes the current call, clears associated data, notifies the presenter of the update, and unregisters the callback for the removed call if a call was provided.”"
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and other UI elements, and then notifies the presenter that the model has been updated.”","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and associated UI elements, and then notifies the presenter that the model has been updated.”"
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes three `DescriptiveTextWithControlsView.Control` objects representing mute, end call, and dialpad actions, each configured with an icon and a corresponding action to be performed when clicked.”","""Initializes three `DescriptiveTextWithControlsView.Control` objects representing mute, end call, and dialpad actions, each configured with an icon and a corresponding action to be performed when clicked, using the `InCallService` and `CurrentCall` objects.”"
51,cpp,"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails","""Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails”","""Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid or the connection is down."""
52,cpp,"Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID","""Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID”","""Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, and sets the destination to the client's D-Bus ID."""
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a listener with `AvailabilityStatus::AVAILABLE` if the D-Bus connection is currently connected.""","""Notifies a listener with `AvailabilityStatus::AVAILABLE` if the D-Bus connection is currently connected, ignoring the provided subscription."""
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Registers a thread to be joined upon exit for a given D-Bus connection, ensuring the thread is added to a list of threads to be joined if the connection is already tracked.”","""Registers a thread to be joined upon exit for a given D-Bus connection, adding it to a list of threads to be joined if the connection is already being tracked.”"
55,cpp,Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method,"""Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method”","""Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method."""
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Handles the removal of a D-Bus watch by stopping its monitoring if it's ready and clearing its associated data from the underlying D-Bus library watch object”","""Handles the removal of a D-Bus watch by stopping its monitoring if it's ready and clearing its associated data from the underlying D-Bus library watch object, ensuring proper cleanup and preventing further notifications.”"
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Handles D-Bus watch events by either initializing a `DBusWatch` object and starting its monitoring or stopping the watch and removing its associated data if it's already initialized and no longer ready to be watched.”","""Handles D-Bus watch events by either initializing a `DBusWatch` object and starting its monitoring or stopping the watch and removing its associated data if it's already initialized and no longer ready to be watched, using a `WatchContext` to manage dependencies.”"
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Lazily creates and returns a `DBusObjectManager` instance, ensuring thread-safe initialization using a mutex and a shared pointer, which is associated with the current `DBusConnection` instance.”","""Lazily creates and returns a `DBusObjectManager` instance, ensuring thread-safe initialization using a mutex and a shared pointer, which is associated with the current `DBusConnection`.”"
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a D-Bus service name by decrementing its count in a map, and if the count reaches zero, calls `dbus_bus_release_name` to release the name from the D-Bus bus, returning `true` on success and `false` if the name was not released or an error occurred.”","""Releases a D-Bus service name by decrementing its count in a map; if the count reaches zero, it attempts to release the name from the D-Bus bus using `dbus_bus_release_name`, returning `true` on success and `false` if the name was not released or an error occurred.”"
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a `DBusPendingCall` (a D-Bus pending call object) into a `DBusMessage` object, extracting the reply from the pending call and returning it, while handling null input and managing D-Bus object reference counts.”","""Converts a `DBusPendingCall` into a `DBusMessage` by extracting the reply from the pending call, handling null input, and managing D-Bus object reference counts.”"
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all pending `DBusMessageReplyAsyncHandler` objects stored in a protected vector by first acquiring a lock, then iterating through the vector and deleting each handler before clearing the vector.”","""Deletes all pending `DBusMessageReplyAsyncHandler` objects stored in a protected vector by acquiring a lock, iterating through the vector, deleting each handler, and then clearing the vector.”"
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through a copy of the signal state handlers, notifying each handler of a successful call for each registered signal tag.”","""Iterates through a copy of the signal state handlers, notifying each handler of a successful call for each registered signal tag, after acquiring a lock to protect the signal state handlers map.”"
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Removes a D-Bus connection from a managed container using a provided connection ID, ensuring thread safety with a recursive mutex.""","""Removes a D-Bus connection from a managed container using a provided connection ID, protecting access with a recursive mutex."""
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Handles D-Bus signals related to instance availability status changes, dispatching the appropriate handler (`onInterfacesAddedSignal` or `onInterfacesRemovedSignal`) within the `instanceAvblStatusEvent_` object based on the received signal name.”","""Handles D-Bus signals indicating instance availability status changes, dispatching the corresponding handler within the `instanceAvblStatusEvent_` object based on whether the signal is 'InterfacesAdded' or 'InterfacesRemoved'."""
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves a list of available D-Bus service instances from a D-Bus object manager proxy, populating a `std::vector<DBusAddress>` with the results and setting a `CommonAPI::CallStatus` to `SUCCESS` if the operation completes without errors.”","""Retrieves a list of available D-Bus service instances from a D-Bus object manager proxy, populating a `std::vector<DBusAddress>` with the results and setting a `CommonAPI::CallStatus` to `SUCCESS` if the operation completes successfully.”"
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Retrieves the availability status of a D-Bus service instance, translating a given address to a D-Bus address and checking if the instance is alive in the service registry, setting the `AvailabilityStatus` accordingly and the `CallStatus` to `SUCCESS`.""","""Retrieves the availability status of a D-Bus service instance by translating a given address to a D-Bus address and checking if the instance is alive in the service registry, setting the `AvailabilityStatus` and `CallStatus` accordingly."""
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Processes a D-Bus signal indicating the removal of interfaces, iterating through the removed interfaces to check if any match the observed interface, and if so, updates the availability status to `NOT_AVAILABLE` for that interface.”","""Processes a D-Bus signal indicating the removal of interfaces, checking if any removed interfaces match the observed interface, and if so, updates the availability status to `NOT_AVAILABLE` for that interface.”"
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Translates a D-Bus address (service, object path, interface) to a common API address and then notifies listeners about a change in the availability status of the corresponding interface.”","""Translates a D-Bus address (service, object path, interface) to a common API address and then notifies listeners about a change in the availability status of the corresponding interface.”"
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Registers a listener with a D-Bus proxy and schedules a function call to notify that listener when a specific subscription event occurs, using a weak pointer to the proxy to avoid dangling references.”","""Registers a listener with a D-Bus proxy and schedules a function call to notify that listener when a specific subscription event occurs, using a weak pointer to the proxy to avoid dangling references and ensuring the proxy remains valid.”"
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a listener from the `listeners_` map based on the provided `Subscription`, ensuring thread safety with a `recursive_mutex` and iterating through the map to find and erase the matching entry.”","""Removes a listener from the `listeners_` map based on the provided `Subscription`, ensuring thread safety with a `recursive_mutex` and iterating through the map to erase the matching entry.”"
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a given `DBusSignalHandler` to the `DBusProxyConnection`'s signal state management, associating it with a specific subscription ID.”","""Adds a given `DBusSignalHandler` to the `DBusProxyConnection`'s signal state management, associating it with a specific subscription ID to handle signals for that subscription.”"
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available instances of a D-Bus proxy, translating the D-Bus addresses to strings and passing the status and instances to the provided callback function”","""Handles the asynchronous callback for retrieving available instances of a D-Bus proxy, translating the D-Bus addresses to strings and passing the status and instances to the provided callback function, ignoring the proxy object itself.”"
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles incoming D-Bus messages by searching a registered table for a matching interface handler, calling the handler's `onInterfaceDBusMessage` method if found, or processing introspectable messages if no handler is registered.”","""Handles incoming D-Bus messages by searching a registered table for a matching interface handler, calling the handler's `onInterfaceDBusMessage` method if found, or processing introspectable messages if no handler is registered, returning `true` if the message was handled and `false` otherwise.”"
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a `DBusInterfaceHandler` to a table of registered objects, returning `true` if the handler was successfully added or already exists (except for `org.freedesktop.DBus.ObjectManager` and `org.freedesktop.DBus.Properties` interfaces), and `false` otherwise.”","""Adds a `DBusInterfaceHandler` to a table of registered objects, returning `true` if the handler was successfully added or already exists (excluding `org.freedesktop.DBus.ObjectManager` and `org.freedesktop.DBus.Properties` interfaces), and `false` otherwise.”"
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a `DBusInterfaceHandler` to a table of registered objects, keyed by `DBusInterfaceHandlerPath`, ensuring no duplicates are added and returning `true` on success or `false` if the handler already exists”","""Adds a `DBusInterfaceHandler` to a table of registered objects, keyed by `DBusInterfaceHandlerPath`, and returns `true` if the handler was successfully added (or already present) and `false` otherwise”"
76,c,"Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 3-byte UDS negative response message—containing the original request SID and a negative response code—over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
77,c,"Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type and P2/P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”"
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS positive response for an ECU reset request—containing the reset type—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS positive response for an ECU reset request—containing the reset type—over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles a UDS ECU reset request, sending a negative response if the message length is incorrect, a positive response if a hard reset is requested (followed by a system reboot), or a negative response if the reset type is unsupported.”","""Handles a UDS ECU reset request, sending a negative response if the message length is incorrect or the reset type is unsupported, and initiating a hard reset (system reboot) with a positive response if a hard reset is requested.”"
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Constructs and sends a 4-byte UDS positive response for a Request Download request—containing the positive response code and block size—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 4-byte UDS positive response for a Request Download request—containing the positive response code and block size—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”"
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS positive response for a Transfer Data request—containing the block sequence counter—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS positive response for a Transfer Data request—containing the block sequence counter—over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Constructs and sends a 5-byte UDS positive response for a Routine Control request—containing the routine ID and a result code—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 5-byte UDS positive response for a Routine Control request—containing the routine ID and a result code—over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 1-byte UDS positive response for a Request Transfer Exit request over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 1-byte UDS positive response for a Request Transfer Exit service over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
84,c,"Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input","""Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input”","""Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum value, returning 0 on success or `-ENOTSUP` for unsupported values."""
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Searches an array of CAN IDs (`id_mapping`) for a given CAN ID (`can_id`), returning the corresponding index if found, otherwise returning 0xff”","""Searches an array of CAN IDs (`id_mapping`) for a given CAN ID (`can_id`), returning the corresponding index if found, otherwise returning 0xff to indicate no match”"
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a callback function associated with a specific filter ID in the `incoming_callbacks` array of a `lin2can_data` structure, either clearing all callbacks if the filter ID is `TRANSLATABLE_ADDRESSES_LEN` or only the callback for the specified filter ID, provided it is within the valid range.""","""Removes a callback function associated with a specific filter ID in the `incoming_callbacks` array of a `lin2can_data` structure, clearing the callback for the specified filter ID if it is within the valid range or clearing all callbacks if the filter ID is `TRANSLATABLE_ADDRESSES_LEN`."""
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a kernel message queue, copies its contents into a `lin_frame` structure, and then calls a user-provided callback function to transmit the frame over CAN, logging debug information during the process.”","""Retrieves a LIN frame from a kernel message queue, copies its contents into a `lin_frame` structure, and then invokes a user-provided callback function to transmit the frame over CAN.”"
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, extracting the relevant data, and invoking a registered callback function with the translated CAN frame and user data.”","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, extracting the relevant data, and invoking a registered callback function with the translated CAN frame and user data.”"
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes the HV shield device by configuring the output enable GPIO pin, clearing the register data structure, updating the shield registers, and enabling the output, returning an error code if any of these operations fail.”","""Initializes the HV shield device by configuring the output enable GPIO pin, clearing the register data structure, updating the shield registers, and enabling the output, returning an error code if any of these operations fail or if the output enable pin fails to set.”"
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the gain value for a specified DAC channel (0 or 1) within the HV shield device, updating the device's internal registers and triggering a device update, returning an error if the DAC channel is invalid”","""Sets the gain value for a specified DAC channel (0 or 1) within the HV shield device, updating the device's internal registers and triggering a device update, returning an error if the DAC channel is invalid or if the update fails”"
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Sets or clears the enable bit for a specific GPIO output pin (0-31) within the HV shield device, adjusting the index based on its position within the register, and then updates the device's register values, returning -EINVAL if the index is out of range”","""Sets or clears the enable bit for a specific GPIO output pin (0-31) within the HV shield device, adjusting the index based on its position within the register, and then updates the device's register values, returning -EINVAL if the index is out of range or -EIO if the update fails”"
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes incoming CAN frames from one device to another by forwarding them using the `can_send` function, logging a warning if the forwarding fails and a debug message indicating the source and destination devices.”","""Routes incoming CAN frames from one device to another by forwarding them using the `can_send` function, logging a warning if the forwarding fails and a debug message indicating the source and destination devices."""
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a specified number of CAN router entries by adding corresponding receive filters to the CAN bus, associating each filter with a callback function and a destination pointer, returning an error code if any registration fails.”","""Registers a specified number of CAN router entries by adding corresponding receive filters to the CAN bus, associating each filter with a callback function and a destination pointer, returning 0 on success or an error code if any registration fails.”"
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Iterates through a statically defined array of CAN router tables, registering each table's entries with the CAN router subsystem, returning an error if any registration fails.”","""Iterates through a statically defined array of CAN router tables, registering each table's entries with the CAN router subsystem, and returning an error if any registration fails.”"
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Iterates through a configured list of GPIO pins, setting the specified pins to a given value if their corresponding bit is set in the input mask, and returning an error code if any GPIO setting operation fails”","""Iterates through a configured list of GPIO pins, setting the specified pins to a given value if their corresponding bit is set in the input mask, returning an error code if any GPIO setting operation fails”"
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Retrieves the number of available callback slots in the abstract LIN driver, storing the result in the provided `free_slots` buffer and returning 0 on success or -EINVAL if the buffer pointer is NULL”","""Retrieves the number of available callback slots in the abstract LIN driver, storing the result in the provided `free_slots` buffer and returning 0 on success or -EINVAL if the buffer pointer is NULL.”"
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a LIN frame with a specific ID and size is received, storing the callback and associated data in a lookup table, returning an error code if the input parameters are invalid or if the callback table is full.”","""Registers a callback function to be invoked when a LIN frame with a specific ID and size is received, storing the callback and associated data in a lookup table, returning an error code if the input parameters are invalid or if the callback table is full.”"
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers an outgoing callback function for a specific LIN frame ID and size within a device's abstract LIN data structure, returning 0 on success or an error code if the callback is invalid or the frame ID/size is out of range, or if no free callback slots are available.”","""Registers an outgoing callback function for a specific LIN frame ID and size within a device's abstract LIN data structure, returning 0 on success or an error code if the callback is invalid or the frame ID/size is out of range, or if no free callback slots are available.”"
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a given abstract LIN scheduler, ensuring mutual exclusion via a semaphore, resetting the current entry index to 0, and returning an error if the table index is out of bounds”","""Sets the active table index for a given abstract LIN scheduler, ensuring mutual exclusion via a semaphore, resetting the current entry index to 0, and returning an error if the table index is out of bounds or if the scheduler was previously active”"
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a given abstract LIN scheduler by setting its current table index to -1 and releasing a semaphore, ensuring that no further messages are processed from the scheduler's current table.""","""Disables a given abstract LIN scheduler by setting its current table index to -1 and releasing a semaphore, preventing further message processing from the scheduler's current table."""

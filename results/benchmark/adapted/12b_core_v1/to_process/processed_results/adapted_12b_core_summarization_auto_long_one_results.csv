id,language,reference,generated,generated_rci
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Validates that the provided 'datatype' is supported, then returns true if the 'value' is an instance of the specified 'datatype' using its associated type constructor.""","""Validates that the provided 'datatype' is supported, then returns true if the 'value' is an instance of the specified 'datatype' according to its associated type constructor."""
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a given value or list of values are all integers within a specified range, considering whether the integer is signed or unsigned and the number of bits.""","""Checks if a given value or list of values are all integers within a specified range, considering whether the integer is signed or unsigned and the number of bits, returning True if all values satisfy these conditions."""
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Retrieves a tuple containing the datatype name, a callable, and a list of subtypes from a predefined list of datatypes if the provided 'datatype' matches a known name, otherwise returns None.""","""Searches a predefined list of datatypes for a match to the provided 'datatype' and returns a tuple containing the datatype name, a callable, and a list of subtypes if found, otherwise returns None."""
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Extracts a dictionary of namespaced datatypes from a fully qualified name (fqn) by iterating through a list of dynamic datatypes and returning a dictionary where keys are the last segment of the fqn and values are the full fqn of the matching datatype.""","""Extracts a dictionary of namespaced datatypes from a fully qualified name (fqn) by iterating through a list of dynamic datatypes and returning a dictionary where keys are the last segment of the fqn and values are the full fqn of the matching datatype, logging the result if found."""
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') into an ApiGearType object, handling basic types, floating-point types, booleans, strings, and arrays.""","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') into an ApiGearType object, handling basic types, floating-point types, booleans, strings, and array types."""
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Generates an `ApiGearProperty` object from a `VSSNode` and a specified datatype, using the `get_apigear_datatype` function to map the datatype to an `ApiGear` type, and populating the property's description if available in the node's VSS data.""","""Generates an `ApiGearProperty` object from a `VSSNode` and a specified datatype, returning `None` if the datatype is not supported, and populating the property's description if available in the node's VSS data."""
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges multiple VSpec files from a list of paths, optionally including specified include directories, and returns a single combined VSpec object after logging the process and raising an exception if no specs are loaded.""","""Loads and merges multiple VSpec files from a list of paths, optionally including specified include directories, and returns a single combined VSpec object after logging the process and raising an exception if no specs are loaded, or if any of the specified paths are invalid."""
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively updates a dictionary 'base' with the contents of another dictionary 'update', merging nested dictionaries and overwriting non-dictionary values.""","""Recursively updates a dictionary 'base' with the contents of another dictionary 'update', merging nested dictionaries and overwriting non-dictionary values in the 'base' dictionary."""
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates that the input 'v' is a hexadecimal string matching the pattern '0x[0-9A-Fa-f]{8}' and returns the input if valid, otherwise raises an assertion error.""","""Validates that the input 'v' is a hexadecimal string matching the pattern '0x[0-9A-Fa-f]{8}' and returns the input if valid, otherwise raises an assertion error."""
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Creates a VSSRaw object from a dictionary and attempts to resolve it, returning the object (potentially an incomplete version) if resolution fails.""","""Creates a VSSRaw object from a dictionary, attempts to resolve it, and returns the object, logging a debug message if resolution fails."""
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Validates that all provided 'values' are valid datatypes by checking if each value exists within a predefined list of known datatypes, raising an assertion error if an invalid datatype is found.""","""Validates that all provided 'values' are valid datatypes by checking if each value exists within a predefined list of known datatypes, raising an assertion error if an invalid datatype is found and returning the original list if all values are valid."""
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Recursively traverses a VSSNode tree, extracting specified attributes from each node and formatting them into a string representation suitable for rendering as a tree structure.""","""Recursively traverses a VSSNode tree, extracting specified attributes from each node and formatting them into a string representation suitable for rendering as a tree structure, including attribute names and values."""
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Recursively traverses up the parent chain of a VSSNode to find the root instance node, incrementing the depth counter with each level of recursion, and raising a NoInstanceRootException if the root is not found.""","""Recursively traverses up the parent chain of a VSSNode to find the root instance node, incrementing the depth counter with each level of recursion, and raising a NoInstanceRootException if the root is not found or if the current node is not an instance."""
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a VSSDataBranch object, returning 1 if an instance child is found and 0 otherwise.""","""Recursively counts the depth of instance children within a VSSDataBranch object, returning 1 plus the depth of the instance child if found, and 0 otherwise."""
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Returns a list of node IDs from the input list that have a parent node with the specified name.""","""Returns a list of node IDs from the input list whose expected parent node has the specified name."""
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Retrieves the value of an attribute from an object, returning a default value if the attribute is not found or is None.""","""Retrieves the value of an attribute from an object, returning a default value if the attribute is not found or is None."""
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Traverses a VSS signal tree, extracts and writes proto imports for nested data types, and then generates proto messages for each branch node, including optional fields if specified.""","""Traverses a VSS signal tree, extracts and writes proto imports for nested data types, and then generates proto messages for each branch node, optionally including optional fields."""
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Traverses a VSS tree to identify and collect the fully qualified names of all instance nodes (nodes with the 'is_instance' flag set) that are not themselves parents of other instance nodes, grouping them by their instance root node.""","""Traverses a VSS tree to identify and collect the fully qualified names of all instance nodes (nodes with the 'is_instance' flag set) that are not themselves parents of other instance nodes, grouping them by their instance root node."""
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Returns true if the given VSSNode's data is a VSSDataDatatype, otherwise returns false.""","""Returns true if the given VSSNode's data is a VSSDataDatatype, otherwise returns false."""
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a VSSNode's data is a VSSDataBranch and if that branch is not an instance, returning True if so, otherwise returning False.""","""Checks if a VSSNode's data is a VSSDataBranch and if that branch is not an instance, returning True if so, otherwise returning False."""
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a given VSSNode's data is a VSSDataBranch and if that branch is marked as an instance, returning True if both conditions are met, otherwise False.""","""Checks if a given VSSNode's data is a VSSDataBranch and if that branch is marked as an instance, returning True if both conditions are met, otherwise False."""
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string using a specified prime number and bitwise operations.""","""Calculates a 32-bit FNV-1a hash value for a given byte string by iterating through each byte, multiplying the hash by a prime number, applying a bitwise AND operation, and XORing with the current byte."""
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates the card fragment layout, finds the card title and icon views, and returns the root view.""","""Inflates the card fragment layout, finds the card title and icon views, and returns the root view."""
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button.""","""Updates the visibility and content of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` object, setting its icon and click listener if the control is not null, otherwise hiding the button."""
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its title, subtitle, optional image, and tap-for-more text elements.""","""Lazily initializes and returns a `View` representing a descriptive text-only layout, inflating it from a `ViewStub` and retrieving references to its title, subtitle, optional image, and tap-for-more text elements."""
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the header view of a card by setting its visibility, title, and icon within the main thread of the activity.""","""Updates the header view of a card by setting its visibility, title, and icon within the main thread of the activity, ensuring UI updates are performed safely."""
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Lazily initializes and returns a `View` representing a text block layout, inflating it from a `ViewStub` and retrieving references to its `text_block` and `tap_for_more_text` child views.""","""Lazily initializes and returns a `View` representing a text block layout, inflating it from a `ViewStub` and retrieving references to its `text_block` and `tap_for_more_text` child views if it hasn't been initialized already."""
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Retrieves the default `ComponentName` of a media browsing service within a specified package by querying the `PackageManager` for services that implement `MediaBrowserService.SERVICE_INTERFACE`.""","""Retrieves the default `ComponentName` of a media browsing service within a specified package by querying the `PackageManager` for services that implement `MediaBrowserService.SERVICE_INTERFACE`, returning null if no such service is found."""
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a given component should be added to the launchables list based on its package name, app type, and whether it's a custom media component, returning false if the package is hidden or if it's a custom media component that shouldn't be launched.""","""Determines whether a given component should be added to the launchables list based on its package name, app type, and whether it's a custom media component, returning false if the package is hidden or if it's a custom media component that shouldn't be launched."""
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Sets the media source of a specified component to browse mode and finishes the activity if the context is an activity, handling potential `CarNotConnectedException` errors.""","""Sets the media source of a specified component to browse mode and finishes the activity if the context is an activity, handling potential `CarNotConnectedException` errors by logging an error."""
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a given activity within a specified package is distraction optimized using the `CarPackageManager`, handling potential `CarNotConnectedException` errors.""","""Determines if a given activity within a specified package is distraction optimized using the `CarPackageManager`, returning `false` if the car is not connected or an exception occurs."""
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Retrieves a preferred `Intent` for launching maps applications, prioritizing those specified in `config_homeCardPreferredMapActivities` and falling back to the default maps activity if no preferred activity is found or if the preferred activity is invalid.""","""Retrieves a preferred `Intent` for launching maps applications, prioritizing those specified in `config_homeCardPreferredMapActivities` and falling back to the default maps activity if no preferred activity is found or if the preferred activity is invalid or cannot be resolved."""
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding them to the fragment manager to be displayed in the UI.""","""Lazily initializes a set of `HomeCardModule` instances by dynamically creating them via reflection from a list of class names, setting a `ViewModelProvider` for each, and then adding them to the fragment manager to be displayed in the UI, logging any instantiation errors."""
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Removes dangling tasks from the ActivityTaskManager that were found in a list of `TaskAppearedInfo` objects, specifically targeting those in multi-window mode.""","""Removes dangling tasks from the ActivityTaskManager that were found in a list of `TaskAppearedInfo` objects, specifically targeting those in multi-window mode and logging their removal."""
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Parses the application mode from the intent, sets the title of the activity and toolbar to the corresponding title string ID.""","""Parses the application mode from the intent and sets the activity and toolbar titles accordingly."""
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Lazily initializes and returns a `Chronometer` view and its separator from the layout, if not already initialized.""","""Lazily initializes and returns a `Chronometer` view and its separator from the layout, if not already initialized."""
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Lazily initializes and returns a `View` representing the media layout, inflating it from a `ViewStub` if it doesn't already exist, and then initializes the presenter's controls action bar with the media control bar view.""","""Lazily initializes and returns a `View` representing the media layout, inflating it from a `ViewStub` if it doesn't already exist, and then initializes the presenter's controls action bar with the media control bar view found within the layout."""
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the card's background image with a visual transition.""","""Updates the card's background image by scaling a provided `Drawable` to a square, blurring it, and setting it as the card's background image."""
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Sets the visibility of the media layout view to visible and updates the text of the title and subtitle views with the provided title and subtitle strings.""","""Sets the visibility of the media layout view to visible and updates the title and subtitle text views with the provided title and subtitle strings."""
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Updates the visibility and state of a chronometer and separator based on the start time provided by a `DescriptiveTextWithControlsView`, displaying them if the start time is positive and hiding them otherwise.""","""Updates the visibility and state of a chronometer and separator based on the start time provided by a `DescriptiveTextWithControlsView`, showing the chronometer and separator if the start time is positive and hiding them otherwise."""
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback to a given `Call` object to receive updates about its state, handling null `Call` objects gracefully.""","""Registers a callback to a given `Call` object to receive updates about its state, handling null `Call` objects gracefully."""
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback for the removed call.""","""Removes the current call, clears associated data, updates the presenter, and unregisters the callback for the removed call if a call was provided."""
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and other call-related UI elements, and then notifies the presenter that the model has been updated.""","""Formats a phone number, creates a `DescriptiveTextWithControlsView` with the formatted number and other call-related UI elements, and then notifies the presenter that the model has been updated."""
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes the mute, end call, and dialpad buttons for an in-call UI, configuring their icons and click listeners to control call muting, disconnection, and dialpad access respectively.""","""Initializes the mute, end call, and dialpad buttons for an in-call UI, configuring their icons and click listeners to control call muting, disconnection, and dialpad access."""
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a listener that the D-Bus connection is available, if the connection is currently connected.""","""Notifies a listener that the D-Bus connection is available, if the connection is currently connected, ignoring the subscription information."""
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Associates a given thread with a D-Bus connection, ensuring the thread is tracked for proper cleanup on exit, but only if the connection is already registered.""","""Associates a given thread with a D-Bus connection, ensuring the thread is tracked for proper cleanup on exit if the connection is already registered."""
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Removes a D-Bus watch by stopping its associated `DBusWatch` object if it's ready and clearing the watch's data, handling potential null pointers for both the watch context and the `DBusWatch` object.""","""Removes a D-Bus watch by stopping its associated `DBusWatch` object if it's ready and clearing the watch's data, handling potential null pointers for the watch context and the `DBusWatch` object."""
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Handles D-Bus watch events by either creating a new `DBusWatch` object to monitor a connection or toggling the watch state of an existing one, based on its readiness and the provided context.""","""Handles D-Bus watch events by either creating a new `DBusWatch` object to monitor a connection or toggling the watch state of an existing one, based on its readiness and the provided context, and ensuring proper dispatch source management."""
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Returns a shared pointer to a `DBusObjectManager` instance, lazily creating one if it doesn't already exist, ensuring thread-safe access via a mutex.""","""Returns a shared pointer to a `DBusObjectManager` instance, lazily creating one if it doesn't already exist, and ensuring thread-safe access via a mutex."""
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a service name from the D-Bus connection, decrementing its usage count and calling `dbus_bus_release_name` if the count reaches zero, returning `true` if the release was successful and `false` otherwise.""","""Releases a service name from the D-Bus connection, decrementing its usage count and calling `dbus_bus_release_name` if the count reaches zero, returning `true` if the release was successful and `false` if the service name was not found or the release failed."""
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a `DBusPendingCall` object into a `DBusMessage` object, extracting the reply from the pending call and returning a new `DBusMessage` instance, or an empty `DBusMessage` if the input is invalid.""","""Converts a `DBusPendingCall` object into a `DBusMessage` object, extracting the reply from the pending call and returning a new `DBusMessage` instance, or an empty `DBusMessage` if the input is invalid or the call fails."""
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all pending `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector, ensuring proper cleanup and preventing memory leaks.""","""Deletes all pending `DBusMessageReplyAsyncHandler` objects stored in a thread-safe vector, ensuring proper cleanup and preventing memory leaks."""
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through all registered signal handlers and calls their `onSpecificError` method with a `SUCCESS` status for each signal tag they are tracking, ensuring thread-safe access to the signal state handlers map.""","""Iterates through all registered signal handlers and calls their `onSpecificError` method with a `SUCCESS` status for each signal tag they are tracking, ensuring thread-safe access to the signal state handlers map."""
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Removes a connection from the internal map of connections, protected by a mutex, if the given connection ID exists.""","""Removes a connection from the internal map of connections, protected by a mutex, if the given connection ID exists."""
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Handles a D-Bus message by dispatching it to the appropriate handler within the `instanceAvblStatusEvent_` object based on whether the message contains the ""InterfacesAdded"" or ""InterfacesRemoved"" member.""","""Handles a D-Bus message by dispatching it to the appropriate handler within the `instanceAvblStatusEvent_` object based on whether the message contains the ""InterfacesAdded"" or ""InterfacesRemoved"" member, signaling the addition or removal of interfaces."""
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves a list of available service instances for a given service and object path from the D-Bus registry, populating the provided `_availableServiceInstances` vector and setting the `_status` to `SUCCESS` if successful.""","""Retrieves a list of available service instances for a given service and object path from the D-Bus registry, populating the provided `_availableServiceInstances` vector and setting the `_status` to `SUCCESS` if successful, or `CommonAPI::CallStatus::ERROR` otherwise."""
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Retrieves the availability status of a given service instance by translating a CommonAPI address to a DBus address and checking if the instance is alive in the DBus registry, setting the `AvailabilityStatus` and `CallStatus` accordingly.""","""Retrieves the availability status of a given service instance by translating a CommonAPI address to a DBus address and checking if the instance is alive in the DBus registry, setting the `AvailabilityStatus` and `CallStatus` accordingly."""
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Parses a `DBusMessage` containing an object path and a list of interfaces, then iterates through the interfaces to remove them from the local proxy if the message corresponds to the observed interface, and notifies the interface status as unavailable.""","""Parses a `DBusMessage` containing an object path and a list of interfaces, then removes the interfaces from the local proxy if the message corresponds to the observed interface and notifies the interface status as unavailable."""
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Translates a D-Bus address (service, object path, interface name) to a CommonAPI address and then notifies listeners of a change in the availability status of the corresponding interface.""","""Translates a D-Bus address (service, object path, interface name) to a CommonAPI address and then notifies listeners of a change in the availability status of the corresponding interface."""
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Registers a listener with a given subscription to receive specific DBus proxy status events by pushing a function call to the main loop via the DBus connection.""","""Registers a listener with a given subscription to receive specific DBus proxy status events by pushing a function call to the main loop via the DBus connection, ensuring thread safety with a mutex."""
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a listener from the `listeners_` map associated with a given subscription, ensuring thread safety via a mutex.""","Removes a listener from the `listeners_` map associated with a given subscription, ensuring thread safety via a mutex and handling potential iterator invalidation during removal."
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a given `DBusSignalHandler` to the `DBusProxyConnection`'s handler list for a specific subscription ID.""","""Adds a given `DBusSignalHandler` to the `DBusProxyConnection`'s handler list for a specific subscription ID, enabling the handler to receive signals associated with that subscription."""
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function.""","""Handles the asynchronous callback for retrieving available instances of a DBus proxy, translating the DBus addresses to strings and passing the status and instances to the provided callback function."""
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles incoming D-Bus messages by looking up a registered handler for the object path and interface name, calling the handler's `onInterfaceDBusMessage` method if found, or handling introspection requests if no handler is registered.""","""Handles incoming D-Bus messages by looking up a registered handler for the object path and interface name, calling the handler's `onInterfaceDBusMessage` method if found, or handling introspection requests if no handler is registered, returning `true` if the message was handled and `false` otherwise."""
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a `DBusInterfaceHandler` to a table of registered handlers for a given `DBusInterfaceHandlerPath`, returning `true` if successful or if the handler is already registered for a specific interface (org.freedesktop.DBus.ObjectManager or org.freedesktop.DBus.Properties), and `false` otherwise.""","""Adds a `DBusInterfaceHandler` to a table of registered handlers for a given `DBusInterfaceHandlerPath`, returning `true` if successful or if the handler is already registered for a specific interface (org.freedesktop.DBus.ObjectManager or org.freedesktop.DBus.Properties), and `false` otherwise, preventing duplicate registrations for those interfaces."""
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, ensuring that the handler is not already registered for that path and updating the handler list if it is.""","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_` for a given `DBusInterfaceHandlerPath`, adding it to the handler list if it's not already present for that path."""
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS positive reset response message (containing a positive reset SID and the reset type) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS positive reset response message (containing a positive reset SID and the reset type) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles an ECU reset request by validating the message length, determining the reset type (hard or soft), sending a positive or negative response accordingly, and initiating a system reboot if a hard reset is requested.""","""Handles an ECU reset request by validating the message length, determining the reset type (hard or soft), sending a positive or negative response accordingly, and initiating a system reboot if a hard reset is requested, logging debug information for hard resets."""
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Constructs and sends a 4-byte UDS positive response message (containing a positive response code and a block size of 258) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 4-byte UDS positive response message (containing a positive response code and a block size of 258) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Constructs and sends a 2-byte UDS transfer data response message (containing a positive transfer data SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 2-byte UDS transfer data response message (containing a positive transfer data SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Constructs and sends a 5-byte UDS routine control result message (containing a positive SID, a sub-function code, the routine ID, and the result) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”","""Constructs and sends a 5-byte UDS routine control result message (containing a positive SID, a sub-function code, the routine ID, and the result) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails”"
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a 1-byte UDS positive response message (specifically, a request transfer exit positive response) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails.”","""Sends a 1-byte UDS positive response message (specifically, a request transfer exit positive response) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails.”"
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Maps a given CAN ID to a corresponding index within the `id_mapping` array, returning the index if found or 0xff if the ID is not present in the mapping.""","""Maps a given CAN ID to a corresponding index within the `id_mapping` array, returning the index if found or 0xff if the ID is not present in the mapping."""
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a specified CAN filter by setting the corresponding callback function to NULL in the device's data structure, or clears all incoming callbacks if the filter ID is equal to the length of the translatable addresses array.""","""Removes a specified CAN filter by setting the corresponding callback function to NULL in the device's data structure, or clears all incoming callbacks if the filter ID is equal to the length of the translatable addresses array."""
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a message queue, copies its contents into a provided LIN frame structure, and then calls a user-defined callback function to transmit the frame over CAN, logging debug information during the process.”","""Retrieves a LIN frame from a message queue, copies its contents into a provided LIN frame structure, and then calls a user-defined callback function to transmit the frame over CAN, logging debug information if the retrieval fails.”"
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, extracting the relevant data, and invoking a registered callback function with the translated CAN frame and user data.""","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, extracting the relevant data, and invoking a registered callback function with the translated CAN frame and user data."""
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device's internal registers, updating the shield's state, and enabling the shield, logging errors if any of these steps fail.""","""Initializes the HV shield device by configuring the output enable GPIO pin, initializing the device's internal registers, updating the shield's state, and enabling the shield, returning an error code if any of these steps fail."""
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the gain value of a specified DAC (Digital-to-Analog Converter) channel (0 or 1) within the HV shield device's registers and then updates the device's configuration, returning an error if the DAC channel is invalid.""","""Sets the gain value of a specified DAC (Digital-to-Analog Converter) channel (0 or 1) within the HV shield device's registers, then updates the device's configuration, returning an error if the DAC channel is invalid."""
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Configures the output enable bit for a specific GPIO pin (0-31) on the HV shield device by setting or clearing the corresponding bit in the `gpio_output` register, and then updates the device's hardware state.""","""Configures the output enable bit for a specific GPIO pin (0-31) on the HV shield device by setting or clearing the corresponding bit in the `gpio_output` register, and then updates the device's hardware state, returning an error if the index is out of range."""
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes incoming CAN frames from one device to another by sending them to a specified destination device using the `can_send` function, logging warnings for transmission failures and debug messages for successful routing.""","""Routes incoming CAN frames from one device to another by sending them to a specified destination device using the `can_send` function, logging warnings for transmission failures and debug messages for successful routing."""
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a specified number of CAN router entries by adding corresponding receive filters to the CAN bus, associating each filter with a callback function and a destination address, and logging errors if any registration fails.""","""Registers a specified number of CAN router entries by adding corresponding receive filters to the CAN bus, associating each filter with a callback function and a destination address, and returning an error code if any registration fails."""
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Initializes the CAN router by iterating through a predefined table of CAN router entries and registering each entry with the CAN router subsystem, returning an error if registration fails.""","""Initializes the CAN router by registering each entry from a predefined table of CAN router entries, returning an error if any registration fails."""
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Iterates through a configuration of GPIO pins, setting the specified pins to a given value if they are included in a bitmask, and returning an error if any individual pin setting fails.""","""Iterates through a configuration of GPIO pins, setting the specified pins to a given value if they are included in a bitmask, and returning an error if any individual pin setting fails."""
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Retrieves the number of available callback slots in the abstract LIN driver for a given device, returning an error if the provided pointer is null.""","""Calculates and returns the number of free callback slots available in the abstract LIN driver for a given device, returning an error if the provided pointer is null."""
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a specific frame ID is received over the abstract LIN bus, validating the input parameters and allocating a slot in the callback table for the new incoming message handler.""","""Registers a callback function to be invoked when a specific frame ID is received over the abstract LIN bus, validating input parameters and allocating a slot in the callback table for the new incoming message handler."""
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers a callback function to be invoked when a specific outgoing LIN frame with a given ID and size is transmitted, storing the callback and associated data in a lookup table, and returning an error if the input parameters are invalid or the table is full.”","""Registers a callback function to be invoked when a specific outgoing LIN frame with a given ID and size is transmitted, storing the callback and associated data in a lookup table, and returning an error if the input parameters are invalid or the table is full.”"
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a given abstract LIN scheduler, ensuring exclusive access via a semaphore and resetting the current entry index to the beginning of the table.""","""Sets the active table index for a given abstract LIN scheduler, ensuring exclusive access via a semaphore and resetting the current entry index to the beginning of the table, returning an error if the table index is out of bounds."""
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a given abstract LIN scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active.""","""Disables a given abstract LIN scheduler by setting its current table index to -1 and blocking until the scheduler is no longer active, ensuring exclusive access via a semaphore."""

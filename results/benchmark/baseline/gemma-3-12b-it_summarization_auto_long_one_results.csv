id,language,reference,generated
1,python,"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes","""Determines if a given 'check' type is a subtype of a 'base' type by verifying both types exist and then checking if the 'check' type's name is in the 'base' type's subtype list or if they are identical."""
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","""Retrieves the type definition for the given 'datatype', then validates if the 'value' conforms to that type using its associated validation function."""
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness","""Checks if a given value or list of values are valid integers within a specified range, considering whether the integer is signed or unsigned and the number of bits."""
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","""Searches a list of predefined datatypes for a match to the input 'datatype' and returns a tuple containing the datatype name, a callable, and a list of strings if found, otherwise returns None."""
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"""Extracts and returns a dictionary of namespaced datatypes from a fully qualified name (FQN), searching within a predefined list of dynamic datatypes and returning the last component of the FQN as the key and the full datatype string as the value if a prefix match is found."""
6,python,Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name,"""Recursively populates a dictionary with unique node names from a VSSNode tree, incrementing a counter and appending fully qualified names to a list for each node, ensuring that only unique node names are stored."""
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","""Converts a string representation of a data type (e.g., 'int32', 'string', 'double[]') into an ApiGearType object, handling basic types, floating-point types, booleans, strings, and arrays while replacing periods in the type name with underscores."""
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","""Generates an `ApiGearProperty` object based on a `VSSNode` and its associated datatype, retrieving the corresponding `apigear_type` and node description, while logging a warning and returning `None` if the datatype is unsupported."""
9,python,"Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects","""Recursively gathers vehicle specification objects (VSpecs) from a given specification file and its included files, resolving paths and accumulating them into a list, optionally applying a prefix to the specifications."""
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","""Loads and merges VSpec objects from a list of specification files, optionally including additional include directories and an identifier, logging the process and raising an exception if no specifications are loaded."""
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","""Recursively merges the contents of the 'update' dictionary into the 'base' dictionary, updating nested dictionaries and overwriting non-dictionary values."""
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","""Validates that a given string 'v' is a valid constant UID (constUID) by checking if it matches the pattern '0x' followed by eight hexadecimal characters, returning the original string if valid or None if it was initially None."""
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","""Retrieves and resolves a VSSRaw object from a dictionary of data and an optional fully qualified name, handling potential validation or model resolution errors by logging a debug message and returning an initialized, potentially incomplete, VSSRaw object."""
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","""Verifies that all datatypes within the input list 'values' are present in a predefined list of valid datatypes, raising an assertion error if an invalid datatype is encountered, and returning the original list if all datatypes are valid."""
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","""Generates a string representation of a VSSNode tree structure, recursively traversing the tree and including node names and specified attributes (if they exist and are strings or other renderable types) with appropriate indentation."""
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","""Traverses up the parent chain of a VSSNode to find the root instance node, incrementing the depth with each step, and raising an exception if the current node is not an instance or if the root is not reachable."""
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"""Recursively counts the depth of instance children within a tree structure where each node has a 'children' attribute and data that may be a 'VSSDataBranch' with an 'is_instance' flag."""
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"""Identifies and returns a list of node IDs from a given list where the expected parent of each node matches the specified name."""
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","""Safely retrieves an attribute from an object by name, returning a provided default value if the attribute is not found or is None."""
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"""Traverses a signal tree, extracts and writes necessary proto imports based on data types, and then generates proto messages for each branch within the tree, incorporating static UIDs and optional fields as specified."""
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","""Traverses a VSSNode tree to identify and group instance names belonging to their respective root nodes, excluding nodes with nested instance branches, and returns a dictionary mapping root fully qualified names to lists of their instance names."""
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,"""Determines if a given VSSNode represents a leaf node by checking if its 'data' attribute is an instance of the VSSDataDatatype class."""
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,"""Checks if a given VSSNode represents a VSS branch by verifying that its data is a VSSDataBranch and that the branch is not an instance."""
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,"""Checks if a given VSSNode represents an instance of a VSSDataBranch by verifying that its data is a VSSDataBranch and that the branch's 'is_instance' flag is set to True."""
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte","""Calculates a 32-bit FNV-1a hash value for a given byte string using a chained multiplication and XOR operation."""
26,java,"Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with both a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`","""Lazily initializes and returns a `HomeAudioCardPresenter`, configuring its data models with a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is present, otherwise logging a warning and using only the `InCallModel`."""
27,java,"Lazily initializes and returns an `AudioFragment`, bidirectionally linking it with its presenter upon first creation","""Lazily initializes and returns an `AudioFragment` (as the `HomeCardFragment`), setting and getting the `CardPresenter` to establish a connection between the view and presenter."""
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","""Inflates a layout (`card_fragment`) to create a view, finds the `card_name` and `card_icon` views within it, and returns the inflated root view."""
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","""Updates the visibility and properties (icon and click listener) of an `ImageButton` based on the provided `DescriptiveTextWithControlsView.Control` content, displaying it if the content is not null and hiding it otherwise."""
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","""Lazily initializes and returns a `View` inflated from a `ViewStub` containing descriptive text elements (title, subtitle, optional image, and tap-for-more text) if it hasn't been created yet."""
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"""Updates the header view of a card by making a UI update on the main thread to set the card title and icon based on the provided `CardHeader` object, and ensuring the root view is visible."""
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","""Lazily initializes and returns a `View` representing a text block layout, inflating it from a `ViewStub` and retrieving references to its `text_block` and `tap_for_more_text` child views if it hasn't been initialized before."""
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist","""Queries the system for a media browsing service within a specified package, returning its component name if found, otherwise returning null."""
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","""Determines whether a component should be added to launchables based on a blacklist of package names, custom media component configurations, and the component's application type, logging an error for invalid application types."""
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","""Selects a media source and finishes the activity, setting the media source mode to browse for a given component name using a `CarMediaManager`, while handling potential `CarNotConnectedException` errors."""
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","""Checks if a specified activity within a given package is distraction optimized by querying the `CarPackageManager`, handling potential `CarNotConnectedException` errors and returning a boolean indicating the optimization status."""
37,java,"Initializes a `TaskViewManager` to asynchronously create a `TaskView`, which upon creation is configured with a listener, added to the parent `ViewGroup`, and stored as a member variable","""Creates and sets up a `TaskViewManager` to dynamically create a `TaskView` within a parent view group, attaching a listener and adding the view to the parent after creation."""
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","""Constructs an `Intent` to launch a maps application, prioritizing those specified in `config_homeCardPreferredMapActivities` while falling back to the system default if no preferred activity is found or if the URI is invalid."""
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","""Dynamically instantiates and initializes `HomeCardModule` classes specified in a resource array, sets a `ViewModelProvider` for each, adds them to a set, and then uses a `FragmentTransaction` to replace resources with the corresponding card views."""
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","""Iterates through a list of `TaskAppearedInfo` objects, identifies tasks running in multi-window mode, and removes them using `ActivityTaskManager` to clean up potentially dangling tasks."""
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"""Parses the application mode from the intent, sets the activity title, and updates the toolbar title with the corresponding string ID."""
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","""Lazily initializes and returns a `Chronometer` view found within a layout, also retrieving and storing a separator view associated with the timer."""
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","""Lazily initializes and returns a `View` obtained by inflating a `ViewStub` with the ID `media_layout`, finds its title, subtitle, and control bar elements, and initializes the control bar using the presenter."""
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","""Scales a provided `Drawable` to a square size, blurs it, and sets it as the blurred background image of a card, ensuring visibility if the image and card size are valid."""
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,"""Updates the visibility and text content of a media layout view by setting the title and subtitle text fields."""
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","""Conditionally displays and starts a chronometer to track audio duration based on the provided `startTime` within a `DescriptiveTextWithControlsView`, also showing a separator if the start time is valid."""
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"""Registers a callback with the provided `Call` object to receive updates related to the call, ensuring the callback is only registered if the `Call` object is not null."""
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","""Removes the current call, clears associated content, notifies the presenter of the update, and unregisters the callback from the removed call if it exists."""
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","""Formats a phone number, creates a `DescriptiveTextWithControlsView` using the formatted number and other UI elements, and then notifies the presenter that the model has been updated."""
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","""Initializes three control buttons – mute, end call, and dialpad – within an audio control system, assigning icons and associated actions to toggle mute status, disconnect the call, and open the dialpad respectively."""
51,cpp,"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails","""Sends a `DBusMessage` over a D-Bus connection, returning `true` on success and `false` if the message is null, the connection is not established, or the send operation fails."""
52,cpp,"Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID","""Creates a D-Bus signal message with the specified object path, interface name, signal name, and destination ID, returning the constructed message."""
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active","""Notifies a newly added listener with an `AvailabilityStatus::AVAILABLE` event if the D-Bus connection is currently connected."""
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","""Associates a given thread with a connection identifier, ensuring the thread is added to a list of threads to be joined upon exit if the connection already exists."""
55,cpp,Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method,"""Wakes up a `MainLoopContext` by acquiring a lock on its `weak_ptr`, ensuring thread-safe access and triggering a wakeup event if the context is still valid."""
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"""Handles the removal of a D-Bus watch by stopping its monitoring if ready, clearing its associated data, and logging an error if the provided context data is null."""
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","""Handles D-Bus watch toggling events by either initializing and starting a `DBusWatch` object or stopping and removing an existing one based on its readiness state, ensuring proper management of D-Bus monitoring within a given context."""
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","""Lazily initializes and returns a shared pointer to a `DBusObjectManager` instance, ensuring thread-safe creation using a mutex if it doesn't already exist, and associating it with the current `DBusConnection`."""
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","""Releases a D-Bus service name by either removing it if only one instance exists or decrementing its count, using `dbus_bus_release_name` and handling potential errors while ensuring thread safety with a recursive mutex."""
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","""Converts a `DBusPendingCall` object into a `DBusMessage` object by stealing the reply from the pending call and returning the resulting message, handling null input and returning an empty message on error."""
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"""Deletes all asynchronous DBus message reply handlers stored in a protected vector by first safely acquiring a lock, copying the handlers to a temporary vector, clearing the protected vector, and then iterating through the temporary vector to delete each handler."""
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"""Iterates through registered D-Bus signal handlers and their associated tags, notifying each handler of a successful call status for each tag after acquiring a lock to protect the signal state handlers map."""
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists","""Releases a connection identified by `_connectionId` from the `connections_` map by removing it under the protection of a recursive mutex, ensuring thread-safe access and deletion."""
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","""Dispatches a received D-Bus message to the appropriate handler within the `instanceAvblStatusEvent_` object based on whether the message contains the 'InterfacesAdded' or 'InterfacesRemoved' member."""
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","""Retrieves available service instances from a D-Bus registry, populates a vector with their addresses, and sets a success status, translating the registry's data into a usable format."""
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","""Determines the availability status of a specified service instance on D-Bus by translating a common address to a D-Bus address and checking its existence in the registry, updating the availability status and call status accordingly."""
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","""Processes a D-Bus signal indicating the removal of interfaces, extracts the object path and interface names, and if the observed interface is removed, updates the availability status and notifies listeners."""
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,"""Translates a D-Bus address composed of service, object path, and interface name into a common address format and then notifies listeners about a change in availability status for that address."""
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details","""Adds a listener and subscription, then asynchronously pushes a function call to the main loop to notify the listener via the D-Bus connection, utilizing a weak pointer to the DBusProxy to avoid ownership issues."""
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"""Removes a specified `Listener` from a collection of listeners associated with a `Subscription`, ensuring thread safety via a recursive mutex and iterating through the collection to find and erase the matching listener."""
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"""Adds a signal handler to the underlying D-Bus connection for a specific subscription, enabling the handler to receive and process signals matching that subscription."""
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"""Handles the asynchronous callback for retrieving available service instances, translating D-Bus addresses to strings and passing the status and the translated instances to the provided callback function."""
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","""Handles an incoming `DBusMessage` by attempting to route it to a registered interface handler based on object path and interface name, or by processing it directly if it's an introspection request."""
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","""Adds a `DBusInterfaceHandler` to a table associated with a `DBusInterfaceHandlerPath`, returning `true` if the handler was already present or successfully added, and `false` otherwise, with special handling for specific object manager interfaces."""
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","""Adds a `DBusInterfaceHandler` to the `dbusRegisteredObjectsTable_`, associating it with a given `DBusInterfaceHandlerPath`, ensuring no duplicates are added and returning `true` on success or `false` if the handler already exists."""
76,c,"Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a UDS negative response message, including the original request SID and a negative response code, via ISO-TP over a CAN bus, logging an error if the transmission is unsuccessful."""
77,c,"Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails","""Constructs and transmits a UDS diagnostic session control response message (containing session type and P2/P2* timeouts) over a CAN bus using ISO-TP, logging an error if transmission fails."""
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a 2-byte UDS positive reset response message (containing a calculated positive SID and the reset type) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails."""
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","""Handles an ECU reset request by validating the message length, processing a hard reset request by initiating a system reboot after sending a positive response, and sending a negative response for unsupported reset types or incorrect message formats."""
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","""Sends a UDS positive response message indicating successful initiation of a request download service, including a positive response code, block size, and a derived SID, over a CAN bus using ISO-TP, with error logging on transmission failure."""
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a 2-byte UDS Transfer Data response message (containing a positive SID derived from UDS_SID_TRANSFER_DATA and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails."""
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","""Constructs and transmits a 5-byte UDS routine control result message (containing a positive SID, a sub-function code, the routine ID, and the result) over a CAN bus using ISO-TP, logging an error if transmission fails."""
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","""Sends a 1-byte UDS positive response message (specifically, a request transfer exit confirmation) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails."""
84,c,"Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input","""Converts a raw gain value (1, 2, 4, 8, or 16) into a corresponding enumerated gain level for an HV shield DAC, returning an error if the input is unsupported."""
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","""Translates a 32-bit CAN identifier into an index within a predefined mapping table (id_mapping), returning the index if found, otherwise returning 0xff to indicate no match."""
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","""Removes a CAN receive filter by clearing the callback function associated with a specific filter ID in the lin2can data structure, with special handling to clear all callbacks if the filter ID matches the length of translatable addresses."""
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","""Retrieves a LIN frame from a message queue, copies its data into a provided LIN frame structure, and then invokes a user-defined callback function to transmit the frame over CAN, logging debug information during the process."""
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","""Translates incoming LIN frames into CAN frames by mapping the LIN ID to a CAN ID, extracting data, and invoking a registered callback function with the translated CAN frame and associated user data."""
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","""Initializes a high-voltage shield device by configuring an output enable GPIO pin, clearing register data, updating the shield's registers, and enabling the shield, logging errors during each step."""
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","""Sets the gain value for a specified DAC (0 or 1) within the HV shield device by updating a register and then triggering an update function to apply the new gain setting, returning an error if the DAC number is invalid."""
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","""Configures the output enable state of a specific GPIO pin (within a range of 0-31) on an HV shield device by manipulating a register, adjusting the index based on a modulo operation, and then updating the device's configuration."""
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","""Routes incoming CAN frames received on a device to another device by attempting to immediately send the frame using `can_send` with a callback, logging warnings for transmission failures and debug messages for successful routing."""
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","""Registers a specified number of CAN router entries by adding RX filters for each entry, associating a callback function with the received frames and a destination pointer, returning an error code if any filter addition fails."""
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","""Initializes the CAN router by iterating through a table of CAN router configurations and registering each entry using `can_router_register`, returning an error if registration fails.”"
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","""Iterates through a configured list of GPIO pins, setting the specified pins to a given value based on a bitmask, and returning an error code if any individual GPIO setting operation fails."""
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","""Retrieves the number of available callback slots for an abstract LIN device, calculating it by subtracting the number of used callbacks from the maximum allowed frame count, and returning an error if the provided pointer is null."""
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers an incoming callback function for a specific LIN frame ID and size within a device's abstract LIN data structure, performing input validation and allocating a callback slot, returning an error code if validation fails or no slot is available.”"
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","""Registers an outgoing callback function for a specific LIN frame ID and size within a device's abstract LIN data structure, performing input validation and allocating a callback slot, returning an error code if validation fails or no slot is available.”"
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","""Sets the active table index for a LIN scheduler, ensuring mutual exclusion via a semaphore, resetting the entry index to zero, and returning an error if the table index is out of bounds."""
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","""Disables a LIN scheduler by setting its current table index to -1 and acquiring the 'active' semaphore to prevent further scheduling operations."""

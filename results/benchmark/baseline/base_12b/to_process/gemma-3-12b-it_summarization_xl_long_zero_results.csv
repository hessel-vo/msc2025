id,language,reference,generated,generated_rci
1,python,"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes","The Python code defines a function `is_subtype_of` that checks if a given type `check` is a subtype of another type `base` within a class context, considering inheritance relationships and direct equality.",The Python code defines a function `is_subtype_of` that determines if a type `check` is a subtype of a type `base` by examining inheritance relationships and direct equality within a class's type hierarchy.
2,python,"Raises an exception if the specified 'datatype' is unsupported, otherwise retrieves that type's validation function and returns the boolean result of calling it with the provided 'value'","The function `is_datatype` validates if a given `value` conforms to a specified `datatype` by retrieving the corresponding type checker from a class and applying it to the value, raising an exception if the datatype is unsupported.","The function `is_datatype` checks if a `value` matches a given `datatype` by using a type checker retrieved from a class, raising a `DatatypesException` if the datatype is not supported."
3,python,"Validates that a given value, or each value in a list, is an integer that fits within the numerical range defined by a specified bit-width and signedness",The function `is_xintx` checks if a given integer value or list of integer values falls within a specified range based on the number of bits and whether it's signed.,"The function `is_xintx` validates if an integer or a list of integers is within a defined range, considering the number of bits and whether the integer is signed."
4,python,"Returns the type definition tuple from a class-level list of types that matches the provided 'datatype' name, or returns None if no match is found","The function `get_type` searches a class's `types` attribute (assumed to be a list of tuples) for a tuple matching the given `datatype` string and returns the tuple (containing the datatype, a callable, and a list of strings) if found, otherwise returns `None`.","The function `get_type` searches a class's `types` attribute (a list of tuples) to find a tuple where the first element matches the input `datatype` string, returning the entire tuple (containing a datatype, a callable, and a list of strings) if found, and `None` otherwise."
5,python,Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN,"This function identifies and returns a dictionary of fully qualified namespaced datatypes from a global list (`dynamic_datatypes`) that match a given fully qualified name prefix, excluding exact matches and logging the results for debugging purposes.","This function searches a global list of namespaced datatypes (`dynamic_datatypes`) for entries whose prefixes match a given fully qualified name (`fqn`), returning a dictionary mapping the last component of the matching datatype to its full name, while excluding exact matches and logging the results for debugging."
6,python,Recursively traverses a VSS node tree to populate a dictionary with the occurrence count and a list of fully qualified paths for each unique node name,"The function recursively populates a dictionary with unique node names from a VSSNode tree, incrementing a counter and storing fully qualified names (FQNs) for each node encountered.",The function recursively populates a dictionary with unique node names and their associated counts and fully qualified paths (FQNs) from a VSSNode tree.
7,python,"Parses a type string to create an `ApiGearType` object, mapping common primitive types to their ApiGear equivalents, sanitizing custom type names by replacing dots with underscores, and setting an array flag based on a ""[]"" suffix","The function `get_apigear_datatype` maps a string representation of a data type (e.g., ""int32"", ""string"", ""double[]"") to an `ApiGearType` object, handling array types and basic data types with appropriate conversions and array detection.","The function `get_apigear_datatype` converts a string representation of a data type (e.g., ""int32"", ""string"", ""double[]"") into an `ApiGearType` object, mapping common types to their corresponding `ApiGearBasicType` values and detecting array types."
8,python,"Creates an `ApiGearProperty` by converting the VSS node's datatype to a supported ApiGear type and copying its description, returning `None` and logging a warning if the datatype is not supported","The function `generate_property` creates an `ApiGearProperty` object from a `VSSNode` and a datatype string, populating its type and description if available, while logging a warning if the datatype is unsupported.","The function `generate_property` creates an `ApiGearProperty` object based on a `VSSNode`'s data and a specified datatype, returning `None` if the datatype is unsupported."
9,python,"Recursively parses a given specification file and any files it includes, returning a single, flattened list of all resulting VSpec objects","The Python code recursively gathers `VSpec` objects representing software components and their dependencies from a given specification file and included files, constructing a dependency tree.","The Python code recursively identifies and collects `VSpec` objects, representing software components and their dependencies, by traversing a specification file and its included files to build a dependency tree."
10,python,"Loads and parses multiple VSpec files from specified paths, using a list of include directories, then merges them into a single composite VSpec object and returns it, raising an exception if no files are successfully loaded","This function loads and merges multiple VSpec files (and their included files) into a single VSpec object, logging the process and raising an exception if no specs are loaded.","This function loads, merges, and logs VSpec objects from a list of files, combining them into a single, updated VSpec and raising an exception if no specs are found."
11,python,"Recursively updates a 'base' dictionary with an 'update' dictionary, merging nested dictionaries for common keys and overwriting or adding all other key-value pairs","The function `deep_update` recursively merges a dictionary `update` into a base dictionary `base`, updating nested dictionaries and overwriting non-dictionary values.","The function `deep_update` recursively merges the contents of the `update` dictionary into the `base` dictionary, updating nested dictionaries and overwriting existing values with those from `update`."
12,python,"Asserts that the input value, if not None, is a valid 'constUID' formatted as an 8-digit hexadecimal string prefixed with '0x', returning the value if the check passes","The function validates if a given string is a valid hexadecimal constant UID (in the format ""0xXXXXXXXX"") and returns the string if valid, otherwise returns None.","The function validates if a given string conforms to the ""0xXXXXXXXX"" format for a constant UID and returns the string if valid, raising an assertion error if not."
13,python,"Initializes a VSSRaw model and attempts to resolve it, returning the successfully resolved model or the original unresolved model if resolution fails due to a validation or model error","This function retrieves and resolves raw Vehicle Signal Specification (VSS) data from a dictionary, handling potential validation or model errors by returning an initialized but potentially incomplete VSSRaw object.","This function constructs and attempts to resolve a Vehicle Signal Specification (VSS) raw data object from a dictionary, gracefully handling validation or model errors by returning an initialized VSSRaw object with debug logging."
14,python,"Asserts that each string in the input list is a valid datatype by checking against a master list, returning the original list if all values are valid","The function `check_valid_datatypes` validates a list of datatypes against a predefined set of allowed datatypes, raising an assertion error if any invalid datatype is found.","The function `check_valid_datatypes` verifies that a list of datatypes contains only valid types from a predefined set, raising an assertion error for any invalid entries."
15,python,"Traverses a VSSNode tree to generate a formatted string, displaying each node's name followed by the values of any specified attributes found on it","The function `get_rendered_tree` generates a string representation of a VSSNode tree structure, including node names and specified attributes, formatted for readability.","The function `get_rendered_tree` generates a formatted string representation of a VSSNode tree, displaying node names and selected attributes for each node."
16,python,"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found","The Python code recursively traverses up the VSSNode tree to find the root instance node, incrementing a depth counter, and raising an exception if an instance root cannot be found.","The Python code recursively traverses up the VSSNode tree to locate the root of an instance, tracking the depth of traversal, and raising an exception if no instance root exists."
17,python,Recursively calculates the depth of the first-found branch of children where each node is a `VSSDataBranch` with its `is_instance` flag set,"The Python code recursively counts the depth of instance children within a tree-like structure represented by `self.children`, where each child's data is checked to see if it's a branch containing an instance.","The Python code recursively calculates the depth of instance children within a hierarchical data structure, traversing branches where `is_instance` is true."
18,python,Returns a list of node IDs from an input list whose expected parent's name matches the provided `name`,"The Python code identifies and returns a list of node IDs whose expected parent, as determined by the `get_expected_parent` function, matches the provided name.","The Python code identifies and returns a list of node IDs that have a specified name as their expected parent, using the `get_expected_parent` function to determine parentage."
19,python,"Retrieves an attribute from an object, returning a specified default value if the attribute is missing or its value is `None`","The function safely retrieves an attribute from an object by name, returning a specified default value if the attribute is not found or is None.","The function safely retrieves an attribute from an object by name, returning a provided default value if the attribute is missing or its value is None."
20,python,Generates a `proto3` file from a VSS tree by first writing import statements for complex data types and then converting each branch in the tree into a corresponding protobuf message,"The Python code traverses a signal tree, extracts data type information to generate import statements for protocol buffer definitions, and then writes protocol buffer message definitions to a file based on the tree's structure, incorporating static UIDs and optional fields as specified.","The Python code traverses a signal tree, extracts data type paths to generate import statements for protocol buffer definitions, and then writes protocol buffer message definitions to a file based on the tree's structure, incorporating static UIDs and optional fields as specified."
21,python,"Traverses a VSS tree to find all terminal instance branches, grouping their relative names into a dictionary where each key is the fully qualified name of the original branch they instantiate","The function extracts and organizes metadata about instances within a VSSNode tree, grouping instance names under their respective root FQNs (fully qualified names) for instances that are not themselves containers of other instances.","The function identifies and groups instance names within a VSSNode tree under their root FQNs, excluding instances that contain other instances."
22,python,Checks if a given VSSNode is a leaf by verifying its 'data' attribute is an instance of VSSDataDatatype,The function `is_VSS_leaf` checks if a given VSS node is a leaf node by verifying if its data is an instance of the `VSSDataDatatype` class.,"The function `is_VSS_leaf` determines if a VSS node represents a leaf node in a tree structure, based on whether its `data` attribute is of type `VSSDataDatatype`."
23,python,Returns `True` if the given `VSSNode`'s data is a `VSSDataBranch` and its `is_instance` attribute is `False`,The function `is_VSS_branch` checks if a given VSS node represents a branch with a non-instance VSSDataBranch data type.,The function `is_VSS_branch` determines if a VSS node is a branch node containing a non-instance VSSDataBranch.
24,python,Returns True if the node's data is a VSSDataBranch and its 'is_instance' attribute is True,The function `is_VSS_branch_instance` checks if a given VSS node represents an instance of a VSS data branch.,The function determines if a VSS node's data is a VSS data branch and marked as an instance.
25,python,"Calculates a 32-bit FNV-1 hash for a given byte string by iterating through each byte, multiplying the current hash by the FNV prime, and then performing a bitwise XOR with the byte",The Python code calculates a 32-bit FNV-1a hash value for a given byte string identifier.,The Python code computes a 32-bit FNV-1a hash of a byte string identifier.
26,java,"Lazily initializes and returns a `HomeAudioCardPresenter`, setting its data models with both a `MediaViewModel` and an `InCallModel` if a `ViewModelProvider` is available, otherwise logging a warning and using only the `InCallModel`","This method lazily initializes and returns a `CardPresenter` (specifically a `HomeAudioCardPresenter`), providing it with either a single `InCallModel` if a `ViewModelProvider` is unavailable or a `MediaViewModel` and `InCallModel` if a `ViewModelProvider` is present.","This method lazily initializes and returns a `HomeAudioCardPresenter`, providing it with either a default `InCallModel` or a `MediaViewModel` and `InCallModel` obtained from a `ViewModelProvider` if available."
27,java,"Lazily initializes and returns an `AudioFragment`, bidirectionally linking it with its presenter upon first creation","This Java code retrieves or creates an `AudioCardFragment` (likely representing an audio-related card view) and associates it with a card presenter, ensuring a singleton instance for efficient reuse.","This Java code lazily initializes and returns an `AudioCardFragment` instance, associating it with a card presenter to manage its display and interaction."
28,java,"Inflates the `card_fragment` layout, finds and assigns the card's title and icon views, and returns the resulting root view","This Java code inflates a layout file (`card_fragment`) to create a view, finds the title and icon elements within that view, and returns the inflated view as the fragment's root view.","This Java code inflates a layout file (`card_fragment`) to create a view, retrieves references to the title and icon views within it, and returns the inflated view as the fragment's root view."
29,java,"Updates an `ImageButton`'s icon and click listener from a content object and makes it visible, or hides the button if the content is null","This method updates the visibility and content (icon and click listener) of an `ImageButton` based on the presence and properties of a `DescriptiveTextWithControlsView.Control` object, effectively managing the button's display and behavior.","This method configures an `ImageButton`'s icon, click listener, and visibility based on a `DescriptiveTextWithControlsView.Control` object, ensuring the button reflects the control's state."
30,java,"Lazily inflates a `ViewStub` to create a descriptive text layout, caches references to its child views (title, subtitle, image), and returns the inflated layout","This method lazily initializes and returns a `View` containing text and image elements for a descriptive layout, inflating it from a `ViewStub` only when requested and caching it for subsequent use.","This method lazily initializes and returns a `View` representing a descriptive layout, inflating it from a `ViewStub` only when needed and caching it for later use, while also retrieving references to its child views."
31,java,Updates the header view on the main UI thread by making its root view visible and setting the card's title and icon from the provided `CardHeader` object,"This Java code updates the UI elements (root view, card title, and card icon) of a card header view on the main thread to reflect the data provided in a `CardHeader` object.","This Java code updates the UI of a card header view, setting its visibility and content (title and icon) based on data from a `CardHeader` object, executed on the main thread."
32,java,"Lazily inflates a `ViewStub` to create and return the text block layout view, while also finding and caching references to its child text views on the first call","This method lazily initializes and returns a `View` representing a text block layout, inflating it from a `ViewStub` if it hasn't been created yet and retrieving references to its child views.","This method lazily initializes and returns a `View` representing a text block layout, inflating it from a `ViewStub` only when requested and retrieving references to its child views."
33,java,"Queries the `PackageManager` for a `MediaBrowserService` within a given package and returns a `ComponentName` for the first one found, or `null` if none exist",This Java code retrieves the component name of a media browsing service within a specified application package by querying the package manager for services that implement the MediaBrowserService interface.,This Java code retrieves the component name of the default media browsing service for a given application package by querying the package manager for services implementing the MediaBrowserService interface.
34,java,"Determines if a component should be added to a launchable list, returning `false` if its package is explicitly hidden or if it's a custom media component and launchable apps are also being shown, otherwise returning `true` for valid launchable or media service types","This Java code determines whether a component should be added to a launchable list based on a hide list, custom media component settings, and the component's application type, logging an error for invalid application types.","This Java code determines whether a component should be added to a launchable list based on whether its package name is in a hide list, if it's a custom media component and launchables are enabled, and its application type, returning false for invalid application types and logging an error."
35,java,"Sets the car's media source to a given component in browse mode and finishes the context if it's an Activity, catching and logging a `CarNotConnectedException` if the car service is unavailable","This Java code selects a media source (browse mode) on a connected car using a provided CarMediaManager and then finishes the current Activity if it's running within one, handling potential CarNotConnectedException errors.","This Java code sets the media source to browse mode on a connected car via a CarMediaManager and closes the current Activity, gracefully handling CarNotConnectedException errors."
36,java,"Safely checks if a given activity is distraction optimized using the `CarPackageManager`, returning `false` and logging an error if the manager is null or a `CarNotConnectedException` is caught","This Java code checks if a specified activity within a given package is optimized for distraction mitigation in a car environment, utilizing a CarPackageManager and handling potential CarNotConnectedException errors.","This Java code determines whether an activity, identified by its package and name, is configured for distraction optimization within a vehicle's software environment, using a CarPackageManager and gracefully handling car disconnection errors."
37,java,"Initializes a `TaskViewManager` to asynchronously create a `TaskView`, which upon creation is configured with a listener, added to the parent `ViewGroup`, and stored as a member variable","This code sets up a task view within a parent ViewGroup by creating a TaskViewManager, creating a task view, setting a listener on it, adding it to the parent, and storing a reference to the view.","This code initializes and configures a task view within a parent ViewGroup using a TaskViewManager, sets a listener for the view, and adds it to the layout."
38,java,"Retrieves a specific, resolvable map `Intent` from a configured list if it matches the system's default map app, otherwise falls back to a generic `Intent` for any map application","This Java code retrieves the preferred map application intent, prioritizing user-configured options from a resource array while falling back to the system's default maps activity if no suitable preferred app is found.","This Java code determines the best intent for launching a map application, prioritizing user-defined preferences from a configuration array and defaulting to the system's standard maps activity if no preferred app is available or valid."
39,java,"Lazily initializes a set of `HomeCardModule`s by reflectively instantiating class names from a configuration array, and then uses a `FragmentTransaction` to add each module's card view to the UI layout","This Java code initializes and displays a set of HomeCardModule fragments within a FragmentTransaction, dynamically creating instances of classes specified in a resource array using reflection and setting up their ViewModelProviders.","This Java code dynamically initializes and displays a collection of HomeCardModule fragments by reflecting on class names defined in a resource array, instantiating them, setting up their ViewModelProviders, and then adding them to the UI via a FragmentTransaction."
40,java,"Iterates through a list of appeared tasks and uses the `ActivityTaskManager` to remove any task that is in multi-window mode, logging it as a dangling task","This Java code iterates through a list of task appearance information, identifies multi-window tasks, and removes them from the ActivityTaskManager to clean up potentially dangling tasks.","This Java code iterates through a list of task appearance information, identifies tasks in multi-window mode, and removes them from the ActivityTaskManager to clean up potentially dangling tasks."
41,java,Parses the mode from the current Intent and sets the title for both the Activity and the CarUi toolbar using the string resource ID defined in that mode,"This method updates the application's mode based on intent data, sets the title of the activity, and updates the toolbar title accordingly.","This method determines the current operating mode from an incoming intent, updates the activity title, and synchronizes the toolbar title to reflect the new mode."
42,java,"Lazily initializes and returns a `Chronometer` by finding it in the layout, while also finding and caching its associated separator view on the first call","This Java code lazily initializes and returns a Chronometer view (optional timer) and its separator from a layout, caching it for subsequent use to avoid repeated lookups.","This Java code lazily initializes a Chronometer view (optional timer) and its separator within a layout, storing them in a cache for efficient retrieval."
43,java,"Lazily inflates a media layout from a `ViewStub`, finds and caches its title and subtitle views, initializes its media playback controls bar via a presenter, and returns the inflated view","This code lazily initializes and returns a media layout view, inflating it from a ViewStub if it doesn't already exist, and then finds and initializes its title, subtitle, and playback controls.","This code lazily initializes and returns a media layout view, inflating it from a ViewStub if it's null, finding its title, subtitle, and playback controls, and initializing the controls with a presenter."
44,java,"If a valid `Drawable` and card size are provided, this method scales the image to a square based on the card's largest dimension, blurs it, and sets the resulting bitmap as the animated, visible card background","This code updates the background image of a card view by scaling a provided drawable to a square size, blurring it, and setting it as the card's background image with a visual animation.","This code updates the card's background image by scaling a drawable to a square, blurring it, and applying it to the card's background with a visual animation, ensuring the image and card size are valid."
45,java,Makes the media layout view visible and updates its title and subtitle with the provided text,This Java method updates the visibility and text content of a media view component with a provided title and subtitle.,This Java method displays a media view and sets its title and subtitle text based on the provided CharSequence arguments.
46,java,"If the content's start time is positive, this method makes a chronometer and a separator visible, sets the chronometer's base time, and starts it; otherwise, it hides both views","This method conditionally displays and starts a chronometer to track audio duration based on the provided start time, also showing a separator if the chronometer is visible.",This method manages the visibility and state of a chronometer and separator to display audio duration when a start time is provided.
47,java,Registers a member callback to the provided `Call` object after verifying it is not null,"This method registers a callback with a given call object, ensuring the callback is only registered if the call object is not null.","This method registers a callback on a call object if the object is not null, enabling asynchronous updates related to the call."
48,java,"Handles the removal of a call by clearing the current call and card content, notifying the presenter of the model update, and unregistering its callback from the call object for cleanup","This method handles the removal of an active call by clearing call-related data, notifying the presenter of the model update, and unregistering a callback associated with the removed call.","This method cleans up call-related data and notifies the presenter when a call is removed, ensuring proper state management and callback unregistration."
49,java,"Formats a phone number to create a new `DescriptiveTextWithControlsView` with call details and controls, then notifies the presenter that the model has been updated","This Java code updates a descriptive text view with a formatted phone number obtained from a utility class, and then notifies a presenter of the model update.","This Java code formats a phone number using a utility class, updates a view with the formatted number and associated controls, and informs a presenter about the updated model."
50,java,"Initializes mute, end call, and dialpad buttons by assigning each an icon and a click listener to toggle mute status, disconnect the current call, and delegate to an onClick handler, respectively","This method initializes audio control buttons (mute, end call, and dialpad) within a user interface, assigning icons and associated actions to toggle mute status, disconnect the call, and open the dialpad respectively.","This method initializes audio control buttons (mute, end call, and dialpad) for a call screen, configuring their icons and actions to toggle muting, end the call, and display the dialpad."
51,cpp,"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails","This function attempts to send a DBus message over an established connection, returning `true` on success and `false` if the message is null or the connection is not active, while also logging errors.","This function sends a DBus message over an established connection, returning `true` if the send operation succeeds and `false` otherwise, handling null messages and disconnected connections with error logging."
52,cpp,"Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID","The function `createMessage` constructs and configures a DBus signal message with a specified object path, interface name, signal name, and destination DBus ID.","The function `createMessage` creates a DBus signal message, setting its object path, interface name, signal name, and destination ID."
53,cpp,"When a new listener is added, this callback immediately notifies it with an `AVAILABLE` status if the D-Bus connection is already active",This function notifies a newly added listener of the current D-Bus connection availability status (available if connected) upon listener addition.,This function notifies a newly added listener with the `AVAILABLE` status if the D-Bus connection is currently connected.
54,cpp,"Atomically registers a given thread to be joined later by adding it to a list, but only if its associated connection is active and the thread is not already present in the list","The function `joinOnExit` associates a thread with a connection and adds the thread to a vector of threads to be joined upon exit, ensuring proper thread management for a given connection.","The function `joinOnExit` associates a thread with a connection and, if the thread isn't already tracked, adds it to a vector of threads to be joined when the connection is closed, facilitating orderly thread termination."
55,cpp,Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method,"This function wakes up a main loop context by acquiring a lock on a weakly-referenced context object and calling its wakeup method, handling potential null pointers and ensuring thread safety.","This function wakes up a main loop context by safely acquiring a lock on a weakly-referenced context object and calling its wakeup method, logging an error if the context is invalid."
56,cpp,A callback function that handles the removal of a D-Bus watch by stopping its monitoring and disassociating the high-level wrapper object from the underlying `libdbus` watch,"This function handles the removal of a DBus watch by stopping its monitoring if it's ready and clearing associated data, ensuring proper resource cleanup within a DBus connection.","This function handles the removal of a DBus watch, stopping its monitoring if active and clearing associated data to release resources within the DBus connection."
57,cpp,"Handles the toggling of a D-Bus watch by creating a C++ wrapper object for it on first use, and then starting or stopping its monitoring based on its readiness status","This function manages a DBus watch object, toggling its monitoring state based on its readiness and associated context, either creating a new watch or reusing an existing one.","This function manages a DBus watch object, toggling its monitoring state based on its readiness and associated context, creating a new watch if one doesn't exist or resuming/stopping an existing one."
58,cpp,"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern","This code provides a thread-safe mechanism to lazily initialize and retrieve a shared pointer to a `DBusObjectManager` object, ensuring only one instance is created and shared across multiple calls.","This code lazily initializes and returns a thread-safe shared pointer to a `DBusObjectManager` object, ensuring a single instance is created and accessible."
59,cpp,"Decrements a reference count for a given D-Bus service name, releasing it from the bus if the count reaches zero, and returns `true` on success or `false` if the name was not being tracked","This function releases a service name on the DBus connection, decrementing a counter if the name is held multiple times or releasing it via `dbus_bus_release_name` if it's the last reference, while ensuring thread safety with a mutex.","This function releases a service name on the DBus connection by either decrementing a reference count or calling `dbus_bus_release_name` to remove the name, ensuring thread safety with a mutex."
60,cpp,"Steals the reply from a `DBusPendingCall` handle and wraps it in a new `DBusMessage` object that takes ownership, returning an empty message if the input handle is null","This function converts a raw libdbus pending call reply into a DBusMessage object, handling null input and transferring ownership of the libdbus message.","This function extracts the reply message from a libdbus pending call, encapsulates it within a DBusMessage object, and transfers ownership of the libdbus message."
61,cpp,Thread-safely deallocates a collection of asynchronous D-Bus message reply handlers by moving them from a protected member list to a local copy before iterating through and deleting each one,"This function safely deletes all asynchronous DBus message reply handlers stored in a protected vector by acquiring a mutex, copying the vector, clearing the vector, and then iterating through the copy to delete each handler.","This function safely deletes all asynchronous DBus message reply handlers stored in a protected vector by acquiring a mutex, moving the vector's contents to a temporary vector, clearing the original vector, and then iterating through the temporary vector to delete each handler."
62,cpp,Thread-safely notifies all registered signal handlers of a successful state by invoking their `onSpecificError` callback with a `SUCCESS` status for each associated signal tag,"This function iterates through registered signal handlers and their associated tags, notifying each handler of a successful call status for each tag, ensuring thread-safe access to the signal state handlers map.","This function iterates through registered signal handlers and their associated tags, calling the `onSpecificError` method on each handler with a success status for each tag, while protecting access to the signal state handlers map with a mutex."
63,cpp,"Thread-safely removes a connection, identified by its ID, from an internal collection if it exists",This function safely removes a connection from a map of connections using a mutex to ensure thread safety.,"This function removes a connection identified by its ID from a protected map, using a mutex to ensure thread-safe access."
64,cpp,"Handles an incoming D-Bus signal by dispatching it to the appropriate handler for either ""InterfacesAdded"" or ""InterfacesRemoved"" events based on the message's member name","This code handles D-Bus signals related to interface availability changes, routing ""InterfacesAdded"" signals to `onInterfacesAddedSignal` and ""InterfacesRemoved"" signals to `onInterfacesRemovedSignal` of an instance availability status event handler.",This code dispatches D-Bus messages indicating the addition or removal of interfaces to corresponding signal handlers within an instance availability status event object.
65,cpp,"Retrieves available service instances from a registry, translates the internal D-Bus representation into a vector of `DBusAddress` objects, and populates the provided output vector and status parameter","This function retrieves available DBus service instances from a registry, populates a vector with their addresses, and sets a success status.","This function retrieves a list of available DBus service instances from a registry and translates them into a vector of DBus addresses, setting the call status to success."
66,cpp,"Gets the availability status of a service instance by translating its identifier to a D-Bus address and querying a registry, setting the result and a success status in output parameters","This function determines the availability status of a DBus service instance by translating an address, checking its liveness in a registry, and updating the availability and call status accordingly.","This function retrieves the availability status of a DBus service instance, translating its address and consulting a registry to determine if it's alive, updating the call status to success regardless."
67,cpp,"Handles a D-Bus ""InterfacesRemoved"" signal by parsing the object path and interface names, and for any interface matching the one being observed, notifies listeners that its status has changed to ""NOT_AVAILABLE""","This function handles a DBus signal indicating the removal of interfaces from a DBus object, specifically checking if the removed interface matches an observed interface and updating the availability status accordingly.","This function processes a DBus signal for interface removal, verifying if the removed interface matches a tracked interface and updating its availability status to 'NOT_AVAILABLE' if it does."
68,cpp,Notifies listeners of an interface's availability change by translating its D-Bus path and name into a generic CommonAPI address,This function translates a DBus address representing an interface status change and notifies listeners about the new availability status of a specific object on the bus.,"This function translates a DBus address for a changed interface status, converts it to a common address format, and then notifies registered listeners about the updated availability status."
69,cpp,"Thread-safely schedules a task on the main event loop to notify a newly added listener, passing along its specific subscription details",This function adds a listener to a DBus proxy and asynchronously pushes a notification function to the main loop to inform the listener about relevant events based on their subscription.,"This function registers a listener with a DBus proxy and schedules a notification to be sent to that listener via the main loop when relevant DBus events occur, based on the provided subscription."
70,cpp,Thread-safely removes all listeners from an internal collection that match the provided `Subscription` identifier,"This function removes a specified listener and its associated subscription from a collection of listeners, ensuring thread safety with a recursive mutex.","This function removes a listener and its subscription from a protected collection of listeners when a listener is removed, using a recursive mutex for thread safety."
71,cpp,Delegates the registration of a signal state handler for a specific subscription to the underlying connection object,"This function adds a signal handler and its associated subscription to the connection object within the DBusProxyBase class, enabling the handler to receive and process specific DBus signals.","This function registers a DBus signal handler with a specific subscription ID on the underlying DBus connection, allowing the handler to receive and process relevant signals."
72,cpp,Handles the result of an asynchronous service instance query by translating the `DBusAddress` list to a string list on success and invoking a final callback with the call status and the translated list,"This function handles the asynchronous callback for retrieving available service instances via DBus, translating DBus addresses to strings and passing the status and instances to the provided callback function.","This function processes the result of an asynchronous DBus call to retrieve available service instances, converting DBus addresses to strings if successful, and then invoking a callback with the call status and the list of instances."
73,cpp,"Dispatches an incoming `DBusMessage` to a registered handler based on its object path and interface, or handles it as a standard introspection request, returning `true` if the message was processed","This function handles incoming DBus messages by looking up a registered interface handler for the message's object path and interface name, and if found, calls the handler's message processing function; otherwise, it handles introspection messages or returns false if no handler is found.","This function processes incoming DBus messages by attempting to route them to a registered interface handler based on the object path and interface name, falling back to introspection message handling if no specific handler is found."
74,cpp,"Registers a D-Bus interface handler for a specific path, returning `false` if the exact handler is already registered, but allowing idempotent registration for standard `ObjectManager` and `Properties` interfaces","The function `addDBusInterfaceHandler` adds a `DBusInterfaceHandler` to a table of registered objects, checking for existing handlers and handling specific object manager interfaces to avoid duplicates.","The function `addDBusInterfaceHandler` adds a `DBusInterfaceHandler` to a table of registered objects, preventing duplicates and handling special cases for object manager interfaces."
75,cpp,"Registers a given `DBusInterfaceHandler` to a specific path in a table, returning `true` on success and `false` if the handler is already registered for that path","The function adds a DBusInterfaceHandler to a table of registered objects, keyed by interface path, ensuring no duplicates are added and returning true on success or false if the handler already exists.","The function adds a DBusInterfaceHandler to a table of registered objects, keyed by interface path, associating handlers with their respective paths and preventing duplicate registrations."
76,c,"Constructs and sends a 3-byte UDS negative response message (containing the original request SID and a negative response code) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails",This function constructs and transmits a negative response message via ISOTP to acknowledge a UDS service request with a specific NRC (Negative Response Code) and error logging if transmission fails.,"This function sends a UDS negative response message over ISOTP, including the original request SID and a negative response code, while logging errors if the transmission fails."
77,c,"Constructs and sends a 6-byte UDS positive response for a Diagnostic Session Control request—containing the session type, P2, and P2* server timeout values—over a CAN bus via the ISO-TP protocol, logging an error if the transmission fails","This function constructs and transmits a Diagnostic Session Control response message over ISOTP, configuring session timeouts based on provided parameters.","This function constructs and transmits a Diagnostic Session Control response message via ISOTP, setting session timeouts (P2 and P2* timeouts) based on input values."
78,c,"Constructs and sends a 2-byte UDS positive response to an ECU Reset request, containing the positive response SID and the echoed reset type, over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","This function sends a positive response to an ECU reset request via ISOTP protocol, constructing a message with a specific service ID and reset type, and logging any transmission errors.","This function transmits a positive ECU reset response message using the ISOTP protocol, including the reset type in the payload and logging any transmission failures."
79,c,"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function","This C function handles an ECU reset request, validating the message length, processing a hard reset by initiating a system reboot after sending a response, and returning a negative response for unsupported reset types.","This C function handles an ECU reset request by validating the message, performing a hard reset (reboot) if requested and supported, or returning an error response for invalid or unsupported reset types."
80,c,"Constructs and sends a 4-byte UDS positive response for a ""Request Download"" service, specifying a maximum block length of 0x00D2, over a CAN bus using the ISO-TP protocol and logging an error on failure","This function constructs and transmits a UDS request download response message via ISOTP, including a positive response code and block size, logging any transmission errors.","This function sends a UDS request download response message using ISOTP, specifying a positive response and block size, and logging errors if the transmission fails."
81,c,"Constructs and sends a 2-byte UDS positive response for a Transfer Data request (containing the positive SID and the block sequence counter) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","This function sends a transfer data response message over ISOTP, using a positive SID and specified block sequence counter, to a designated CAN ID, logging any transmission errors.","This function transmits a CAN message via ISOTP, formatted as a transfer data response with a positive service ID and block sequence counter, to a specific CAN identifier, and logs errors during transmission."
82,c,"Constructs and sends a 5-byte UDS positive response for the Routine Control service (containing the routine control type, routine ID, and a result code) over a CAN bus via ISO-TP, logging an error if the transmission fails","This function sends a UDS routine control result message via ISOTP to a specified CAN ID, encapsulating the routine ID and result within the message payload and logging any transmission errors.","This function transmits a UDS routine control result message over ISOTP to a designated CAN ID, including the routine ID and result in the data payload, and logs errors if the transmission fails."
83,c,"Constructs and sends a 1-byte UDS positive response for a Transfer Exit request (containing the request SID + 0x40) over a CAN bus using the ISO-TP protocol, logging an error if the transmission fails","This function sends a positive response (transfer exit confirmation) via ISOTP to a specified CAN ID, using a predefined SID and error handling for transmission failures.","This function transmits a positive transfer exit response message over ISOTP to a designated CAN ID, utilizing a specific service ID and logging any transmission errors."
84,c,"Maps a raw integer gain value (1, 2, 4, 8, or 16) to its corresponding `hv_shield_dac_gains_t` enum representation, returning 0 on success or an `-ENOTSUP` error code for any unsupported input","This function converts a raw gain value into a corresponding enumerated gain level for an HV shield DAC and stores it in a provided pointer, returning 0 on success or -ENOTSUP if the gain value is unsupported.","This function maps a raw gain value to a corresponding HV shield DAC gain level, storing the result in a provided pointer and returning 0 on success or -ENOTSUP for unsupported values."
85,c,"Searches a predefined `id_mapping` array for a given CAN ID and returns its corresponding index, or `0xff` if the ID is not found","This function maps a CAN identifier (can_id) to an index within a lookup table (id_mapping) and returns the index if found, otherwise returning 0xff to indicate no match.","This inline function maps a CAN identifier (can_id) to a corresponding index in the id_mapping array, returning the index if found, and 0xff if no match is found."
86,c,"Disables a specific LIN-to-CAN receive filter by clearing its callback pointer, or disables all filters if a special ID is passed, while ignoring out-of-bounds IDs","This function removes a receive filter by setting the callback function pointer to null for a specified filter ID, handling a special case for all translatable addresses and validating the filter ID against the maximum number of translatable addresses.","This function disables a receive filter by clearing its callback function pointer for a given filter ID, with specific handling for clearing all translatable address callbacks and input validation."
87,c,"A LIN driver callback that retrieves a pending outgoing frame from a message queue, copies its data for transmission, invokes a frame-specific completion callback, and returns a boolean indicating if a frame was successfully prepared","This function retrieves a LIN frame from a message queue, copies its data into a provided frame structure, and then invokes a callback function to transmit the frame via CAN.","This function retrieves a LIN frame from a message queue, populates a provided frame structure with its data, and triggers a CAN transmission via a registered callback."
88,c,"Acts as a LIN-to-CAN gateway callback, translating an incoming LIN frame by using its first data byte's top two bits as an index to find a target CAN ID, constructing a new CAN frame with the translated ID and a payload where those index bits are masked out, and finally invoking a registered handler with the resulting CAN frame","This function processes incoming LIN frames, translates their IDs to CAN IDs, and invokes a registered callback function with the translated CAN frame data.","This function handles incoming LIN frames by extracting a mapped ID, translating it to a CAN ID, and invoking a registered callback function with a translated CAN frame containing the relevant data."
89,c,"Initializes a high-voltage shield by configuring its Output Enable (OE) GPIO, writing a zeroed state to its hardware registers, and then setting the OE pin to enable the device's outputs, logging errors at each step","This function initializes the High Voltage (HV) shield device by configuring the output enable (OE) GPIO pin, initializing internal data structures, updating the shield registers, and finally enabling the shield.","This function initializes the High Voltage (HV) shield device by configuring and enabling the output enable (OE) GPIO pin, initializing internal data structures, and updating the shield registers."
90,c,"Sets the gain for a specified DAC (0 or 1) on a high-voltage shield by updating its value in a cached data structure and then calling an update function to write the new configuration to the hardware, returning an error for an invalid DAC index","This function sets the digital-to-analog converter (DAC) gain for a High Voltage (HV) shield device, validating the DAC number, updating the corresponding DAC register in the device's data structure, and then triggering an update function to apply the new gain setting.",This function configures the gain of a specified DAC (0 or 1) within an HV shield device by updating its register and triggering a device update.
91,c,"Enables or disables a specific GPIO output on a high-voltage shield by validating the pin index (0-31), remapping it via a nibble-swap, modifying a cached register bit, and then calling a helper function to write the update to the hardware","This function enables or disables a specific GPIO output pin (within a range) on an HV shield device by manipulating a register, after validating the index and adjusting it based on a grouping scheme, and then updating the device's internal state.","This function sets the enable state of a GPIO output pin on an HV shield device by modifying a register, validating the input index, and updating the device's internal state."
92,c,"A callback function that forwards a received CAN frame from a source device to a destination device (passed via `user_data`) using a non-blocking send operation, logging a debug message on successful queuing or a warning on failure","This function, `can_router_frame_cb`, receives a CAN frame on one device, attempts to immediately forward it to another specified device using `can_send` with a callback, and logs success or failure.","This function, `can_router_frame_cb`, routes incoming CAN frames from one device to another by attempting to immediately transmit them using `can_send` with a callback, and logging diagnostic information."
93,c,"Configures a CAN message router by iterating through an array of routing entries, adding a receive filter to a source CAN interface for each entry that uses a callback to forward matching frames to a destination interface, and returns an error if any filter registration fails","This function registers a set of CAN router entries by iterating through them and adding corresponding receive filters to the CAN driver, associating each filter with a callback function and destination pointer.","This function registers a set of CAN router entries by iterating through them and adding receive filters to the CAN driver, associating each filter with a callback and destination data."
94,c,"Initializes the CAN router by iterating through all statically-defined routing tables found in a dedicated linker section and registering their entries, returning an error if any registration fails","This function initializes the CAN router by iterating through a predefined table of CAN router entries and registering each entry with the CAN router system, returning an error code if registration fails.","This function initializes the CAN router by registering each entry from a predefined table with the CAN router system, returning an error if registration fails."
95,c,"Iterates through a pre-configured list of low-voltage GPIOs, setting the state of each pin enabled by an input mask to the corresponding bit in a value word, logging and returning an error if any underlying GPIO operation fails","This function sets the level of specific GPIO pins within a hardware voltage shield (HVS) based on a provided mask and value, iterating through configured GPIOs and calling the underlying GPIO driver to set each pin's state.","This function sets the level of specific GPIO pins managed by a hardware voltage shield (HVS) based on a provided mask and value, iterating through configured GPIOs and using the underlying GPIO driver to set each pin's state."
96,c,"Populates an output parameter with the number of available Abstract LIN callback slots, calculated by subtracting the used count from a configured maximum, returning an error if the parameter is a null pointer","This function calculates and returns the number of available callback slots for an abstract LIN device by subtracting the number of used callbacks from the maximum allowed frame count, handling null pointer input with an error code.","This function determines and returns the number of free callback slots for an abstract LIN device, calculating it as the difference between the maximum frame count and the currently used callbacks, and returning an error if the provided pointer is null."
97,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","This function registers an incoming callback for a specific LIN frame ID and size, storing the callback function and user data within a device's data structure, after validating input parameters and allocating a callback slot.","This function registers a callback to be invoked when a specific LIN frame ID is received, storing the callback function, frame size, and user data within the device's data structure after validating input and allocating a slot."
98,c,"Registers a user-provided callback function for a specific LIN frame ID by validating the ID (0-0x3F) and data size (1-8 bytes), allocating a free callback slot, and storing the callback details, returning an error on invalid parameters or allocation failure","This function registers an outgoing callback for a specific LIN frame ID and size, storing the callback function and associated user data within a device's abstract LIN data structure, after validating input parameters and allocating a callback slot.","This function registers an outgoing callback for a specific LIN frame ID and size within a device's abstract LIN data structure, storing the callback function, user data, and callback type after validating input and allocating a slot."
99,c,"Sets the active LIN schedule table by index, first validating the index and then using a semaphore to thread-safely update the scheduler's state and reset its entry pointer to the start of the new table","The function `abstract_lin_scheduler_set_active_table` activates a specified table within a LIN scheduler, ensuring exclusive access via a semaphore and resetting the entry index to the beginning of the table.","The function `abstract_lin_scheduler_set_active_table` activates a specified table within a LIN scheduler, acquiring a semaphore to ensure exclusive access, resetting the entry index, and returning an error if the table index is out of bounds."
100,c,"Disables a LIN scheduler by first checking if it's already stopped, then taking a semaphore to safely wait for the current operation to complete before setting the active schedule table index to -1","This C code disables a Linear Network (LIN) scheduler by marking it as stopped and acquiring a semaphore to ensure exclusive access, handling the case where the scheduler is already stopped.","This C code disables a Linear Network (LIN) scheduler by setting its current table to an invalid state and acquiring a semaphore to prevent concurrent access, effectively stopping the scheduler's operation."

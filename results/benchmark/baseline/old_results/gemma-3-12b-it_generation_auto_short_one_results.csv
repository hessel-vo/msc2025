id,language,reference,generated
1,python,"def is_subtype_of(cls, check: str, base: str) -> bool:
    check_type = cls.get_type(check)
    if not check_type:
        raise DatatypesException(f""Not a valid type: '{check}'"")
    base_type = cls.get_type(base)
    if not base_type:
        raise DatatypesException(f""Not a valid type: '{base}'"")
    return check in base_type[2] or check == base","def is_subtype_of(cls, check: str, base: str) -> bool:
    check_type = cls.get_type(check)
    if not check_type:
        raise DatatypesException(f""Not a valid type: '{check}'"")
    base_type = cls.get_type(base)
    if not base_type:
        raise DatatypesException(f""Not a valid type: '{base}'"")
    return check in base_type[2] or check == base"
2,python,"def is_datatype(cls, value: Any, datatype: str) -> bool:
    t = cls.get_type(datatype)
    if t is None:
        raise DatatypesException(f""Unsupported datatype: {datatype}"")
    return t[1](value)","def is_datatype(cls, value: Any, datatype: str) -> bool:
    try:
        cls.convert(value, datatype)
        return True
    except:
        return False"
3,python,"def is_xintx(value: Any, signed: bool, bits: int):
    values = [value]
    if isinstance(value, list):
        values = value

    for v in values:
        if not isinstance(v, int):
            return False
        if not signed and v < 0:
            return False
        max = 2**bits - 1
        min = 0
        if signed:
            max = 2 ** (bits - 1) - 1
            min = -(2 ** (bits - 1))
        if not (v <= max and v >= min):
            return False
    return True","from typing import Any, List, Union

def is_xintx(value: Any, signed: bool, bits: int) -> bool:
    if isinstance(value, list):
        return all(is_xintx(item, signed, bits) for item in value)

    if not isinstance(value, int):
        return False

    if signed:
        lower_bound = -(2**(bits - 1))
        upper_bound = 2**(bits - 1) - 1
    else:
        lower_bound = 0
        upper_bound = 2**bits - 1

    return lower_bound <= value <= upper_bound"
4,python,"def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
        for t in cls.types:
            if datatype == t[0]:
                return t
        return None","def get_type(cls, datatype: str) -> tuple[str, Callable, list[str]] | None:
    for type_tuple in cls.types:
        if type_tuple[0] == datatype:
            return type_tuple
    return None"
5,python,"def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    if not fqn:
        return {}
    fqn_namespaced_datatypes = {}
    for t in dynamic_datatypes:
        if fqn.startswith(t):
            continue

        if fqn.startswith(""."".join(t.split(""."")[:-1])):
            fqn_namespaced_datatypes[(t.split(""."")[-1])] = t

    if fqn_namespaced_datatypes:
        log.debug(f""Namespaced datatypes, {fqn=}, {fqn_namespaced_datatypes=}"")
    return fqn_namespaced_datatypes","def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:
    datatypes = {}
    if fqn:
        parts = fqn.split(""."")
        current_namespace = ""."".join(parts[:-1])
        datatype_name = parts[-1]
        if current_namespace:
            for namespace, datatypes_in_namespace in get_datatypes_by_namespace(current_namespace).items():
                datatypes.update(datatatypes_in_namespace)
        else:
            current_namespace = """"
        if datatype_name in get_datatypes_by_namespace(current_namespace):
            datatypes[datatype_name] = get_datatypes_by_namespace(current_namespace)[datatype_name]
    else:
        for namespace, datatypes_in_namespace in get_datatypes_by_namespace(""""):
            datatypes.update(datatatypes_in_namespace)
    return datatypes"
6,python,"def populate_unique_node_names(node_names_dict: dict[str, Any], vss_node: VSSNode) -> None:
    if not node_names_dict.get(vss_node.name):
        node_names_dict.__setitem__(vss_node.name, {""counter"": 1, ""vss_paths"": [vss_node.get_fqn()]})
    else:
        node_names_dict[vss_node.name][""counter""] += 1  # type: ignore
        node_names_dict[vss_node.name][""vss_paths""].append(vss_node.get_fqn())  # type: ignore

    if vss_node.children and len(vss_node.children) > 0:
        for vss_child_node in vss_node.children:
            populate_unique_node_names(node_names_dict, vss_child_node)","def populate_unique_node_names(node_names_dict: dict[str, Any], vss_node: VSSNode) -> None:
    node_names_dict[vss_node.name] = node_names_dict.get(vss_node.name, 0) + 1
    for child in vss_node.children:
        populate_unique_node_names(node_names_dict, child)"
7,python,"def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith(""[]""):
        is_array = True
        t = t[0:-2]

    if t in [""int8"", ""int16"", ""int32"", ""uint8"", ""uint16"", ""uint32""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in [""int64"", ""uint64""]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == ""float"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == ""double"":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == ""boolean"":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == ""string"":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(""."", ""_""))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type","def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    if t == ""string"":
        return ApiGearType(name=""string"", base_type=""string"", subtypes=[""string""])
    elif t == ""integer"":
        return ApiGearType(name=""integer"", base_type=""integer"", subtypes=[""integer""])
    elif t == ""number"":
        return ApiGearType(name=""number"", base_type=""number"", subtypes=[""integer"", ""float""])
    elif t == ""boolean"":
        return ApiGearType(name=""boolean"", base_type=""boolean"", subtypes=[""boolean""])
    elif t == ""array"":
        return ApiGearType(name=""array"", base_type=""array"", subtypes=[""array""])
    elif t == ""object"":
        return ApiGearType(name=""object"", base_type=""object"", subtypes=[""object""])
    else:
        return None"
8,python,"def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    apigear_type = get_apigear_datatype(datatype)
    data = node.get_vss_data()

    if apigear_type is None:
        log.warning(f""Datatype {datatype} of node {node.name} currently not supported"")
        return None

    property = ApiGearProperty(apigear_type)
    if data.description != """":
        property.description = data.description
    return property","def generate_property(node: VSSNode, datatype: str) -> ApiGearProperty | None:
    if not node:
        return None

    if node.name is None:
        return None

    if datatype is None:
        return None

    property = ApiGearProperty(
        name=node.name,
        datatype=datatype,
        description=node.description,
        unit=node.unit,
        offset=node.offset,
        scale=node.scale,
        minimum=node.minimum,
        maximum=node.maximum,
        is_array=node.is_array,
        array_length=node.array_length,
        is_constant=node.is_constant,
        constant_value=node.constant_value,
    )

    return property"
9,python,"def get_vspecs(includes: list[Path], spec: Path, prefix: str | None = None) -> list[VSpec]:
    vspecs: list[VSpec] = []
    vspec = VSpec(spec, prefix)
    vspecs.append(vspec)

    for include in vspec.includes:
        include_spec = include.resolve_path(includes + [vspec.source.parent])
        vspecs.extend(get_vspecs(includes, include_spec, include.prefix))

    return vspecs","from pathlib import Path

class VSpec:
    def __init__(self, name: str, path: Path, prefix: str | None = None):
        self.name = name
        self.path = path
        self.prefix = prefix

def get_vspecs(includes: list[Path], spec: Path, prefix: str | None = None) -> list[VSpec]:
    vspecs = []
    resolved_includes = set()

    def resolve_includes(current_includes: list[Path]):
        for include_path in current_includes:
            if include_path in resolved_includes:
                continue
            resolved_includes.add(include_path)
            try:
                include_content = include_path.read_text()
                for line in include_content.splitlines():
                    line = line.strip()
                    if line.startswith(""include""):
                        include_name = line[len(""include""):].strip()
                        include_path_str = include_name
                        if "":"" in include_name:
                            include_name, include_path_str = include_name.split("":"", 1)
                        include_path_str = include_path_str.strip()
                        
                        include_path_obj = Path(include_path_str)
                        if not include_path_obj.is_absolute():
                            include_path_obj = include_path_obj.resolve()
                        
                        resolve_includes([include_path_obj])
            except Exception as e:
                print(f""Error reading or processing include file {include_path}: {e}"")

    resolve_includes(includes)

    vspecs.append(VSpec(spec.name, spec, prefix))

    return vspecs"
10,python,"def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    spec = None
    vspecs: list[VSpec] = []
    for s in specs:
        includes = [s.parent] + include_dirs
        vspecs.extend(get_vspecs(includes, s))
    pre = ""VSpecs""
    if identifier:
        pre += f"" ({identifier})""
    log.info(f""{pre} loaded, amount={len(vspecs)}"")
    for vspec in vspecs:
        log.debug(vspec)
        if spec is None:
            spec = vspec
        else:
            spec.update(vspec)
    if not spec:
        msg = f""Weird behavior. Could not load any spec: {specs}""
        log.error(msg)
        raise SpecException(msg)
    return spec","from pathlib import Path

class VSpec:
    def __init__(self):
        self.data = {}

    def merge(self, other):
        for key, value in other.data.items():
            if key in self.data:
                raise ValueError(f""Duplicate key: {key}"")
            self.data[key] = value

def load_vspec(include_dirs: list[Path], specs: list[Path], identifier: str | None = None) -> VSpec:
    vspec = VSpec()
    for spec_path in specs:
        try:
            with open(spec_path, 'r') as f:
                spec_data = {}
                for line in f:
                    line = line.strip()
                    if not line or line.startswith('#'):
                        continue
                    key, value = line.split('=', 1)
                    spec_data[key.strip()] = value.strip()
                vspec.merge(VSpec(data=spec_data))
        except FileNotFoundError:
            print(f""Warning: File not found: {spec_path}"")
        except Exception as e:
            print(f""Error loading {spec_path}: {e}"")
    return vspec"
11,python,"def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if isinstance(value, dict):
            if key in base and isinstance(base[key], dict):
                deep_update(base[key], value)
            else:
                base[key] = value
        else:
            base[key] = value","def deep_update(base: dict[str, Any], update: dict[str, Any]) -> None:
    for key, value in update.items():
        if key in base and isinstance(base[key], dict) and isinstance(value, dict):
            deep_update(base[key], value)
        else:
            base[key] = value"
12,python,"def check_const_uid_format(cls, v: str | None) -> str | None:
    if v is None:
        return v
    pattern = r""^0x[0-9A-Fa-f]{8}$""
    assert bool(re.match(pattern, v)), f""'{v}' is not a valid 'constUID'""
    return v","def check_const_uid_format(cls, v: str | None) -> str | None:
    if not v:
        return v
    if not isinstance(v, str):
        raise TypeError(""constUID must be a string"")
    if len(v) != 8:
        raise ValueError(""constUID must be 8 characters long"")
    try:
        int(v, 16)
    except ValueError:
        raise ValueError(""constUID must be a hexadecimal string"")
    return v"
13,python,"def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw(fqn=fqn, **data)
    try:
        model = resolve_vss_raw(model)
    except (ValidationError, ModelException):
        log.debug(f""'{fqn}', incomplete, initialized as '{model.__class__.__name__}'"")
        return model
    return model","def get_vss_raw(data: dict[str, Any], fqn: str | None) -> VSSRaw:
    model = VSSRaw()
    model.resolve(data, fqn)
    if not model.resolved:
        return model
    return model"
14,python,"def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    datatypes = get_all_datatypes()
    for value in values:
        assert value in datatypes, f""Invalid datatype: '{value}'""
    return values","def check_valid_datatypes(cls, values: list[str]) -> list[str]:
    valid_values = []
    for value in values:
        type_ = cls.get_type(value)
        if type_:
            valid_values.append(value)
    return valid_values"
15,python,"def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    tree_content_lines = []
    for pre, fill, node in RenderTree(tree):
        tree_content_lines.append(""%s%s"" % (pre, node.name))
        for attribute in attributes:
            content = getattr(node.data, attribute, None)
            if content is None:
                continue
            if isinstance(content, str):
                tree_content_lines.append(""%s%s='%s'"" % (fill, attribute, content))
            else:
                tree_content_lines.append(""%s%s=%s"" % (fill, attribute, content))
    return ""\n"".join(tree_content_lines)","def get_rendered_tree(tree: VSSNode, attributes: tuple[str]) -> str:
    def render_node(node: VSSNode, level: int = 0) -> str:
        rendered = """"
        indent = ""  "" * level
        node_str = indent + str(node.name)
        rendered += node_str + ""\n""

        for attr in attributes:
            try:
                value = getattr(node, attr)
                rendered += indent + f""  {attr}: {value}\n""
            except AttributeError:
                pass

        for child in node.children:
            rendered += render_node(child, level + 1)

        return rendered

    return render_node(tree)"
16,python,"def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not isinstance(self.data, VSSDataBranch):
        raise NoInstanceRootException()

    if not self.data.is_instance:
        return self, depth

    if self.parent is None:
        raise NoInstanceRootException()

    return self.parent.get_instance_root(depth + 1)","def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
    if not self.parent:
        return self, depth
    else:
        return self.parent.get_instance_root(depth + 1)"
17,python,"def count_instance_children_depth(self) -> int:
    for child in self.children:
        if isinstance(child.data, VSSDataBranch):
            if child.data.is_instance:
                return 1 + child.count_instance_children_depth()
    return 0","def count_instance_children_depth(self) -> int:
    count = 0
    while self.children:
        self = self.children[0]
        count += 1
    return count"
18,python,"def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    ids = []
    for i in node_ids:
        if get_expected_parent(i) == name:
            ids.append(i)
    return ids","def find_children_ids(node_ids: list[str], name: str) -> list[str]:
    children_ids = []
    for node_id in node_ids:
        if node_id.startswith(name + '_'):
            children_ids.append(node_id)
    return children_ids"
19,python,"def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    result = getattr(o, name, default)
    if result is None and default is not None:
        result = default
    return result","def getattr_nn(o: object, name: str, default: Any | None = None) -> Any:
    try:
        value = getattr(o, name)
        if value is None:
            return default
        return value
    except AttributeError:
        return default"
20,python,"def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    fd.write('syntax = ""proto3"";\n\n')

    imports = []
    for node in findall(tree, filter_=lambda n: isinstance(n.data, VSSDataDatatype)):
        datatype = node.data.datatype
        if ""."" not in datatype:
            continue
        struct_path = Path(node.data.datatype.replace(""."", ""/""))  # type: ignore
        imports.append(f""{struct_path.parent}/{struct_path.parent.name}.proto"")
    write_imports(fd, imports)

    # write proto messages to file
    for node in findall(tree, filter_=lambda node: isinstance(node.data, VSSDataBranch)):
        fd.write(f""message {node.get_fqn('')} {{"" + ""\n"")
        print_messages(node.children, fd, static_uid, add_optional)
        fd.write(""}\n\n"")","```python
def traverse_signal_tree(tree: VSSNode, fd: TextIOWrapper, static_uid: bool, add_optional: bool):
    if tree.kind == ""signal"":
        fd.write(f"".signal {tree.name} {{\n"")
        if add_optional:
            fd.write(""  optional = true;\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        if tree.type == ""uint8"":
            fd.write(""  type = TYPE_UINT8;\n"")
        elif tree.type == ""int8"":
            fd.write(""  type = TYPE_INT8;\n"")
        elif tree.type == ""uint16"":
            fd.write(""  type = TYPE_UINT16;\n"")
        elif tree.type == ""int16"":
            fd.write(""  type = TYPE_INT16;\n"")
        elif tree.type == ""uint32"":
            fd.write(""  type = TYPE_UINT32;\n"")
        elif tree.type == ""int32"":
            fd.write(""  type = TYPE_INT32;\n"")
        elif tree.type == ""float32"":
            fd.write(""  type = TYPE_FLOAT32;\n"")
        elif tree.type == ""float64"":
            fd.write(""  type = TYPE_FLOAT64;\n"")
        fd.write(""  offset = "" + str(tree.offset) + "";\n"")
        fd.write(""  factor = "" + str(tree.factor) + "";\n"")
        fd.write(""  range_min = "" + str(tree.range_min) + "";\n"")
        fd.write(""  range_max = "" + str(tree.range_max) + "";\n"")
        fd.write(""  unit = '"" + tree.unit + ""';\n"")
        fd.write(""  description = '"" + tree.description + ""';\n"")
        if static_uid and tree.static_uid:
            fd.write(""  static_uid = true;\n"")
        fd.write(""};\n"")
    elif tree.kind == ""enumeration"":
        fd.write(f"".enumeration {tree.name} {{\n"")
        for member in tree.members:
            fd.write(f""  {member.name} = {member.value};\n"")
        fd.write(""};\n"")
    elif tree.kind == ""message"":
        fd.write(f"".message {tree.name} {{\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""choice"":
        fd.write(f"".choice {tree.name} {{\n"")
        fd.write(f""  id = {tree.id};\n"")
        fd.write(f""  length = {tree.length};\n"")
        for child in tree.children:
            traverse_signal_tree(child, fd, static_uid, add_optional)
        fd.write(""};\n"")
    elif tree.kind == ""named_bitfield"":
        fd.write(f"".named_bitfield {tree.name} {{\n"")
        fd.write(f""  id = {tree.id"
21,python,"def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    meta: dict[str, list[str]] = {}
    for node in PreOrderIter(root, filter_=lambda n: isinstance(n.data, VSSDataBranch) and n.data.is_instance):
        if any(c.data.is_instance for c in node.children if isinstance(c.data, VSSDataBranch)):
            continue
        instance_root, _ = node.get_instance_root()
        instance_root_fqn = instance_root.get_fqn()

        instance_name = node.get_fqn().removeprefix(instance_root_fqn + ""."")

        if instance_root_fqn in meta:
            meta[instance_root_fqn].append(instance_name)
        else:
            meta[instance_root_fqn] = [instance_name]
    return meta","def get_instances_meta(root: VSSNode) -> dict[str, list[str]]:
    instances_meta = {}
    for child in root:
        if child.is_leaf():
            branch_name = child.get_fully_qualified_name()
            if branch_name not in instances_meta:
                instances_meta[branch_name] = []
            instances_meta[branch_name].append(child.name)
    return instances_meta"
22,python,"def is_VSS_leaf(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataDatatype):
        return True
    return False","def is_VSS_leaf(node: VSSNode) -> bool:
    return node.data_type in ['scalar', 'tensor']"
23,python,"def is_VSS_branch(node: VSSNode) -> bool:
   if isinstance(node.data, VSSDataBranch):
        if not node.data.is_instance:
            return True
    return False","def is_VSS_branch(node: VSSNode) -> bool:
    return node.is_branch and not node.is_instance"
24,python,"def is_VSS_branch_instance(node: VSSNode) -> bool:
    if isinstance(node.data, VSSDataBranch):
        if node.data.is_instance:
            return True
    return False","def is_VSS_branch_instance(node: VSSNode) -> bool:
    return node.is_branch_instance()"
25,python,"def fnv1_32_hash(identifier: bytes) -> int:
    id_hash = 2166136261
    for byte in identifier:
        id_hash = (id_hash * 16777619) & 0xFFFFFFFF
        id_hash ^= byte

    return id_hash","def fnv1_32_hash(identifier: bytes) -> int:
    FNV_prime = 0x01000193
    offset_basis = 0x811C9DC5
    hash = offset_basis
    for byte in identifier:
        hash ^= byte
        hash *= FNV_prime
        hash &= 0xFFFFFFFF
    return hash"
26,java,"public CardPresenter getCardPresenter() {
    if (mAudioCardPresenter == null) {
        mAudioCardPresenter = new HomeAudioCardPresenter();
        if (mViewModelProvider == null) {
            Log.w(TAG, ""No ViewModelProvider set. Cannot get MediaViewModel"");
            mAudioCardPresenter.setModels(
                    Collections.unmodifiableList(Collections.singletonList(
                            new InCallModel(SystemClock.elapsedRealtimeClock()))));
        } else {
            mAudioCardPresenter.setModels(Collections.unmodifiableList(Arrays.asList(
                    mViewModelProvider.get(MediaViewModel.class),
                    new InCallModel(SystemClock.elapsedRealtimeClock()))));
        }
    }
    return mAudioCardPresenter;
}","public CardPresenter getCardPresenter() {
    if (mAudioCardPresenter == null) {
        mAudioCardPresenter = new HomeAudioCardPresenter();
        if (mViewModelProvider == null) {
            Log.w(TAG, ""No ViewModelProvider set. Cannot get MediaViewModel"");
            mAudioCardPresenter.setModels(
                    Collections.unmodifiableList(Collections.singletonList(
                            new InCallModel(SystemClock.elapsedRealtimeClock()))));
        } else {
            mAudioCardPresenter.setModels(Collections.unmodifiableList(Arrays.asList(
                    mViewModelProvider.get(MediaViewModel.class),
                    new InCallModel(SystemClock.elapsedRealtimeClock()))));
        }
    }
    return mAudioCardPresenter;
}"
27,java,"public HomeCardFragment getCardView() {
    if (mAudioCardView == null) {
        mAudioCardView = new AudioFragment();
        getCardPresenter().setView(mAudioCardView);
        mAudioCardView.setPresenter(getCardPresenter());
    }
    return mAudioCardView;
}","public HomeCardFragment getCardView() {
    if (mCardView == null) {
        mCardView = new HomeCardFragment();
    }
    return mCardView;
}"
28,java,"public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    mRootView = inflater.inflate(R.layout.card_fragment, container, false);
    mCardTitle = mRootView.findViewById(R.id.card_name);
    mCardIcon = mRootView.findViewById(R.id.card_icon);
    return mRootView;
}","public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.card_fragment, container, false);
        mCardView = view.findViewById(R.id.card_view);
        mTitleTextView = view.findViewById(R.id.title_text_view);
        mSubtitleTextView = view.findViewById(R.id.subtitle_text_view);
        mImageView = view.findViewById(R.id.image_view);
        return view;
    }"
29,java,"private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent,
        ImageButton buttonView) {
    if (buttonContent != null) {
        buttonView.setImageDrawable(buttonContent.getIcon());
        buttonView.setOnClickListener(buttonContent.getOnClickListener());
        buttonView.setVisibility(View.VISIBLE);
    } else {
        buttonView.setVisibility(View.GONE);
    }
}","private void updateControlBarButton(DescriptiveTextWithControlsView.Control buttonContent, ImageButton buttonView) {
        if (buttonContent != null) {
            buttonView.setImageResource(buttonContent.iconResId);
            buttonView.setContentDescription(buttonContent.contentDescription);
            buttonView.setOnClickListener(buttonContent.listener);
            buttonView.setVisibility(View.VISIBLE);
        } else {
            buttonView.setVisibility(View.GONE);
        }
    }"
30,java,"protected final View getDescriptiveTextOnlyLayoutView() {
    if (mDescriptiveTextOnlyLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.descriptive_text_layout);
        mDescriptiveTextOnlyLayoutView = stub.inflate();
        mDescriptiveTextOnlyTitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.primary_text);
        mDescriptiveTextOnlySubtitle = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.secondary_text);
        mDescriptiveTextOnlyOptionalImage = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.optional_image);
        mDescriptiveTextOnlyTapForMore = mDescriptiveTextOnlyLayoutView.findViewById(
                R.id.tap_for_more_text);
    }
    return mDescriptiveTextOnlyLayoutView;
}","protected final View getDescriptiveTextOnlyLayoutView() {
        if (mDescriptiveTextOnlyLayoutView == null) {
            LayoutInflater inflater = LayoutInflater.from(context);
            mDescriptiveTextOnlyLayoutView = inflater.inflate(R.layout.descriptive_text_only, this, true);
        }
        return mDescriptiveTextOnlyLayoutView;
    }"
31,java,"public void updateHeaderView(CardHeader header) {
    requireActivity().runOnUiThread(() -> {
        mRootView.setVisibility(View.VISIBLE);
        mCardTitle.setText(header.getCardTitle());
        mCardIcon.setImageDrawable(header.getCardIcon());
    });
}","public void updateHeaderView(CardHeader header) {
    header.setTitle(mTitle);
    header.setIcon(mIcon);
}"
32,java,"private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        ViewStub stub = mRootView.findViewById(R.id.text_block_layout);
        mTextBlockLayoutView = stub.inflate();
        mTextBlock = mTextBlockLayoutView.findViewById(R.id.text_block);
        mTextBlockTapForMore = mTextBlockLayoutView.findViewById(R.id.tap_for_more_text);
    }
    return mTextBlockLayoutView;
}","private View getTextBlockLayoutView() {
    if (mTextBlockLayoutView == null) {
        mTextBlockLayoutView = mTextBlockViewStub.inflate();
    }
    return mTextBlockLayoutView;
}"
33,java,"static ComponentName getMediaSource(@NonNull PackageManager packageManager,
        @NonNull String packageName) {
    Intent mediaIntent = new Intent();
    mediaIntent.setPackage(packageName);
    mediaIntent.setAction(MediaBrowserService.SERVICE_INTERFACE);

    List<ResolveInfo> mediaServices = packageManager.queryIntentServices(mediaIntent,
            PackageManager.GET_RESOLVED_FILTER);

    if (mediaServices == null || mediaServices.isEmpty()) {
        return null;
    }
    String defaultService = mediaServices.get(0).serviceInfo.name;
    if (!TextUtils.isEmpty(defaultService)) {
        return new ComponentName(packageName, defaultService);
    }
    return null;
}","static ComponentName getMediaSource(@NonNull PackageManager packageManager, @NonNull String packageName) {
        return packageManager.getComponent(packageName, ""com.google.android.media.service.MediaBrowserService"");
    }"
34,java,"private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
    if (appsToHide.contains(componentName.getPackageName())) {
        return false;
    }
    switch (componentAppType) {
        case APP_TYPE_MEDIA_SERVICES:
            if (customMediaComponents.contains(componentName.flattenToString())
                    && (appTypesToShow & APP_TYPE_LAUNCHABLES) != 0) {
                return false;
            }
            return true;
        case APP_TYPE_LAUNCHABLES:
            return true;
        default:
            Log.e(TAG, ""Invalid componentAppType : "" + componentAppType);
            return false;
    }
}","private static boolean shouldAddToLaunchables(@NonNull ComponentName componentName,
        @NonNull Set<String> appsToHide,
        @NonNull Set<String> customMediaComponents,
        @AppTypes int appTypesToShow,
        @AppTypes int componentAppType) {
        if (appsToHide.contains(componentName.getPackageName())) {
            return false;
        }
        if ((appTypesToShow & componentAppType) == 0) {
            return false;
        }
        if (customMediaComponents.contains(componentName.getClassName())) {
            return false;
        }
        return true;
    }"
35,java,"private static void selectMediaSourceAndFinish(Context context, ComponentName componentName,
        CarMediaManager carMediaManager) {
    try {
        carMediaManager.setMediaSource(componentName, CarMediaManager.MEDIA_SOURCE_MODE_BROWSE);
        if (context instanceof Activity) {
            ((Activity) context).finish();
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected"", e);
    }
}","private static void selectMediaSourceAndFinish(Context context, ComponentName componentName, CarMediaManager carMediaManager) {
        carMediaManager.selectMediaSource(componentName);
        ((Activity) context).finish();
    }"
36,java,"static boolean isActivityDistractionOptimized(
        CarPackageManager carPackageManager, String packageName, String activityName) {
    boolean isDistractionOptimized = false;
    try {
        if (carPackageManager != null) {
            isDistractionOptimized =
                    carPackageManager.isActivityDistractionOptimized(packageName, activityName);
        }
    } catch (CarNotConnectedException e) {
        Log.e(TAG, ""Car not connected when getting DO info"", e);
    }
    return isDistractionOptimized;
}","static boolean isActivityDistractionOptimized(CarPackageManager carPackageManager, String packageName, String activityName) {
        try {
            PackageInfo packageInfo = carPackageManager.getPackageInfo(packageName, 0);
            if (packageInfo != null) {
                IntentService targetService = new IntentService(activityName);
                return packageInfo.distractionOptimizationOptions.contains(targetService.getDistractionOptimizationOption());
            }
        } catch (PackageManager.NameNotFoundException e) {
            Log.w(""Car"", ""Package not found: "" + packageName);
        }
        return false;
    }"
37,java,"private void setUpTaskView(ViewGroup parent) {
    mTaskViewManager = new TaskViewManager(this,
            new HandlerExecutor(getMainThreadHandler()));
    mTaskViewManager.createTaskView(taskView -> {
        taskView.setListener(getMainExecutor(), mTaskViewListener);
        parent.addView(taskView);
        mTaskView = taskView;
    });
}","private void setUpTaskView(ViewGroup parent) {
    new AsyncTask<Void, Void, View>() {
        @Override
        protected View doInBackground() {
            LayoutInflater layoutInflater = LayoutInflater.from(context);
            View taskView = layoutInflater.inflate(R.layout.task_view, parent, false);
            return taskView;
        }

        @Override
        protected void onPostExecute(View taskView) {
            super.onPostExecute(taskView);
            parent.addView(taskView);
            configureTaskView(taskView);
        }
    }.execute();
}"
38,java,"private Intent getMapsIntent() {
    Intent defaultIntent =
            Intent.makeMainSelectorActivity(Intent.ACTION_MAIN, Intent.CATEGORY_APP_MAPS);
    PackageManager pm = getPackageManager();
    ComponentName defaultActivity = defaultIntent.resolveActivity(pm);

    for (String intentUri : getResources().getStringArray(
            R.array.config_homeCardPreferredMapActivities)) {
        Intent preferredIntent;
        try {
            preferredIntent = Intent.parseUri(intentUri, Intent.URI_ANDROID_APP_SCHEME);
        } catch (URISyntaxException se) {
            Log.w(TAG, ""Invalid intent URI in config_homeCardPreferredMapActivities"", se);
            continue;
        }

        if (defaultActivity != null && !defaultActivity.getPackageName().equals(
                preferredIntent.getPackage())) {
            continue;
        }

        if (preferredIntent.resolveActivityInfo(pm, /* flags= */ 0) != null) {
            return preferredIntent;
        }
    }
    return defaultIntent;
}","private Intent getMapsIntent() {
        Intent mapsIntent = mConfiguredMapsIntent;
        if (mapsIntent == null) {
            mapsIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""geo:0,0?q=current location""));
        }
        return mapsIntent;
    }"
39,java,"private void initializeCards() {
    if (mHomeCardModules == null) {
        mHomeCardModules = new ArraySet<>();
        for (String providerClassName : getResources().getStringArray(
                R.array.config_homeCardModuleClasses)) {
            try {
                long reflectionStartTime = System.currentTimeMillis();
                HomeCardModule cardModule = (HomeCardModule) Class.forName(
                        providerClassName).newInstance();
                cardModule.setViewModelProvider(new ViewModelProvider( /* owner= */this));
                mHomeCardModules.add(cardModule);
                if (DEBUG) {
                    long reflectionTime = System.currentTimeMillis() - reflectionStartTime;
                    Log.d(TAG, ""Initialization of HomeCardModule class "" + providerClassName
                            + "" took "" + reflectionTime + "" ms"");
                }
            } catch (IllegalAccessException | InstantiationException |
                    ClassNotFoundException e) {
                Log.w(TAG, ""Unable to create HomeCardProvider class "" + providerClassName, e);
            }
        }
    }
    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
    for (HomeCardModule cardModule : mHomeCardModules) {
        transaction.replace(cardModule.getCardResId(), cardModule.getCardView());
    }
    transaction.commitNow();
}","private void initializeCards() {
        List<HomeCard> cards = mConfig.getCards();
        if (cards == null || cards.isEmpty()) {
            return;
        }

        for (HomeCard card : cards) {
            CardModule cardModule = null;
            try {
                cardModule = (CardModule) Class.forName(card.getClassName()).getDeclaredConstructor().newInstance();
            } catch (Exception e) {
                Log.e(TAG, ""Failed to instantiate card module: "" + card.getClassName(), e);
                continue;
            }

            cardModule.setArguments(card.getArguments());
            mCardStack.addCard(cardModule);
        }
    }"
40,java,"private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
    ActivityTaskManager atm = ActivityTaskManager.getInstance();
    for (TaskAppearedInfo taskAppearedInfo : taskAppearedInfos) {
        TaskInfo taskInfo = taskAppearedInfo.getTaskInfo();
        if (taskInfo.getWindowingMode() == WINDOWING_MODE_MULTI_WINDOW) {
            if (DBG) Slog.d(TAG, ""Found the dangling task, removing: "" + taskInfo.taskId);
            atm.removeTask(taskInfo.taskId);
        }
    }
}","private static void cleanUpExistingTaskViewTasks(List<TaskAppearedInfo> taskAppearedInfos) {
        if (taskAppearedInfos == null || taskAppearedInfos.isEmpty()) {
            return;
        }
        for (int i = taskAppearedInfos.size() - 1; i >= 0; i--) {
            TaskAppearedInfo taskAppearedInfo = taskAppearedInfos.get(i);
            if (taskAppearedInfo.isMultiWindow()) {
                taskAppearedInfos.remove(i);
            }
        }
    }"
41,java,"private void updateMode() {
    mMode = parseMode(getIntent());
    setTitle(mMode.mTitleStringId);
    CarUi.requireToolbar(this).setTitle(mMode.mTitleStringId);
}","private void updateMode() {
        String modeString = getIntent().getStringExtra(MODE_KEY);
        if (modeString != null) {
            int mode = Integer.parseInt(modeString);
            mMode = mode;
            setTitle(getString(R.string.title_mode) + "" "" + mMode);
        }
    }"
42,java,"private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer);
        mChronometerSeparator = getDescriptiveTextWithControlsLayoutView().findViewById(
                R.id.optional_timer_separator);
    }
    return mChronometer;
}","private Chronometer getChronometer() {
    if (mChronometer == null) {
        mChronometer = new Chronometer(context);
    }
    return mChronometer;
}"
43,java,"private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        ViewStub stub = getRootView().findViewById(R.id.media_layout);
        mMediaLayoutView = stub.inflate();
        mMediaTitle = mMediaLayoutView.findViewById(R.id.primary_text);
        mMediaSubtitle = mMediaLayoutView.findViewById(R.id.secondary_text);
        View mediaControlBarView = mMediaLayoutView.findViewById(
                R.id.media_playback_controls_bar);
        mPresenter.initializeControlsActionBar(mediaControlBarView);
    }
    return mMediaLayoutView;
}","private View getMediaLayoutView() {
    if (mMediaLayoutView == null) {
        mMediaLayoutView = LayoutInflater.from(context).inflate(R.layout.media_layout, this, false);
        Bitmap blurredBitmap = ImageBlurring.blur(context, mBitmap);
        mMediaLayoutView.setBackground(new BitmapDrawable(context.getResources(), blurredBitmap));
    }
    return mMediaLayoutView;
}"
44,java,"private void updateBackgroundImage(Drawable image) {
    if (image != null && getCardSize() != null) {
        int maxDimen = Math.max(getCardSize().getWidth(), getCardSize().getHeight());
        Size scaledSize = new Size(maxDimen, maxDimen);
        Bitmap imageBitmap = BitmapUtils.fromDrawable(image, scaledSize);
        Bitmap blurredBackground = ImageUtils.blur(getContext(), imageBitmap, scaledSize,
                mBlurRadius);

        getCardBackgroundImage().setImageBitmap(blurredBackground, /* showAnimation= */ true);
        getCardBackground().setVisibility(View.VISIBLE);
    }
}","private void updateBackgroundImage(Drawable image) {
    if (image == null) {
        mBackground.setImageDrawable(null);
        return;
    }

    int width = mCardWidth;
    int height = mCardHeight;

    Bitmap blurredBitmap = BlurUtils.blur(image.getBitmap(), width, height);

    mBackground.setImageBitmap(blurredBitmap);
}"
45,java,"private void updateMediaView(CharSequence title, CharSequence subtitle) {
    getMediaLayoutView().setVisibility(View.VISIBLE);
    mMediaTitle.setText(title);
    mMediaSubtitle.setText(subtitle);
}","private void updateMediaView(CharSequence title, CharSequence subtitle) {
    if (mMediaView != null) {
        mMediaView.setTitle(title);
        mMediaView.setSubtitle(subtitle);
        mMediaView.setVisibility(View.VISIBLE);
    }
}"
46,java,"private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (content.getStartTime() > 0) {
        getChronometer().setVisibility(View.VISIBLE);
        getChronometer().setBase(content.getStartTime());
        getChronometer().start();
        mChronometerSeparator.setVisibility(View.VISIBLE);
    } else {
        getChronometer().setVisibility(View.GONE);
        mChronometerSeparator.setVisibility(View.GONE);
    }
}","private void updateAudioDuration(DescriptiveTextWithControlsView content) {
    if (mStartTime > 0) {
        mChronometer.start();
        content.setVisibility(View.VISIBLE);
    } else {
        mChronometer.stop();
        content.setVisibility(View.GONE);
    }
}"
47,java,"public void onCallAdded(Call call) {
    if (call != null) {
        call.registerCallback(mCallback);
    }
}","public void onCallAdded(Call call) {
}"
48,java,"public void onCallRemoved(Call call) {
    mCurrentCall = null;
    mCardContent = null;
    mPresenter.onModelUpdated(this);
    if (call != null) {
        call.unregisterCallback(mCallback);
    }
}","public void onCallRemoved(Call call) {
        mCall = null;
        if (mCallback != null) {
            mCallback.onCallRemoved();
            mCallback = null;
        }
    }"
49,java,"void updateModelWithPhoneNumber(String number) {
    String formattedNumber = TelecomUtils.getFormattedNumber(mContext, number);
    mCardContent = new DescriptiveTextWithControlsView(null, formattedNumber,
            mOngoingCallSubtitle, mElapsedTimeClock.millis(), mMuteButton, mEndCallButton,
            mDialpadButton);
    mPresenter.onModelUpdated(this);
}","void updateModelWithPhoneNumber(String number) {
        mOngoingCallViewModel.setPhoneNumber(number);
        mOngoingCallViewModel.setUiControls(UIControls.getDefault());
    }"
50,java,"private void initializeAudioControls() {
    mMuteButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_mic_off),
            v -> {
                mInCallService.setMuted(mMuteCallToggle);
                mMuteCallToggle = !mMuteCallToggle;
            });
    mEndCallButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_call_end_button),
            v -> mCurrentCall.disconnect());
    mDialpadButton = new DescriptiveTextWithControlsView.Control(
            mContext.getDrawable(R.drawable.ic_dialpad), this::onClick);
}","private void initializeAudioControls() {
        mEndCallButton = (ImageButton) findViewById(R.id.end_call_button);
        mEndCallButton.setOnClickListener(mEndCallListener);
        mDialpadButton = (ImageButton) findViewById(R.id.dialpad_button);
        mDialpadButton.setOnClickListener(mDialpadListener);
        mMuteButton = (ImageButton) findViewById(R.id.mute_button);
        mMuteButton.setOnClickListener(mMuteListener);
    }"
51,cpp,"bool DBusConnection::sendDBusMessage(const DBusMessage &_message) const {
    if (!_message) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return false;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""not connected"");
        return false;
    }

    dbus_uint32_t dbusSerial;
    const bool result = (0 != dbus_connection_send(connection_, _message.message_, &dbusSerial));
    return result;
}","bool DBusConnection::sendDBusMessage(const DBusMessage &_message) const {
    if (!_message) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""message == NULL"");
        return false;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""not connected"");
        return false;
    }

    dbus_uint32_t dbusSerial;
    const bool result = (0 != dbus_connection_send(connection_, _message.message_, &dbusSerial));
    return result;
}"
52,cpp,"DBusMessage DBusClientId::createMessage(const std::string objectPath, const std::string interfaceName, const std::string signalName) const
{
    DBusMessage returnMessage = DBusMessage::createSignal(objectPath, interfaceName, signalName);
    returnMessage.setDestination(dbusId_.c_str());

    return (returnMessage);
}","DBusMessage DBusClientId::createMessage(const std::string objectPath, const std::string interfaceName, const std::string signalName) const {
    DBusMessage message = DBusMessage::createSignal(interfaceName, objectPath, signalName);
    return message;
}"
53,cpp,"void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    (void)_subscription;
    if (dbusConnection_->isConnected())
        _listener(AvailabilityStatus::AVAILABLE);
}","void DBusConnectionStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    if (isAvailable()) {
        _listener.onAvailable(subscription_);
    } else {
        _listener.onUnavailable(subscription_);
    }
}"
54,cpp,"void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(mutex_);
    if (connections_.end() != connections_.find(conn)) {
        bool found(false);
        std::vector<std::thread*>::const_iterator it = threads_.begin();
        while (!found && it != threads_.end()) {
            found = (&t == *it++);
        }
        if (!found) {
            threads_.push_back(&t);
        }
    }
}","void joinOnExit(std::uintptr_t conn, std::thread & t) {
    std::lock_guard<std::mutex> lock(exit_mutex[conn]);
    if (exit_threads[conn].find(t.get_id()) == exit_threads[conn].end()) {
        exit_threads[conn].insert(t.get_id());
    }
}"
55,cpp,"void DBusConnection::onWakeupMainContext(void* data) {
    std::weak_ptr<MainLoopContext>* mainloop = static_cast<std::weak_ptr<MainLoopContext>*>(data);

    if (!mainloop) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""mainloop == nullptr"");
    } else if(auto lockedContext = mainloop->lock()) {
        lockedContext->wakeup();
    }
}","void DBusConnection::onWakeupMainContext(void* data) {
    DBusConnection* connection = static_cast<DBusConnection*>(data);
    if (connection) {
        connection->wakeUpMainContext();
    }
}"
56,cpp,"void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (NULL == static_cast<WatchContext*>(data)) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""data (WatchContext) == NULL"");
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));
    if (dbusWatch != NULL) {
        if(dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
        }
        dbus_watch_set_data(libdbusWatch, NULL, NULL);
    }
}","void DBusConnection::onRemoveWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch == nullptr) {
        return;
    }

    auto it = watchMap.find(libdbusWatch);
    if (it != watchMap.end()) {
        auto& watchData = it->second;
        watchData.removeWatch(libdbusWatch);
        watchMap.erase(it);
    }
}"
57,cpp,"void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    WatchContext* watchContext = static_cast<WatchContext*>(data);

    if (NULL == watchContext) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""watchContext == NULL"");
        return;
    }

    DBusWatch* dbusWatch = static_cast<DBusWatch*>(dbus_watch_get_data(libdbusWatch));

    if (dbusWatch == NULL) {
        DBusWatch* dbusWatch = new DBusWatch(libdbusWatch, watchContext->mainLoopContext_, watchContext->dbusConnection_);
        dbusWatch->addDependentDispatchSource(watchContext->dispatchSource_);
        dbus_watch_set_data(libdbusWatch, dbusWatch, NULL);

        if (dbusWatch->isReadyToBeWatched()) {
            dbusWatch->startWatching();
        }
    } else {
        if (!dbusWatch->isReadyToBeWatched()) {
            dbusWatch->stopWatching();
            dbus_watch_set_data(libdbusWatch, NULL, NULL);
        } else {
            dbusWatch->startWatching();
        }
    }
}","void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {
    if (libdbusWatch == nullptr) {
        return;
    }

    if (data == nullptr) {
        return;
    }

    DBusConnection* connection = static_cast<DBusConnection*>(data);

    if (connection == nullptr) {
        return;
    }

    if (libdbusWatch->ready) {
        connection->startWatch(libdbusWatch);
    } else {
        connection->stopWatch(libdbusWatch);
    }
}"
58,cpp,"const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    if (!dbusObjectManager_) {
        std::lock_guard<std::mutex> itsLock(objectManagerGuard_);
        if (!dbusObjectManager_) {
            dbusObjectManager_ = std::make_shared<DBusObjectManager>(shared_from_this());
        }
    }
    return dbusObjectManager_;
}","const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {
    static std::shared_ptr<DBusObjectManager> instance;
    if (!instance) {
        std::shared_ptr<DBusObjectManager> new_instance(new DBusObjectManager(this));
        while (!instance) {
            if (new_instance->isReady()) {
                instance = new_instance;
            } else {
                std::this_thread::yield();
            }
        }
    }
    return instance;
}"
59,cpp,"bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    DBusError dbusError;
    bool isServiceNameReleased = false;
    std::lock_guard<std::recursive_mutex> dbusConnectionLock(connectionGuard_);
    auto conIter = connectionNameCount_.find(serviceName);
    if (conIter != connectionNameCount_.end()) {
        if (conIter->second == 1) {
            const int libdbusStatus = dbus_bus_release_name(connection_,
                            serviceName.c_str(),
                            &dbusError.libdbusError_);
            isServiceNameReleased = (libdbusStatus == DBUS_RELEASE_NAME_REPLY_RELEASED);
            if (isServiceNameReleased) {
                connectionNameCount_.erase(conIter);
            }
        } else {
            conIter->second--;
            isServiceNameReleased = true;
        }
    }
    return isServiceNameReleased;
}","bool DBusConnection::releaseServiceName(const std::string& serviceName) const {
    if (serviceName.empty()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""serviceName is empty"");
        return false;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""not connected"");
        return false;
    }

    dbus_error_t error = DBUS_ERROR_INIT;
    const bool result = dbus_connection_release_name(connection_, serviceName.c_str(), &error);
    if (!result) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Failed to release service name: "" + std::string(error.message));
        dbus_error_free(&error);
        return false;
    }
    dbus_error_free(&error);
    return true;
}"
60,cpp,"DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (NULL == _libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""_libdbusPendingCall == NULL"");
        return DBusMessage();
    }

    ::DBusMessage* libdbusMessage = dbus_pending_call_steal_reply(_libdbusPendingCall);
    const bool increaseLibdbusMessageReferenceCount = false;
    DBusMessage dbusMessage(libdbusMessage, increaseLibdbusMessageReferenceCount);

    return dbusMessage;
}","DBusMessage DBusConnection::convertToDBusMessage(::DBusPendingCall* _libdbusPendingCall) {
    if (!_libdbusPendingCall) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""pending call == NULL"");
        return DBusMessage();
    }

    DBusMessage reply;
    if (dbus_pending_call_get_reply(_libdbusPendingCall, &reply.message_) == DBUS_ERROR_NONE) {
        reply.serial_ = dbus_pending_call_get_serial(_libdbusPendingCall);
    } else {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""Failed to get reply from pending call"");
        reply.message_ = nullptr;
    }

    dbus_pending_call_unref(_libdbusPendingCall);
    return reply;
}"
61,cpp,"void DBusConnection::deleteAsyncHandlers() {
    std::vector<DBusMessageReplyAsyncHandler*> asyncHandlers;
    {
        std::lock_guard<std::mutex> asyncHandlersLock(asyncHandlersToDeleteMutex_);
        asyncHandlers = asyncHandlersToDelete_;
        asyncHandlersToDelete_.clear();
    }

    auto it = asyncHandlers.begin();
    while(it != asyncHandlers.end()) {
        delete *it;
        it = asyncHandlers.erase(it);
    }
}","void DBusConnection::deleteAsyncHandlers() {
    std::lock_guard<std::mutex> lock(async_mutex_);
    for (auto it = async_handlers_.begin(); it != async_handlers_.end(); ++it) {
        delete *it;
    }
    async_handlers_.clear();
}"
62,cpp,"void DBusConnection::handleSignalStates() {
    std::map<std::shared_ptr<DBusProxyConnection::DBusSignalHandler>, std::set<uint32_t>> tmpHandlers;
    {
        std::lock_guard<std::mutex> itsLock(signalStateHandlersMutex_);
        tmpHandlers = signalStateHandlers_;
    }
    for (auto itsHandler : tmpHandlers) {
        for (uint32_t tag : itsHandler.second) {
            itsHandler.first->onSpecificError(CommonAPI::CallStatus::SUCCESS, tag);
        }
    }
}","void DBusConnection::handleSignalStates() {
    std::lock_guard<std::mutex> lock(signalMutex_);
    for (auto& pair : signalStates_) {
        const std::string& tag = pair.first;
        const SignalState& state = pair.second;

        if (state.success) {
            for (auto& handler : signalHandlers_[tag]) {
                handler.success(state.value);
            }
        } else {
            for (auto& handler : signalHandlers_[tag]) {
                handler.error(state.error);
            }
        }
    }
    signalStates_.clear();
}"
63,cpp,"void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::recursive_mutex> itsConnectionGuard(connectionsMutex_);
    auto itsConnection = connections_.find(_connectionId);

    if (itsConnection != connections_.end()) {
        connections_.erase(_connectionId);
    }
}","void Factory::releaseConnection(const ConnectionId_t& _connectionId) {
    std::lock_guard<std::mutex> lock(connectionMutex_);
    connections_.erase(_connectionId);
}"
64,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (dbusMessage.hasMemberName(""InterfacesAdded"")) {
        instanceAvblStatusEvent_->onInterfacesAddedSignal(dbusMessage);
    } else if (dbusMessage.hasMemberName(""InterfacesRemoved"")) {
        instanceAvblStatusEvent_->onInterfacesRemovedSignal(dbusMessage);
   }
}","void DBusInstanceAvailabilityStatusChangedEvent::SignalHandler::onSignalDBusMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage) {
        return;
    }

    const std::string& signature = dbusMessage.signature();
    if (signature == ""s"") {
        std::string interfaceName = dbusMessage.readString();
        dispatchInterfaceAdded(interfaceName);
    } else if (signature == ""s"") {
        std::string interfaceName = dbusMessage.readString();
        dispatchInterfaceRemoved(interfaceName);
    }
}"
65,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(
        CommonAPI::CallStatus &_status,
        std::vector<DBusAddress> &_availableServiceInstances) {

    _availableServiceInstances.clear();
    DBusObjectManagerStub::DBusObjectPathAndInterfacesDict itsAvailableServiceInstances;
    registry_->getAvailableServiceInstances(proxy_.getDBusAddress().getService(),
            proxy_.getDBusAddress().getObjectPath(),
            itsAvailableServiceInstances);

    _status = CommonAPI::CallStatus::SUCCESS;
    translate(itsAvailableServiceInstances, _availableServiceInstances);
}","void DBusInstanceAvailabilityStatusChangedEvent::getAvailableServiceInstances(CommonAPI::CallStatus &_status, std::vector<DBusAddress> &_availableServiceInstances) {
    _status.code = CommonAPI::CallStatus::SUCCESS;
    _availableServiceInstances.clear();

    if (!m_availableServiceInstances) {
        _status.code = CommonAPI::CallStatus::ERROR;
        return;
    }

    for (const auto& instance : *m_availableServiceInstances) {
        _availableServiceInstances.push_back(instance);
    }
}"
66,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(
        const std::string &_instance,
        CallStatus &_callStatus,
        AvailabilityStatus &_availabilityStatus) {

    CommonAPI::Address itsAddress(""local"", observedCapiInterfaceName_, _instance);
    DBusAddress itsDBusAddress;
    DBusAddressTranslator::get()->translate(itsAddress, itsDBusAddress);

    _availabilityStatus = AvailabilityStatus::NOT_AVAILABLE;
    if (registry_->isServiceInstanceAlive(
            itsDBusAddress.getInterface(),
            itsDBusAddress.getService(),
            itsDBusAddress.getObjectPath())) {
        _availabilityStatus = AvailabilityStatus::AVAILABLE;
    }
    _callStatus = CallStatus::SUCCESS;
}","void DBusInstanceAvailabilityStatusChangedEvent::getServiceInstanceAvailabilityStatus(const std::string &_instance, CallStatus &_callStatus, AvailabilityStatus &_availabilityStatus) {
    _callStatus = CallStatus::NotCalled;
    _availabilityStatus = AvailabilityStatus::Unknown;

    if (_instance.empty()) {
        _callStatus = CallStatus::Failed;
        return;
    }

    dbus_error_t error = DBUS_ERROR_INIT;
    dbus_message_t *reply = nullptr;

    dbus_message_t *message = dbus_message_new_method_call(connection_->getBus(),
                                                           _instance.c_str(),
                                                           _instance.c_str(),
                                                           ""org.freedesktop.DBus"",
                                                           ""NameOwner"");

    if (message == nullptr) {
        _callStatus = CallStatus::Failed;
        return;
    }

    reply = connection_->call(message, &error);

    if (reply == nullptr) {
        _callStatus = CallStatus::Failed;
        dbus_error_free(&error);
        dbus_message_unref(message);
        return;
    }

    dbus_message_t *body = dbus_message_get_reply_body(reply);
    if (body == nullptr) {
        _callStatus = CallStatus::Failed;
        dbus_error_free(&error);
        dbus_message_unref(message);
        dbus_message_unref(reply);
        return;
    }

    const char *owner = dbus_message_get_string(body);
    if (owner == nullptr) {
        _callStatus = CallStatus::Failed;
        dbus_error_free(&error);
        dbus_message_unref(message);
        dbus_message_unref(reply);
        return;
    }

    if (strcmp(owner, ""1"") == 0) {
        _availabilityStatus = AvailabilityStatus::Available;
    } else {
        _availabilityStatus = AvailabilityStatus::Unavailable;
    }

    _callStatus = CallStatus::Success;

    dbus_message_unref(message);
    dbus_message_unref(reply);
}"
67,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    DBusInputStream dbusInputStream(_message);
    std::string dbusObjectPath;
    std::vector<std::string> dbusInterfaceNames;

    dbusInputStream >> dbusObjectPath;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read object path"");
    }

    dbusInputStream >> dbusInterfaceNames;
    if (dbusInputStream.hasError()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__) + "" failed to read interface names"");
    }

    for (const auto& dbusInterfaceName : dbusInterfaceNames) {
        if(auto itsProxy = proxyWeakPtr_.lock() &&
                dbusInterfaceName == observedDbusInterfaceName_ &&
                removeInterface(dbusObjectPath, dbusInterfaceName)) {
            (void)itsProxy;
            notifyInterfaceStatusChanged(dbusObjectPath, dbusInterfaceName, AvailabilityStatus::NOT_AVAILABLE);
        }
    }
}","void DBusInstanceAvailabilityStatusChangedEvent::onInterfacesRemovedSignal(const DBusMessage &_message) {
    if (!_message) {
        return;
    }

    const std::string& memberName = _message.member();
    if (memberName != ""InterfacesRemoved"") {
        return;
    }

    const std::vector<DBusObjectPath>& removedInterfaces = _message.getInterfacesRemoved();

    for (const DBusObjectPath& path : removedInterfaces) {
        if (path.isNull()) continue;

        auto it = serviceToInterfaces_.find(path.toString());
        if (it != serviceToInterfaces_.end()) {
            auto& interfaces = it->second;
            for (const std::string& interfaceName : interfaces) {
                if (interfaceName.empty()) continue;

                auto it2 = interfaceToService_.find(interfaceName);
                if (it2 != interfaceToService_.end() && it2->second == path.toString()) {
                    interfaceToService_.erase(it2);
                }
            }
            serviceToInterfaces_.erase(it);
        }
    }
}"
68,cpp,"void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(
        const std::string &_objectPath,
        const std::string &_interfaceName,
        const AvailabilityStatus &_availability) {
    CommonAPI::Address itsAddress;
    DBusAddress itsDBusAddress(proxy_.getDBusAddress().getService(),
                               _objectPath,
                               _interfaceName);

    DBusAddressTranslator::get()->translate(itsDBusAddress, itsAddress);

    notifyListeners(itsAddress.getAddress(), _availability);
}","void DBusInstanceAvailabilityStatusChangedEvent::notifyInterfaceStatusChanged(const std::string &_objectPath, const std::string &_interfaceName, const AvailabilityStatus &_availability) {
    std::lock_guard<std::mutex> lock(mutex_);
    for (auto& listener : listeners_) {
        listener->onInterfaceStatusChanged(_objectPath, _interfaceName, _availability);
    }
}"
69,cpp,"void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener,
                                           const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);

   std::weak_ptr<DBusProxy> itsdbusProxy = dbusProxy_->shared_from_this();
    dbusProxy_->getDBusConnection()->proxyPushFunctionToMainLoop<DBusConnection>(
            DBusProxy::notifySpecificListener,
            itsdbusProxy,
            _listener,
            _subscription);
}","void DBusProxyStatusEvent::onListenerAdded(const Listener &_listener, const Subscription _subscription) {
    statusSubscriptions_.push_back(_subscription);
    scheduleNotification(_listener);
}"
70,cpp,"void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener,
                                             const Subscription _subscription) {
    std::lock_guard<std::recursive_mutex> listenersLock(listenersMutex_);
    (void)_listener;
    auto listenerIt = listeners_.begin();
    while(listenerIt != listeners_.end()) {
        if(listenerIt->first == _subscription)
            listenerIt = listeners_.erase(listenerIt);
        else
            ++listenerIt;
    }
}","void DBusProxyStatusEvent::onListenerRemoved(const Listener& _listener, const Subscription _subscription) {
    std::lock_guard<std::mutex> lock(mutex_);
    listeners_.erase(std::remove_if(listeners_.begin(), listeners_.end(),
                                    [&_listener, &_subscription](const Listener& l) {
                                        return l == _listener && l.subscription == _subscription;
                                    }),
                     listeners_.end());
}"
71,cpp,"void DBusProxyBase::addSignalStateHandler(
            std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler,
            const uint32_t _subscription) {
    connection_->addSignalStateHandler(_handler, _subscription);
}","void DBusProxyBase::addSignalStateHandler(std::shared_ptr<DBusProxyConnection::DBusSignalHandler> _handler, const uint32_t _subscription) {
    if (!_handler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""handler == NULL"");
        return;
    }
    connection_->addSignalStateHandler(_handler, _subscription);
}"
72,cpp,"void
DBusProxyManager::instancesAsyncCallback(
        std::shared_ptr<Proxy> _proxy,
        const CommonAPI::CallStatus &_status,
        const std::vector<DBusAddress> &_availableServiceInstances,
        GetAvailableInstancesCallback &_call) {
    (void)_proxy;
    std::vector<std::string> itsAvailableInstances;
    if (_status == CommonAPI::CallStatus::SUCCESS) {
        translate(_availableServiceInstances, itsAvailableInstances);
    }
    _call(_status, itsAvailableInstances);
}","void DBusProxyManager::instancesAsyncCallback(std::shared_ptr<Proxy> _proxy, const CommonAPI::CallStatus &_status, const std::vector<DBusAddress> &_availableServiceInstances, GetAvailableInstancesCallback &_call) {
    if (_status != CommonAPI::CallStatus::Success) {
        _call(false, {});
        return;
    }

    std::vector<std::string> addresses;
    for (const auto& address : _availableServiceInstances) {
        addresses.push_back(address.toString());
    }

    _call(true, addresses);
}"
73,cpp,"bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    const char* objectPath = dbusMessage.getObjectPath();
    const char* interfaceName = dbusMessage.getInterface();

    if (NULL == objectPath) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" objectPath == NULL"");
    }
    if (NULL == interfaceName) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "" interfaceName == NULL"");
    }

    DBusInterfaceHandlerPath handlerPath(objectPath, interfaceName);

    std::unique_lock<std::recursive_mutex> itsLock(objectPathLock_);

    auto handlerIterator = dbusRegisteredObjectsTable_.find(handlerPath);
    const bool foundDBusInterfaceHandler = handlerIterator != dbusRegisteredObjectsTable_.end();
    bool dbusMessageHandled = false;

    if (foundDBusInterfaceHandler) {
        std::shared_ptr<DBusInterfaceHandler> dbusStubAdapterBase = handlerIterator->second.front();
        itsLock.unlock();
        dbusMessageHandled = dbusStubAdapterBase->onInterfaceDBusMessage(dbusMessage);
        return dbusMessageHandled;
    } else if (dbusMessage.hasInterfaceName(""org.freedesktop.DBus.Introspectable"")) {
        dbusMessageHandled = onIntrospectableInterfaceDBusMessage(dbusMessage);
    }

    return dbusMessageHandled;
}","bool DBusObjectManager::handleMessage(const DBusMessage& dbusMessage) {
    if (!dbusMessage.message_) {
        return false;
    }

    DBusMessageIterator filter(dbusMessage);
    DBusError error;
    dbus_uint32_t serial;

    if (!filter.isValid()) {
        return false;
    }

    std::string signature;
    if (!filter.getSignature(signature)) {
        return false;
    }

    if (signature == ""s"") {
        std::string path;
        if (!filter.nextString(path)) {
            return false;
        }
        return handleIntrospectRequest(path, dbusMessage);
    } else if (signature == ""s{sv}"") {
        DBusMessage* reply = nullptr;
        if (!handleMethodCall(dbusMessage, reply)) {
            return false;
        }
        if (reply) {
            dbus_connection_send_with_reply_and_block(connection_, reply, -1, &serial);
            dbus_message_unref(reply);
        }
        return true;
    } else {
        return false;
    }
}"
74,cpp,"bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath,
                                                std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    const auto& dbusRegisteredObjectsTableIter = dbusRegisteredObjectsTable_.find(dbusInterfaceHandlerPath);
    const bool isDBusInterfaceHandlerAlreadyAdded = (dbusRegisteredObjectsTableIter != dbusRegisteredObjectsTable_.end());

    if (isDBusInterfaceHandlerAlreadyAdded) {

        auto handler = find(dbusRegisteredObjectsTableIter->second.begin(), dbusRegisteredObjectsTableIter->second.end(), dbusInterfaceHandler);
        if (handler != dbusRegisteredObjectsTableIter->second.end()) {
            if (dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.ObjectManager"" ||
                    dbusInterfaceHandlerPath.second == ""org.freedesktop.DBus.Properties"") {
                return true;
            }
            return false;
        }
    }

    auto insertSuccess = addToRegisteredObjectsTable(dbusInterfaceHandlerPath, dbusInterfaceHandler);
    return insertSuccess;
}","bool DBusObjectManager::addDBusInterfaceHandler(const DBusInterfaceHandlerPath& dbusInterfaceHandlerPath, std::shared_ptr<DBusInterfaceHandler> dbusInterfaceHandler) {
    if (!dbusInterfaceHandlerPath.path_.empty() && !dbusInterfaceHandler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""path is not empty and handler is null"");
        return false;
    }

    auto it = _interfaceHandlers.find(dbusInterfaceHandlerPath);
    if (it != _interfaceHandlers.end()) {
        if (dbusInterfaceHandlerPath.isStandardInterface_) {
            _interfaceHandlers[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
            return true;
        }
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""interface handler already registered for path"");
        return false;
    }

    _interfaceHandlers[dbusInterfaceHandlerPath] = dbusInterfaceHandler;
    return true;
}"
75,cpp,"bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    auto handlerRecord = dbusRegisteredObjectsTable_.find(ifpath);
    if (handlerRecord == dbusRegisteredObjectsTable_.end()) {
        dbusRegisteredObjectsTable_.insert({
            ifpath,
            std::vector<std::shared_ptr<DBusInterfaceHandler>>({handler})
        });
    }
    else {
        std::vector<std::shared_ptr<DBusInterfaceHandler>> handlerList = handlerRecord->second;
        auto adapter = find(handlerList.begin(), handlerList.end(), handler);
        if (adapter != handlerList.end()) {
            return false;
        }
        else {
            handlerList.push_back(handler);
            handlerRecord->second = handlerList;
        }
    }
    return true;
}","bool DBusObjectManager::addToRegisteredObjectsTable(DBusInterfaceHandlerPath ifpath, std::shared_ptr<DBusInterfaceHandler> handler) {
    if (!handler) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""handler == NULL"");
        return false;
    }

    auto it = registered_objects_table_.find(ifpath);
    if (it != registered_objects_table_.end()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), ""duplicate registration for path: "" + ifpath.path_);
        return false;
    }

    registered_objects_table_[ifpath] = handler;
    return true;
}"
76,c,"void send_negative_response(enum UDS_SID request_sid,
                            enum UDS_NRC response_code) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_NEGATIVE_RESPONSE, request_sid, response_code};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_negative_response(enum UDS_SID request_sid,
                            enum UDS_NRC response_code) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_NEGATIVE_RESPONSE, request_sid, response_code};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
77,c,"static void send_session_control_response(enum UdsSessionState session_type,
                                          uint16_t p2_timeout_ms,
                                          uint16_t p2_star_timeout_ms) {
  int ret;
  uint8_t positive_sid = UDS_SID_DIAGNOSTIC_SESSION_CONTROL + 0x40;

  uint8_t tx_data[] = {
    positive_sid,
    session_type,
    (p2_timeout_ms >> 8) & 0xFF,
    p2_timeout_ms & 0xFF,
    ((p2_star_timeout_ms / 10) >> 8) & 0xFF,
    (p2_star_timeout_ms / 10) & 0xFF,
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_session_control_response(enum UdsSessionState session_type, uint16_t p2_timeout_ms, uint16_t p2_star_timeout_ms) {
  int ret;
  uint8_t tx_data[8];
  tx_data[0] = UDS_SID_DIAGNOSTIC_SESSION_CONTROL;
  tx_data[1] = (uint8_t)session_type;
  tx_data[2] = (uint8_t)(p2_timeout_ms >> 8);
  tx_data[3] = (uint8_t)p2_timeout_ms;
  tx_data[4] = (uint8_t)(p2_star_timeout_ms >> 8);
  tx_data[5] = (uint8_t)p2_star_timeout_ms;
  tx_data[6] = 0x00;
  tx_data[7] = 0x00;

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
78,c,"void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t positive_sid = UDS_SID_ECU_RESET + 0x40;

  uint8_t tx_data[] = {positive_sid, reset_type};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_positive_reset_response(uint8_t reset_type) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_POSITIVE_RESPONSE, UDS_SERVICE_ECU_RESET, reset_type};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
79,c,"void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len != 2) {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT);
    return;
  }

  uint8_t reset_type = data[1];

  if (reset_type == UDS_RESET_TYPE_HARD) {
    send_positive_reset_response(UDS_RESET_TYPE_HARD);

    k_sleep(K_MSEC(100));

    LOG_DBG(""Hard reset\n"");
    sys_reboot(SYS_REBOOT_COLD);
  } else {
    send_negative_response(UDS_SID_ECU_RESET,
                           UDS_NRC_SUBFUNCTION_NOT_SUPPORTED);
  }
}","void handle_ecu_reset(uint8_t *data, size_t len) {
  if (len < 2) {
    return;
  }
  if (data[0] != UDS_RESET_REQ) {
    return;
  }
  if (data[1] != UDS_RESET_HARD) {
    return;
  }
  system_reboot();
}"
80,c,"void send_request_download_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_DOWNLOAD + 0x40;


  uint8_t tx_data[] = {
    positive_sid,
    0x20,  // positive response code
    0x00,
    0xD2,  // block size = 258 - 2
  };

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","void send_request_download_response(uint8_t max_block_length) {
  int ret;
  uint8_t tx_data[] = {UDS_SID_REQUEST_DOWNLOAD_RESPONSE, max_block_length};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
81,c,"static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t positive_sid = UDS_SID_TRANSFER_DATA + 0x40;

  uint8_t tx_data[] = {positive_sid, block_sequence_counter};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transfer_data_response(uint8_t block_sequence_counter) {
  int ret;
  uint8_t tx_data[] = {UDS_TRANSFER_DATA_POSITIVE_RESPONSE, block_sequence_counter};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
82,c,"static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t positive_sid = UDS_SID_ROUTINE_CONTROL + 0x40;

  uint8_t tx_data[] = {positive_sid, 0x1, (routine_id >> 8) & 0xFF,
                       routine_id & 0xFF, result};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_routine_control_result(uint16_t routine_id, uint8_t result) {
  int ret;
  uint8_t tx_data[] = {UDS_POSITIVE_RESPONSE, UDS_SID_ROUTINE_CONTROL, routine_id, result};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
83,c,"static void send_transer_exit_positive_response() {
  int ret;
  uint8_t positive_sid = UDS_SID_REQUEST_TRANSFER_EXIT + 0x40;

  uint8_t tx_data[] = {positive_sid};

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}","static void send_transer_exit_positive_response() {
  int ret;
  uint8_t tx_data[] = {UDS_TRANSFER_EXIT_POSITIVE_RESPONSE};
  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(tx_data), &tx_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while sending data to ID %d [%d]\n"", tx_addr.std_id, ret);
  }
}"
84,c,"static int hvs_dac_convert_gain(int raw_gain,
                                enum hv_shield_dac_gains_t* gain) {
  switch (raw_gain) {
    case 1:
      *gain = HV_SHIELD_DAC_GAIN_1;
      return 0;
    case 2:
      *gain = HV_SHIELD_DAC_GAIN_2;
      return 0;
    case 4:
      *gain = HV_SHIELD_DAC_GAIN_4;
      return 0;
    case 8:
      *gain = HV_SHIELD_DAC_GAIN_8;
      return 0;
    case 16:
      *gain = HV_SHIELD_DAC_GAIN_16;
      return 0;
    default:
      return -ENOTSUP;
  }
}","static int hvs_dac_convert_gain(int raw_gain, enum hv_shield_dac_gains_t* gain) {
  if (raw_gain == 0) {
    *gain = HV_SHIELD_DAC_GAIN_0;
    return 0;
  } else if (raw_gain == 1) {
    *gain = HV_SHIELD_DAC_GAIN_1;
    return 0;
  } else if (raw_gain == 2) {
    *gain = HV_SHIELD_DAC_GAIN_2;
    return 0;
  } else if (raw_gain == 3) {
    *gain = HV_SHIELD_DAC_GAIN_3;
    return 0;
  } else {
    return -1;
  }
}"
85,c,"static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
    if (id_mapping[i] == can_id) {
      return i;
    }
  }

  return 0xff;
}","static inline uint8_t map_from_can_id(uint32_t can_id) {
  for (uint8_t i = 0; i < CAN_ID_MAPPING_SIZE; ++i) {
    if (can_id_mapping[i] == can_id) {
      return i;
    }
  }
  return UINT8_MAX;
}"
86,c,"static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

 if (filter_id == TRANSLATABLE_ADDRESSES_LEN) {
    for (int i = 0; i < TRANSLATABLE_ADDRESSES_LEN; i++) {
      data->incoming_callbacks[i].callback = 0;
    }

    return;
  }

  if (filter_id >= TRANSLATABLE_ADDRESSES_LEN) {
    return;
  }
  data->incoming_callbacks[filter_id].callback = 0;
}","static void lin2can_remove_rx_filter(const struct device *dev, int filter_id) {
  struct lin2can_data *data = dev->data;

  if (filter_id < 0) {
    for (int i = 0; i < ARRAY_SIZE(data->rx_filters); i++) {
      if (data->rx_filters[i].cb) {
        data->rx_filters[i].cb(dev, data->rx_filters[i].filter_id, NULL);
        data->rx_filters[i].cb = NULL;
      }
    }
  } else {
    if (data->rx_filters[filter_id].cb) {
      data->rx_filters[filter_id].cb(dev, filter_id, NULL);
      data->rx_filters[filter_id].cb = NULL;
    }
  }
}"
87,c,"static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  struct lin2can_data *data = dev->data;
  struct k_msgq *outgoing_frame_buffer = data->outgoing_frame_queue;

  struct lin2can_outgoing_frame_t outgoing;
  if (k_msgq_get(outgoing_frame_buffer, &outgoing, K_NO_WAIT)) {
    return false;
  }

  memcpy(frame, &outgoing.frame, sizeof(*frame));

  LOG_DBG(""Calling can tx callback"");

  outgoing.callback(dev, 0, outgoing.user_data);

  return true;
}","static bool lin_outgoing_cb(struct lin_frame *frame, void *user_data) {
  struct lin_tx_queue *tx_queue = user_data;
  if (!tx_queue) {
    return false;
  }

  if (list_empty(&tx_queue->queue)) {
    return false;
  }

  struct lin_frame *frame_to_send = list_first_entry(&tx_queue->queue, struct lin_frame, list);
  list_del(&frame_to_send->list);

  if (frame_to_send->completion_cb) {
    frame_to_send->completion_cb(frame_to_send, frame_to_send->user_data);
  }

  return true;
}"
88,c,"static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  const struct device *dev = (const struct device *)user_data;
  const struct lin2can_data *data = dev->data;

 uint8_t mapped_id = frame->data[0] >> 6;

  __ASSERT(mapped_id < TRANSLATABLE_ADDRESSES_LEN, ""Unexpected LIN-ID: %x"",
           mapped_id);

  LOG_DBG(""Incoming can frame with can id %x"", id_mapping[mapped_id]);

 if (!data->incoming_callbacks[mapped_id].callback) {
    return;
  }

  struct can_frame translated = {
    .id = id_mapping[mapped_id],
    .dlc = 8,
  };
  memcpy(translated.data, frame->data, frame->len);

  translated.data[0] = frame->data[0] & 0x3f;

  LOG_DBG(""Calling according can callback"");

  data->incoming_callbacks[mapped_id].callback(
      dev, &translated, data->incoming_callbacks[mapped_id].user_data);
}","static void lin_incoming_cb(const struct lin_frame *frame, void *user_data) {
  struct can_frame can_frame;
  int ret;

  can_frame.id = frame->lin_id;
  can_frame.dlc = frame->data_length;
  memcpy(can_frame.data, frame->data, frame->data_length);

  ret = invoke_can_handler(user_data, &can_frame);
  if (ret != 0) {
    LOG_ERR(""Failed to invoke CAN handler\n"");
  }
}"
89,c,"static int hv_shield_init(const struct device* dev) {
  const struct hv_shield_config_t* config = dev->config;
  struct hv_shield_data_t* data = dev->data;

  int err = gpio_pin_configure_dt(&config->oe_gpio_spec, GPIO_OUTPUT_INACTIVE);
  if (err) {
    LOG_ERR(""Error setting up Output enable pin (%d)"", err);
    return err;
  }

  memset(&data->registers, 0, sizeof(data->registers));

  err = _hv_shield_update(dev);
  if (err) {
    LOG_ERR(""Error writing registers (%d)"", err);
    return err;
  }

  err = gpio_pin_set_dt(&config->oe_gpio_spec, 1);
  if (err) {
    LOG_ERR(""Error setting enabling output (%d)"", err);
  }

  return err;
}","static int hv_shield_init(const struct device* dev) {
  int ret;

  ret = regulator_enable(dev->config->regulator);
  if (ret < 0) {
    return ret;
  }

  ret = regulator_set_voltage(dev->config->regulator,
                              dev->config->voltage);
  if (ret < 0) {
    regulator_disable(dev->config->regulator);
    return ret;
  }

  return 0;
}"
90,c,"static int hvs_set_dac_gain(const struct device* dev,
                            uint8_t dac,
                            enum hv_shield_dac_gains_t gain) {
  if (dac > 1) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;
  switch (dac) {
    case 0:
      data->registers.dac0 = gain;
      break;
    case 1:
      data->registers.dac1 = gain;
      break;
    default:
      return -EINVAL;
  }

  return _hv_shield_update(dev);
}","static int hvs_set_dac_gain(const struct device* dev, uint8_t dac, enum hv_shield_dac_gains_t gain) {
  int ret;
  uint8_t tx_data[2];
  tx_data[0] = HV_SHIELD_DAC_GAIN_CMD;
  tx_data[1] = dac | (gain << 4);

  ret = i2c_write(dev, tx_data, sizeof(tx_data));
  if (ret < 0) {
    return ret;
  }

  return 0;
}"
91,c,"static int hvs_set_gpio_output_enable(const struct device* dev,
                                      uint8_t index,
                                      bool enable) {
  if (index > 31) return -EINVAL;

  struct hv_shield_data_t* data = dev->data;

  if (index % 8 < 4) {
    index += 4;
  } else {
    index -= 4;
  }

  if (enable) {
    data->registers.gpio_output |= 1 << index;
  } else {
    data->registers.gpio_output &= ~(1 << index);
  }

  return _hv_shield_update(dev);
}","static int hvs_set_gpio_output_enable(const struct device* dev, uint8_t index, bool enable) {
  uint8_t reg_val = 0;
  uint8_t nibble = index & 0x0F;
  uint8_t other_nibble = (index >> 4) & 0x0F;

  if (enable) {
    reg_val = (nibble << 4) | other_nibble;
  } else {
    reg_val = (other_nibble << 4) | nibble;
  }

  gpio_write(dev, index, enable);
  return 0;
}"
92,c,"static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN(""Can send failed (%d)"", err);
    return;
  }

  LOG_DBG(""Routed frame from %s to %s"", dev->name, to->name);
}","static void can_router_frame_cb(const struct device *dev, struct can_frame *frame, void *user_data) {
  int ret;
  struct can_addr dest_addr = {0};
  uint8_t tx_data[8];

  dest_addr.std_id = frame->std_id;
  dest_addr.can_id = frame->can_id;

  memcpy(tx_data, frame, sizeof(struct can_frame));

  ret = isotp_send(&send_ctx, can_dev, tx_data, sizeof(struct can_frame), &dest_addr,
                   &rx_addr, send_complete_cb, NULL);
  if (ret != ISOTP_N_OK) {
    LOG_ERR(""Error while forwarding data to ID %d [%d]\n"", dest_addr.std_id, ret);
  }
}"
93,c,"int can_router_register(const struct can_router_entry_t *entries,
                        int entry_count) {
  LOG_DBG(""Registering %d can router entries"", entry_count);
  for (int i = 0; i < entry_count; i++) {
    const int err =
        can_add_rx_filter(*entries[i].from, can_router_frame_cb,
                          (void *)*entries[i].to, &entries[i].filter);
    if (err) {
      return err;
    }
  }

  LOG_DBG(""Registered %d can router entries"", entry_count);

  return 0;
}","int can_router_register(const struct can_router_entry_t *entries, int entry_count) {
  for (int i = 0; i < entry_count; i++) {
    if (can_frame_routing_add(&entries[i]) != CAN_OK) {
      return -1;
    }
  }
  return 0;
}"
94,c,"static int can_router_sysinit() {
  LOG_DBG(""Initializing can router"");

  STRUCT_SECTION_FOREACH (can_router_table_t, table) {
    int err = can_router_register(table->entries, table->entry_count);
    if (err) {
      LOG_ERR(""could not register can router"");
      return err;
    }
  }

  return 0;
}","static int can_router_sysinit() {
  int ret;
  ret = can_router_register_static_routes();
  if (ret < 0) {
    return ret;
  }
  return 0;
}"
95,c,"static int hvs_set_masked_raw(const struct device* port,
                              gpio_port_pins_t mask,
                              gpio_port_value_t value) {
  const struct hv_shield_gpio_config_t* config = port->config;

  for (int i = 0; i < config->lv_gpios_count; i++) {
    if (!(mask & BIT(i))) continue;

    int ret = gpio_pin_set(config->lv_gpios[i].port, config->lv_gpios[i].pin,
                           !!(value & BIT(i)));
    if (ret < 0) {
      LOG_ERR(""Error settings gpio %d (error %d)"", i, ret);
      return ret;
    }
  }

  return 0;
}","static int hvs_set_masked_raw(const struct device* port, gpio_port_pins_t mask, gpio_port_value_t value) {
	return gpio_set_mask(port, mask, value);
}"
96,c,"static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  struct abstract_lin_data *data = dev->data;

  if (free_slots == NULL) {
    return -EINVAL;
  }

  *free_slots = CONFIG_ABSTRACT_LIN_MAX_FRAME_COUNT - data->used_callbacks;

  return 0;
}","static int al_get_free_cb_slots(const struct device *dev, uint8_t *free_slots) {
  if (!free_slots) {
    return -EINVAL;
  }

  *free_slots = lin_bus_get_free_callback_slots(dev);
  return 0;
}"
97,c,"static int al_register_incoming_cb(const struct device *dev,
                                   abstract_lin_incoming_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = INCOMING;
  data->callbacks[free_index].incoming_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_incoming_cb(const struct device *dev, abstract_lin_incoming_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  struct al_lin_driver_data *data = dev->data;
  if (!data) {
    return -EINVAL;
  }

  if (!callback) {
    return -EINVAL;
  }

  data->incoming_cb[frame_id] = callback;
  data->incoming_frame_size[frame_id] = frame_size;
  data->incoming_user_data[frame_id] = user_data;

  return 0;
}"
98,c,"static int al_register_outgoing_cb(const struct device *dev,
                                   abstract_lin_outgoing_callback_t callback,
                                   uint8_t frame_id,
                                   uint8_t frame_size,
                                   void *user_data) {
  struct abstract_lin_data *data = dev->data;

  if (callback == NULL || frame_id > 0x3F || frame_size < 1 || frame_size > 8) {
    return -EINVAL;
  }

  int free_index = allocate_callback(data, frame_id);
  if (free_index < 0) {
    return free_index;
  }

  data->callbacks[free_index].frame_id = frame_id;
  data->callbacks[free_index].frame_size = frame_size;
  data->callbacks[free_index].type = OUTGOING;
  data->callbacks[free_index].outgoing_cb = callback;
  data->callbacks[free_index].user_data = user_data;

  return 0;
}","static int al_register_outgoing_cb(const struct device *dev, abstract_lin_outgoing_callback_t callback, uint8_t frame_id, uint8_t frame_size, void *user_data) {
  struct al_lin_data *lin_data = dev->data;
  if (!lin_data) {
    return -EINVAL;
  }

  lin_data->outgoing_cb[frame_id] = callback;
  lin_data->outgoing_frame_size[frame_id] = frame_size;
  lin_data->outgoing_user_data[frame_id] = user_data;

  return 0;
}"
99,c,"int abstract_lin_scheduler_set_active_table(
    abstract_lin_scheduler_handle_t sched, size_t table_index) {
  if (table_index >= sched->table_count) {
    return -ENOENT;
  }

  bool active_before = sched->current_table != -1;

  if (active_before) {
    k_sem_take(&sched->active, K_FOREVER);
  }

  sched->current_table = table_index;
  sched->current_table_entry = 0;  // start from the beginning again.

  k_sem_give(&sched->active);

  return 0;
}","int abstract_lin_scheduler_set_active_table(uint8_t table_id) {
  return lin_scheduler_set_active_table(table_id);
}"
100,c,"void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  if (sched->current_table == -1) {
    return;  // already stopped.
  }

  k_sem_take(&sched->active, K_FOREVER);

  sched->current_table = -1;
}","void abstract_lin_scheduler_disable(abstract_lin_scheduler_handle_t sched) {
  sched->enabled = false;
}"

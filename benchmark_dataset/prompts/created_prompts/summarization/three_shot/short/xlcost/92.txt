The target code below is part of the automotive software engineering domain.
Provide a concise, single-line summary of the target C code below.
Do not provide any other output.

---

**[Examples]**
**[Example 1]**
**Code:**
```c
int FindMaxSum(int arr[], int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
```

**Summary:**
"Maximum sum such that no two elements are adjacent”

**[Example 2]**
**Code:**
```c
bool isMajority(int arr[], int n, int x) {
    int i;
    int last_index = (n % 2) ? (n / 2 + 1) : (n / 2);

    for (i = 0; i < last_index; i++) {
        if (arr[i] == x && arr[i + n / 2] == x) {
            return true;
        }
    }
    return false;
}
```

**Summary:**
"Check for Majority Element in a sorted array”

**[Example 3]**
**Code:**
```c
bool findPair(int arr[], int size, int n) {
    int i = 0;
    int j = 1;

    while (i < size && j < size) {
        if (i != j && arr[j] - arr[i] == n) {
            printf("Pair Found: (%d, %d)\n", arr[i], arr[j]);
            return true;
        } else if (arr[j] - arr[i] < n) {
            j++;
        } else {
            i++;
        }
    }

    printf("No such pair\n");
    return false;
}
```

**Summary:**
"Find a pair with the given difference”

---

**[Target]**
**Summarize the following C code (do not provide any other output):**
```c
static void can_router_frame_cb(const struct device *dev,
                                struct can_frame *frame,
                                void *user_data) {
  const struct device *to = user_data;

  const int err = can_send(to, frame, K_NO_WAIT, can_router_tx_cb, NULL);
  if (err) {
    LOG_WRN("Can send failed (%d)", err);
    return;
  }

  LOG_DBG("Routed frame from %s to %s", dev->name, to->name);
}
```

**Summary:**
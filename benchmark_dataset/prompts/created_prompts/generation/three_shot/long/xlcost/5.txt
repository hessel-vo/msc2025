Your task is to implement a Python function based on a summary.
Below is an example of generating a Python function from a summary.

---

**[Examples]**
**[Example 1]**
**Summary:**
"Finds the maximum sum of a subsequence of non-adjacent elements by iteratively tracking the maximum sum including and excluding the current element”

**Code:**
def find_max_sum(arr):
    incl = 0
    excl = 0
    for i in arr:
        new_excl = excl if excl > incl else incl
        incl = excl + i
        excl = new_excl
    return excl if excl > incl else incl

**[Example 2]**
**Summary:**
"Determines if a given element `x` is the majority in a sorted array by checking if `x` occupies both an index `i` and the index `n/2` positions ahead of it”

**Code:**
def isMajority(arr, n, x):
    last_index = (n // 2 + 1) if n % 2 == 1 else (n // 2)
    for i in range(last_index):
        if arr[i] == x and arr[i + n // 2] == x:
            return 1
    return 0

**[Example 3]**
**Summary:**
"Finds if a pair of elements with a given difference `n` exists in a sorted array by using a two-pointer approach.”

**Code:**
def findPair(arr, n):
    size = len(arr)
    i, j = 0, 1

    while i < size and j < size:
        if i != j and arr[j] - arr[i] == n:
            print(f"Pair found ({arr[i]}, {arr[j]})")
            return True
        elif arr[j] - arr[i] < n:
            j += 1
        else:
            i += 1

    print("No pair found")
    return False


---

**[Target]**
**Use the summary below to generate the related Python function**
Return the full function code, including function signature and function implementation
Do NOT add comments to the code and provide only the code as output

**Summary:**
"Returns a dictionary mapping the short name to the full FQN for all dynamic datatypes that exist in the same namespace as the provided FQN"

**Code:**
def get_fqn_namespaced_datatypes(fqn: str | None = None) -> dict[str, str]:

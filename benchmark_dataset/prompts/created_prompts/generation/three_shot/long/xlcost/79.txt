Your task is to create a C function based on a summary.
Below is an example of generating a C function from a summary.

---

**[Examples]**
**[Example 1]**
**Summary:**
"Finds the maximum sum of a subsequence of non-adjacent elements by iteratively tracking the maximum sum including and excluding the current element”

**Code:**
```c
int FindMaxSum(int arr[], int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}
```

**[Example 2]**
**Summary:**
"Determines if a given element `x` is the majority in a sorted array by checking if `x` occupies both an index `i` and the index `n/2` positions ahead of it”

**Code:**
```c
bool isMajority(int arr[], int n, int x) {
    int i;
    int last_index = (n % 2) ? (n / 2 + 1) : (n / 2);

    for (i = 0; i < last_index; i++) {
        if (arr[i] == x && arr[i + n / 2] == x) {
            return true;
        }
    }
    return false;
}
```

**[Example 3]**
**Summary:**
"Finds if a pair of elements with a given difference `n` exists in a sorted array by using a two-pointer approach.”

**Code:**
```c
bool findPair(int arr[], int size, int n) {
    int i = 0;
    int j = 1;

    while (i < size && j < size) {
        if (i != j && arr[j] - arr[i] == n) {
            printf("Pair Found: (%d, %d)\n", arr[i], arr[j]);
            return true;
        } else if (arr[j] - arr[i] < n) {
            j++;
        } else {
            i++;
        }
    }

    printf("No such pair\n");
    return false;
}
```

---

**[Target]**
**Based on the summary below, generate the full C function, including the function signature and function body (do not provide any other output)**

**Summary:**
"Processes a UDS ECU Reset request, validating the 2-byte message length, sending a positive response before triggering a system reboot for a 'hard reset', and sending a negative response for either an incorrect length or an unsupported reset sub-function."

**Code:**
```c
void handle_ecu_reset(uint8_t *data, size_t len) {
```
Your task is to implement a Cpp function based on a summary.
Below is an example of generating a Cpp function from a summary.

---

**[Examples]**
**[Example 1]**
**Summary:**
"Sends a given `DBusMessage` over an established D-Bus connection, returning `true` on success and `false` if the message is invalid, the connection is down, or the underlying send operation fails”

**Code:**
bool DBusConnection::sendDBusMessage(const DBusMessage &_message) const {
    if (!_message) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "message == NULL");
        return false;
    }
    if (!isConnected()) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "not connected");
        return false;
    }

    dbus_uint32_t dbusSerial;
    const bool result = (0 != dbus_connection_send(connection_, _message.message_, &dbusSerial));
    return result;
}

**[Example 2]**
**Summary:**
"Creates and returns a D-Bus signal message, constructed from the provided object path, interface, and signal name, with its destination set to the current client's D-Bus ID”

**Code:**
DBusMessage DBusClientId::createMessage(const std::string objectPath, const std::string interfaceName, const std::string signalName) const
{
    DBusMessage returnMessage = DBusMessage::createSignal(objectPath, interfaceName, signalName);
    returnMessage.setDestination(dbusId_.c_str());

    return (returnMessage);
}

**[Example 3]**
**Summary:**
"Wakes up a `MainLoopContext` by locking a `weak_ptr` (passed via a `void*` pointer) to ensure the context object still exists before calling its `wakeup()` method”

**Code:**
void DBusConnection::onWakeupMainContext(void* data) {
    std::weak_ptr<MainLoopContext>* mainloop = static_cast<std::weak_ptr<MainLoopContext>*>(data);

    if (!mainloop) {
        COMMONAPI_ERROR(std::string(__FUNCTION__), "mainloop == nullptr");
    } else if(auto lockedContext = mainloop->lock()) {
        lockedContext->wakeup();
    }
}


---

**[Target]**
**Use the summary below to generate the related Cpp function**
Return the full target function code, including function signature and function implementation
Do NOT add comments to the code and provide only the code as output

**Summary:**
"Lazily initializes and returns a thread-safe, singleton `DBusObjectManager` instance using a double-checked locking pattern"

**Code:**
const std::shared_ptr<DBusObjectManager> DBusConnection::getDBusObjectManager() {

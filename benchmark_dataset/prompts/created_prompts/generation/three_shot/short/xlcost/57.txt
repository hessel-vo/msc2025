Your task is to implement a Cpp function based on a summary.
Below is an example of generating a Cpp function from a summary.

---

**[Examples]**
**[Example 1]**
**Summary:**
"Maximum sum such that no two elements are adjacent”

**Code:**
int FindMaxSum(vector<int> arr, int n) {
    int incl = arr[0];
    int excl = 0;
    int excl_new;
    int i;

    for (i = 1; i < n; i++) {
        excl_new = (incl > excl) ? incl : excl;
        incl = excl + arr[i];
        excl = excl_new;
    }

    return ((incl > excl) ? incl : excl);
}

**[Example 2]**
**Summary:**
"Check for Majority Element in a sorted array”

**Code:**
bool isMajority(int arr[], int n, int x) {
    int i;
    int last_index = n % 2 ? (n / 2 + 1) : (n / 2);

    for (i = 0; i < last_index; i++) {
        if (arr[i] == x && arr[i + n / 2] == x) {
            return true;
        }
    }
    return false;
}

**[Example 3]**
**Summary:**
"Find a pair with the given difference”

**Code:**
bool findPair(int arr[], int size, int n) {
    int i = 0;
    int j = 1;

    while (i < size && j < size) {
        if (i != j && arr[j] - arr[i] == n) {
            cout << "Pair Found: (" << arr[i] << ", " << arr[j] << ")" << endl;
            return true;
        } else if (arr[j] - arr[i] < n) {
            j++;
        } else {
            i++;
        }
    }

    cout << "No such pair" << endl;
    return false;
}


---

**[Target]**
**Use the summary below to generate the related Cpp function**
Return the full target function code, including function signature and function implementation
Do NOT add comments to the code and provide only the code as output

**Summary:**
"A libdbus callback that creates, starts, or stops a D-Bus watch based on its readiness status"

**Code:**
void DBusConnection::onToggleWatch(::DBusWatch* libdbusWatch, void* data) {

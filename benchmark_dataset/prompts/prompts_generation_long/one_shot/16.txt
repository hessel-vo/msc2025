The target code below is part of the automotive software engineering domain.
Use the target summary below to generate the related Python function.
Do not provide any other output.

---

**[Example]**
**Summary:**
"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes.”

**Code:**
```python
def is_subtype_of(cls, check: str, base: str) -> bool:
    check_type = cls.get_type(check)
    if not check_type:
        raise DatatypesException(f"Not a valid type: '{check}'")
    base_type = cls.get_type(base)
    if not base_type:
        raise DatatypesException(f"Not a valid type: '{base}'")
    return check in base_type[2] or check == base
```

---

**[Target]**
**Generate a Python function based on the summary and function signature below (do not provide any other output)**

**Summary:**
"Recursively traverses up the parent hierarchy to find and return the first non-instance ancestor node and the traversal depth, raising an exception if the starting node is not a branch or if no root is found."

**Code:**
```python
def get_instance_root(self, depth: int = 0) -> tuple[VSSNode, int]:
```
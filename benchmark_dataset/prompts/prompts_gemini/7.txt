The target code below is part of the automotive software engineering domain.
Provide a concise, single-line summary of the target Python code below.
Do not provide any other output.

---

**[Example]**
**Code:**
```python
def is_subtype_of(cls, check: str, base: str) -> bool:
    check_type = cls.get_type(check)
    if not check_type:
        raise DatatypesException(f"Not a valid type: '{check}'")
    base_type = cls.get_type(base)
    if not base_type:
        raise DatatypesException(f"Not a valid type: '{base}'")
    return check in base_type[2] or check == base
```

**Summary:**
"Validates that 'check' and 'base' are known types, then returns true if the 'check' type is identical to the 'base' type or if its name is found within the 'base' type's predefined list of subtypes.”

---

**[Target]**
**Summarize the following Python code (do not provide any other output):**
```python
def get_apigear_datatype(t: str) -> typing.Optional[ApiGearType]:
    is_array = False
    apigear_type = None
    if t.endswith("[]"):
        is_array = True
        t = t[0:-2]

    if t in ["int8", "int16", "int32", "uint8", "uint16", "uint32"]:
        apigear_type = ApiGearType(ApiGearBasicType.INT32.value)
    elif t in ["int64", "uint64"]:
        apigear_type = ApiGearType(ApiGearBasicType.INT64.value)
    elif t == "float":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT32.value)
    elif t == "double":
        apigear_type = ApiGearType(ApiGearBasicType.FLOAT64.value)
    elif t == "boolean":
        apigear_type = ApiGearType(ApiGearBasicType.BOOL.value)
    elif t == "string":
        apigear_type = ApiGearType(ApiGearBasicType.STRING.value)
    else:
        apigear_type = ApiGearType(t.replace(".", "_"))

    if is_array and apigear_type is not None:
        apigear_type.is_array = True

    return apigear_type
```

**Summary:**